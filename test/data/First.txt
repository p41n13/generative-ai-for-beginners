Introduction to RoboticsMechanicsand ControlThird Edition
John J. Craig
PEARSONPrenticeHailPearson Education International
Vice President and Editorial Director, ECS: Marcia J. HortonAssociate Editor: Alice DworkinEditorial Assistant: Carole SnyderVice President and Director of Production and Manufacturing, ESM: David W. RiccardiExecutive Managing Editor: Vince O'BrienManaging Editor: David A. GeorgeProduction Editor: James BuckleyDirector of Creative Services: Paul BelfantiArt Director: Jayne ConteCover Designer: Bruce KenselaarArt Editor: Greg DullesManufacturing Manager: Trudy PisciottiManufacturing Buyer: Lisa McDowellSenior Marketing Manager: Holly Stark
PEARSONPrenticeHall© 2005 Pearson Education, Inc.Pearson Prentice HallPearson Education, Inc.Upper Saddle River, NJ 07458
All rights reserved. No part of this book may be reproduced, in any form or by any means, withoutpermission in writing from the publisher.If you purchased this book within the United States or Canada you should be aware that it has beenwrongfully imported without the approval of the Publisher or the Author.Pearson Prentice Hall® is a trademark of Pearson Education, Inc.Robotics Toolbox for MATLAB (Release7) courtesy of Peter Corke.The author and publisher of this book have used their best efforts in preparing this book. These effortsinclude the development, research, and testing of the theories and programs to determine their effective-ness. The author and publisher make no warranty of any kind, expressed or implied, with regard to theseprograms or the documentation contained in this book. The author and publisher shall not be liable inany event for incidental or consequential damages in connection with, or arising out of, the furnishing,performance, or use of these programs.Printed in the United States of America
1098 7 6 54 3ISBN
PearsonEducation Ltd., LondonPearson Education Australia Pty. Ltd., SydneyPearson Education Singapore, Pte. Ltd.Pearson Education North Asia Ltd., Hong KongPearson Education Canada, Ltd., TorontoPearson Educación de Mexico, S.A. de C.V.Pearson Education—Japan, TokyoPearson Education Malaysia, Pte. Ltd.Pearson Education, Inc., Upper Saddle River, New Jersey
Contents
Preface v1Introduction 12Spatial descriptions and transformations 193Manipulator kinematics 624Inverse manipulator kinematics 1015Jacobians: velocities and static forces 1356Manipulator dynamics 1657Trajectory generation 2018Manipulator-mechanism design 2309Linear control of manipulators 26210 Nonlinear control of manipulators 29011 Force control of manipulators 31712 Robot programming languages and systems 33913 Off-line programming systems 353A Trigonometric identities 372B The 24 angle-set conventions 374C Some inverse-kinematic formulas 377Solutions to selected exercises 379Index 387
III 
Preface
Scientistsoften have the feeling that, through their work, they are learning aboutsome aspect of themselves. Physicists see this connection in their work; so do,for example, psychologists and chemists. In the study of robotics, the connectionbetween the field of study and ourselves is unusually obvious. And, unlike a sciencethat seeks only to analyze, robotics as currently pursued takes the engineering benttoward synthesis. Perhaps it is for these reasons that the field fascinates so manyof us.The study of robotics concerns itself with the desire to synthesize some aspectsof human function by the use of mechanisms, sensors, actuators, and computers.Obviously, this is a huge undertaking, which seems certain to require a multitude ofideas from various "classical" fields.Currently, different aspects of robotics research are carried out by experts invarious fields. It is usually not the case that any single individual has the entire areaof robotics in his or her grasp. A partitioning of the field is natural to expect. Ata relatively high level of abstraction, splitting robotics into four major areas seemsreasonable: mechanical manipulation, locomotion, computer vision, and artificialintelligence.This book introduces the science and engineering of mechanical manipulation.This subdiscipline of robotics has its foundations in several classical fields. The majorrelevant fields are mechanics, control theory, and computer science. In this book,Chapters 1 through 8 cover topics from mechanical engineering and mathematics,Chapters 9 through 11 cover control-theoretical material, and Chapters 12 and 13might be classed as computer-science material. Additionally, the book emphasizescomputational aspects of the problems throughout; for example, each chapterthat is concerned predominantly with mechanics has a brief section devoted tocomputational considerations.This book evolved from class notes used to teach "Introduction to Robotics" atStanford University during the autunms of 1983 through 1985. The first and secondeditions have been used at many institutions from 1986 through 2002. The thirdedition has benefited from this use and incorporates corrections and improvementsdue to feedback from many sources. Thanks to all those who sent corrections to theauthor.This book is appropriate for a senior undergraduate- or first-year graduate-level course. It is helpful if the student has had one basic course in statics anddynamics and a course in linear algebra and can program in a high-level language.Additionally, it is helpful, though not absolutely necessary, that the student havecompleted an introductory course in control theory. One aim of the book is topresent material in a simple, intuitive way. Specifically, the audience need not bestrictly mechanical engineers, though much of the material is taken from that field.At Stanford, many electrical engineers, computer scientists, and mathematiciansfound the book quite readable.
V 
viPrefaceDirectly,this book is of use to those engineers developing robotic systems,but the material should be viewed as important background material for anyonewho will be involved with robotics. In much the same way that software developershave usually studied at least some hardware, people not directly involved with themechanics and control of robots should have some such background as that offeredby this text.Like the second edition, the third edition is organized into 13 chapters. Thematerial wifi fit comfortably into an academic semester; teaching the material withinan academic quarter will probably require the instructor to choose a couple ofchapters to omit. Even at that pace, all of the topics cannot be covered in greatdepth. In some ways, the book is organized with this in mind; for example, mostchapters present only one approach to solving the problem at hand. One of thechallenges of writing this book has been in trying to do justice to the topics coveredwithin the time constraints of usual teaching situations. One method employed tothis end was to consider only material that directly affects the study of mechanicalmanipulation.At the end of each chapter is a set of exercises. Each exercise has beenassigned a difficulty factor, indicated in square brackets following the exercise'snumber. Difficulties vary between [00] and [50], where [00] is trivial and [50] isan unsolved researchproblem.' Of course, what one person finds difficult, anothermight find easy, so some readers will find the factors misleading in some cases.Nevertheless, an effort has been made to appraise the difficulty of the exercises.At the end of each chapter there is a programming assignment in whichthe student applies the subject matter of the corresponding chapter to a simplethree-jointed planar manipulator. This simple manipulator is complex enough todemonstrate nearly all the principles of general manipulators without bogging thestudent down in too much complexity. Each programming assignment builds uponthe previous ones, until, at the end of the course, the student has an entire library ofmanipulator software.Additionally, with the third edition we have added MATLAB exercises tothe book. There are a total of 12 MATLAB exercises associated with Chapters1 through 9. These exercises were developed by Prof. Robert L. Williams II ofOhio University, and we are greatly indebted to him for this contribution. Theseexercises can be used with the MATLAB Robotics Toolbox2 created by PeterCorke, Principal Research Scientist with CSIRO in Australia.Chapter 1 is an introduction to the field of robotics. It introduces somebackground material, a few fundamental ideas, and the adopted notation of thebook, and it previews the material in the later chapters.Chapter 2 covers the mathematics used to describe positions and orientationsin 3-space. This is extremely important material: By definition, mechanical manip-ulation concerns itself with moving objects (parts, tools, the robot itself) around inspace. We need ways to describe these actions in a way that is easily understood andis as intuitive as possible.
have adopted the same scale as in The Art of Computer Pro gramming by D. Knuth (Addison-Wesley).2For the MATLAB Robotics Toolbox, go to http:/www.ict.csiro.au/robotics/ToolBOX7.htm.
PrefaceviiChapters3 and 4 deal with the geometry of mechanical manipulators. Theyintroduce the branch of mechanical engineering known as kinematics, the study ofmotion without regard to the forces that cause it. In these chapters, we deal with thekinematics of manipulators, but restrict ourselves to static positioning problems.Chapter 5 expands our investigation of kinematics to velocities and staticforces.In Chapter 6, we deal for the first time with the forces and moments requiredto cause motion of a manipulator. This is the problem of manipulator dynamics.Chapter 7 is concerned with describing motions of the manipulator in terms oftrajectories through space.Chapter 8 many topics related to the mechanical design of a manipulator. Forexample, how many joints are appropriate, of what type should they be, and howshould they be arranged?In Chapters 9 and 10, we study methods of controffing a manipulator (usuallywith a digital computer) so that it wifi faithfully track a desired position trajectorythrough space. Chapter 9 restricts attention to linear control methods; Chapter 10extends these considerations to the nonlinear realm.Chapter 11 covers the field of active force control with a manipulator. That is,we discuss how to control the application of forces by the manipulator. This mode ofcontrol is important when the manipulator comes into contact with the environmentaround it, such as during the washing of a window with a sponge.Chapter 12 overviews methods of programming robots, specifically the ele-ments needed in a robot programming system, and the particular problems associatedwith programming industrial robots.Chapter 13 introduces off-line simulation and programming systems, whichrepresent the latest extension to the man—robot interface.I would like to thank the many people who have contributed their time tohelping me with this book. First, my thanks to the students of Stanford's ME219 inthe autunm of 1983 through 1985, who suffered through the first drafts, found manyerrors, and provided many suggestions. Professor Bernard Roth has contributed inmany ways, both through constructive criticism of the manuscript and by providingme with an environment in which to complete the first edition. At SILMA Inc.,I enjoyed a stimulating environment, plus resources that aided in completing thesecond edition. Dr. Jeff Kerr wrote the first draft of Chapter 8. Prof. Robert L.Williams II contributed the MATLAB exercises found at the end of each chapter,and Peter Corke expanded his Robotics Toolbox to support this book's style of theDenavit—Hartenberg notation. I owe a debt to my previous mentors in robotics:Marc Raibert, Carl Ruoff, Tom Binford, and Bernard Roth.Many others around Stanford, SILMA, Adept, and elsewhere have helped invarious ways—my thanks to John Mark Agosta, Mike All, Lynn Balling, Al Barr,Stephen Boyd, Chuck Buckley, Joel Burdick, Jim Callan, Brian Carlisle, MoniqueCraig, Subas Desa, Tn Dai Do, Karl Garcia, Ashitava Ghosal, Chris Goad, RonGoldman, Bill Hamilton, Steve Holland, Peter Jackson, Eric Jacobs, Johann Jager,Paul James, Jeff Kerr, Oussama Khatib, Jim Kramer, Dave Lowe, Jim Maples, DaveMarimont, Dave Meer, Kent Ohlund, Madhusudan Raghavan, Richard Roy, KenSalisbury, Bruce Shimano, Donalda Speight, Bob Tiove, Sandy Wells, and DaveWilliams.
viiiPrefaceThestudents of Prof. Roth's Robotics Class of 2002 at Stanford used thesecond edition and forwarded many reminders of the mistakes that needed to getfixed for the third edition.Finally I wish to thank Tom Robbins at Prentice Hall for his guidance with thefirst edition and now again with the present edition.J.J.C.
CHAPTER 1Introduction
1.1BACKGROUND1.2THE MECHANICS AND CONTROL OF MECHANICAL MANIPULATORS1.3NOTATION
1.1BACKGROUNDThehistory of industrial automation is characterized by periods of rapid change inpopular methods. Either as a cause or, perhaps, an effect, such periods of change inautomation techniques seem closely tied to world economics. Use of the industrialrobot, which became identifiable as a unique device in the 1960s [1], along withcomputer-aided design (CAD) systems and computer-aided manufacturing (CAM)systems, characterizes the latest trends in the automation of the manufacturingprocess. These technologies are leading industrial automation through anothertransition, the scope of which is stifi unknown [2].In North America, there was much adoption of robotic equipment in the early1980s, followed by a brief pull-back in the late 1980s. Since that time, the market hasbeen growing (Fig. 1.1), although it is subject to economic swings, as are all markets.Figure 1.2 shows the number of robots being installed per year in the majorindustrial regions of the world. Note that Japan reports numbers somewhat dif-ferently from the way that other regions do: they count some machines as robotsthat in other parts of the world are not considered robots (rather, they would besimply considered "factory machines"). Hence, the numbers reported for Japan aresomewhat inflated.A major reason for the growth in the use of industrial robots is their decliningcost. Figure 1.3 indicates that, through the decade of the 1990s, robot prices droppedwhile human labor costs increased. Also, robots are not just getting cheaper, theyare becoming more effective—faster, more accurate, more flexible. If we factorthese quality adjustments into the numbers, the cost of using robots is dropping evenfaster than their price tag is. As robots become more cost effective at their jobs,and as human labor continues to become more expensive, more and more industrialjobs become candidates for robotic automation. This is the single most importanttrend propelling growth of the industrial robot market. A secondary trend is that,economics aside, as robots become more capable they become able to do more andmore tasks that might be dangerous or impossible for human workers to perform.The applications that industrial robots perform are gradually getting moresophisticated, but it is stifi the case that, in the year 2000, approximately 78%of the robots installed in the US were welding or material-handling robots [3].
1 
120011001000900800700600III5004003002001984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000
FIGURE 1.1:Shipments of industrial robots in North America in millions of USdollars [3].
——.———LabourcostsNRobotprices, not quality adj.
40.00- .——a Robot prices, quality adjusted -A-— ')flfin - ——A
I I II I II II19901991199219931994 199519961997199819992000
FIGURE 1.3:Robot prices compared with human labor costs in the 1990s [3].2Chapter 1Introduction
Shipmentsof industrial robots in North America, millions of US dollars
00no
I
19951996 220032004Japan (all types of U United States [1111 European Union All other countriesindustrial robots)
FIGURE1.2: Yearly installationsof multipurpose industrial robots for 1995—2000 andforecasts for 2001—2004 [3].
160.00140.00120.00100.0080.0060.00
Section 1.1Background3
FIG U RE 1.4: The Adept 6manipulator has six rotational joints and is popular in manyapplications. Courtesy of Adept Tecimology, Inc.
A more challenging domain, assembly byindustrial robot, accounted for 10% ofinstallations.This book focuses on the mechanics and control of the most important formof the industrial robot, the mechanical manipulator. Exactlywhat constitutes anindustrial robot is sometimes debated. Devices such as that shown in Fig. 1.4 arealways included, while numerically controlled (NC) milling machines are usuallynot. The distinction lies somewhere in the sophistication of the programmability ofthe device—if a mechanical device can be programmed to perform a wide varietyof applications, it is probably an industrial robot. Machines which are for the mostpart limited to one class of task are considered fixed automation. Forthe purposesof this text, the distinctions need not be debated; most material is of a basic naturethat applies to a wide variety of programmable machines.By and large, the study of the mechanics and control of manipulators isnot a new science, but merely a collection of topics taken from "classical" fields.Mechanical engineering contributes methodologies for the study of machines instatic and dynamic situations. Mathematics supplies tools for describing spatialmotions and other attributes of manipulators. Control theory provides tools fordesigning and evaluating algorithms to realize desired motions or force applications.Electrical-engineering techniques are brought to bear in the design of sensorsand interfaces for industrial robots, and computer science contributes a basis forprogramming these devices to perform a desired task.
4Chapter 1Introduction12 THE MECHANICS AND CONTROL OF MECHANICAL MANIPULATORSThefollowing sections introduce some terminology and briefly preview each of thetopics that will be covered in the text.Description of position and orientationIn the study of robotics, we are constantly concerned with the location of objects inthree-dimensional space. These objects are the links of the manipulator, the partsand tools with which it deals, and other objects in the manipulator's environment.At a crude but important level, these objects are described by just two attributes:position and orientation. Naturally, one topic of immediate interest is the mannerin which we represent these quantities and manipulate them mathematically.In order to describe the position and orientation of a body in space, we wifialways attach a coordinate system, or frame, rigidly to the object. We then proceedto describe the position and orientation of this frame with respect to some referencecoordinate system. (See Fig. 1.5.)Any frame can serve as a reference system within which to express theposition and orientation of a body, so we often think of transforming or changingthe description of these attributes of a body from one frame to another. Chapter 2discusses conventions and methodologies for dealing with the description of positionand orientation and the mathematics of manipulating these quantities with respectto various coordinate systems.Developing good skifis concerning the description of position and rotation ofrigid bodies is highly useful even in fields outside of robotics.Forward kinematics of manipulatorsKinematics is the science of motion that treats motion without regard to the forceswhich cause it. Within the science of kinematics, one studies position, velocity,
Y
FiGURE 1.5: Coordinate systems or "frames" are attached to the manipulator and toobjects in the environment.z
Section 1.2The mechanics and control of mechanical manipulators 5acceleration,and all higher order derivatives of the position variables (with respectto time or any other variable(s)). Hence, the study of the kinematics of manipulatorsrefers to all the geometrical and time-based properties of the motion.Manipulators consist of nearly rigid links, which are connected by joints thatallow relative motion of neighboring links. These joints are usually instrumentedwith position sensors, which allow the relative position of neighboring links to bemeasured. In the case of rotary or revolute joints, these displacements are calledjoint angles. Some manipulators contain sliding (or prismatic) joints, in which therelative displacement between links is a translation, sometimes called the jointoffset.The number of degrees of freedom that a manipulator possesses is the numberof independent position variables that would have to be specified in order to locateall parts of the mechanism. This is a general term used for any mechanism. Forexample, a four-bar linkage has only one degree of freedom (even though thereare three moving members). In the case of typical industrial robots, because amanipulator is usually an open kinematic chain, and because each joint position isusually defined with a single variable, the number of joints equals the number ofdegrees of freedom.At the free end of the chain of links that make up the manipulator is the end-effector. Depending on the intended application of the robot, the end-effector couldbe a gripper, a welding torch, an electromagnet, or another device. We generallydescribe the position of the manipulator by giving a description of the tool frame,which is attached to the end-effector, relative to the base frame, which is attachedto the nonmoving base of the manipulator. (See Fig. 1.6.)A very basic problem in the study of mechanical manipulation is called forwardkinematics. This is the static geometrical problem of computing the position andorientation of the end-effector of the manipulator. Specifically, given a set of joint
z
x
FIGURE1.6:Kinematic equations describe the tool frame relative to the base frameas a function of the joint variables.01fTooll
fBasel
y
6Chapter 1Introductionangles,the forward kinematic problem is to compute the position and orientation ofthe tool frame relative to the base frame. Sometimes, we think of this as changingthe representation of manipulator position from a joint space description into aCartesian space description.' This problem wifi be explored in Chapter 3.Inversekinematics of manipulatorsInChapter 4, we wifi consider the problem of inverse kinematics. This problemis posed as follows: Given the position and orientation of the end-effector of themanipulator, calculate all possible sets of joint angles that could be used to attainthis given position and orientation. (See Fig. 1.7.) This is a fundamental problem inthe practical use of manipulators.This is a rather complicated geometrical problem that is routinely solvedthousands of times daily in human and other biological systems. In the case of anartificial system like a robot, we wifi need to create an algorithm in the controlcomputer that can make this calculation. In some ways, solution of this problem isthe most important element in a manipulator system.We can think of this problem as a mapping of "locations" in 3-D Cartesianspace to "locations" in the robot's internal joint space. This need naturally arisesanytime a goal is specified in external 3-D space coordinates. Some early robotslacked this algorithm—they were simply moved (sometimes by hand) to desiredlocations, which were then recorded as a set of joint values (i.e., as a location injoint space) for later playback. Obviously, if the robot is used purely in the modeof recording and playback of joint locations and motions, no algorithm relating
Y
FIGURE 1.7:Fora givenposition and orientation of the tool frame, values for thejoint variables can be calculated via the inverse kinematics.
1By Cartesian space, we mean the space in which the position of a point is given with three numbers,and in which the orientation of a body is given with three numbers. It is sometimes called task space oroperational space.Z(Tool)
Yg,
x03
x
Section 1.2The mechanics and control of mechanical manipulators 7joint space to Cartesian space is needed. These days, however, it is rare to find anindustrial robot that lacks this basic inverse kinematic algorithm.The inverse kinematics problem is not as simple as the forward kinematicsone. Because the kinematic equations are nonlinear, their solution is not alwayseasy (or even possible) in a closed form. Also, questions about the existence of asolution and about multiple solutions arise.Study of these issues gives one an appreciation for what the human mind andnervous system are accomplishing when we, seemingly without conscious thought,move and manipulate objects with our arms and hands.The existence or nonexistence of a kinematic solution defines the workspaceofa given manipulator. The lack of a solution means that the manipulator cannotattain the desired position and orientation because it lies outside of the manipulator'sworkspace.Velocities, static forces, singularitiesIn addition to dealing with static positioning problems, we may wish to analyzemanipulators in motion. Often, in performing velocity analysis of a mechanism, it isconvenient to define a matrix quantity called the Jacobian of the manipulator. TheJacobian specifies a mapping from velocities in joint space to velocities in Cartesianspace. (See Fig. 1.8.) The nature of this mapping changes as the configuration ofthe manipulator varies. At certain points, called singularities, this mapping is notinvertible. An understanding of the phenomenon is important to designers and usersof manipulators.Consider the rear gunner in a World War I—vintage biplane fighter plane(ifiustrated in Fig. 1.9). While the pilot ifies the plane from the front cockpit, the reargunner's job is to shoot at enemy aircraft. To perform this task, his gun is mountedin a mechanism that rotates about two axes, the motions being called azimuth andelevation. Using these two motions (two degrees of freedom), the gunner can directhis stream of bullets in any direction he desires in the upper hemisphere.
FIGURE 1.8: The geometrical relationship between joint rates and velocity of theend-effector can be described in a matrix called the Jacobian.o1
C,)
8Chapter 1Introduction
FIGURE 19 AWorldWar I biplane with a pilot and a rear gunner The rear gunnermechanism is subject totheproblem of singular positions.
Anenemy plane isspotted at azimuth one o'clock and elevation 25 degrees!The gunner trains his stream of bullets on the enemy plane and tracks its motion soas to hit it with a continuous stream of bullets for as long as possible. He succeedsand thereby downs the enemy aircraft.A second enemy plane is seen at azimuth one o'clock and elevation 70 degrees!The gunner orients his gun and begins firing. The enemy plane is moving so as toobtain a higher and higher elevation relative to the gunner's plane. Soon the enemyplane is passing nearly overhead. What's this? The gunner is no longer able to keephis stream of bullets trained on the enemy plane! He found that, as the enemy planeflew overhead, he was required to change his azimuth at a very high rate. He wasnot able to swing his gun in azimuth quickly enough, and the enemy plane escaped!In the latter scenario, the lucky enemy pilot was saved by a singularity! Thegun's orienting mechanism, while working well over most of its operating range,becomes less than ideal when the gun is directed straight upwards or nearly so. Totrack targets that pass through the position directly overhead, a very fast motionaround the azimuth axis is required. The closer the target passes to the point directlyoverhead, the faster the gunner must turn the azimuth axis to track the target. Ifthe target flies directly over the gunner's head, he would have to spin the gun on itsazimuth axis at infinite speed!Should the gunner complain to the mechanism designer about this problem?Could a better mechanism be designed to avoid this problem? It turns out thatyou really can't avoid the problem very easily. In fact, any two-degree-of-freedomorienting mechanism that has exactly two rotational joints cannot avoid havingthis problem. In the case of this mechanism, with the stream of bullets directed
Section 1.2The mechanics and control of mechanical manipulators 9straightup, their direction aligns with the axis of rotation of the azimuth rotation.This means that, at exactly this point, the azimuth rotation does not cause achange in the direction of the stream of bullets. We know we need two degreesof freedom to orient the stream of bullets, but, at this point, we have lost theeffective use of one of the joints. Our mechanism has become locally degenerateat this location and behaves as if it only has one degree of freedom (the elevationdirection).This kind of phenomenon is caused by what is called a singularity of themechanism. All mechanisms are prone to these difficulties, including robots. Justas with the rear gunner's mechanism, these singularity conditions do not preventa robot arm from positioning anywhere within its workspace. However, they cancause problems with motions of the arm in their neighborhood.Manipulators do not always move through space; sometimes they are alsorequired to touch a workpiece or work surface and apply a static force. In thiscase the problem arises: Given a desired contact force and moment, what set ofjoint torques is required to generate them? Once again, the Jacobian matrix of themanipulator arises quite naturally in the solution of this problem.DynamicsDynamics is a huge field of study devoted to studying the forces required to causemotion. In order to accelerate a manipulator from rest, glide at a constant end-effector velocity, and finally decelerate to a stop, a complex set of torque functionsmust be applied by the joint actuators.2 The exact form of the required functions ofactuator torque depend on the spatial and temporal attributes of the path taken bythe end-effector and on the mass properties of the links and payload, friction in thejoints, and so on. One method of controlling a manipulator to follow a desired pathinvolves calculating these actuator torque functions by using the dynamic equationsof motion of the manipulator.Many of us have experienced lifting an object that is actually much lighterthan we(e.g., getting a container of milk from the refrigerator whichwe thought was full, but was nearly empty). Such a misjudgment of payload cancause an unusual lifting motion. This kind of observation indicates that the humancontrol system is more sophisticated than a purely kinematic scheme. Rather, ourmanipulation control system makes use of knowledge of mass and other dynamiceffects. Likewise, algorithms that we construct to the motions of a robotmanipulator should take dynamics into account.A second use of the dynamic equations of motion is in simulation. By refor-mulating the dynamic equations so that acceleration is computed as a function ofactuator torque, it is possible to simulate how a manipulator would move underapplication of a set of actuator torques. (See Fig. 1.10.) As computing powerbecomes more and more cost effective, the use of simulations is growing in use andimportance in many fields.In Chapter 6, we develop dynamic equations of motion, which may be used tocontrol or simulate the motion of manipulators.2We use joint actuators as the generic term for devices that power a manipulator—for example,electric motors, hydraulic and pneumatic actuators, and muscles.
10Chapter 1Introduction
T3(
FIG URE 1.10:Therelationshipbetween the torques applied by the actuators andthe resulting motion of the manipulator is embodied in the dynamic equations ofmotion.
TrajectorygenerationAcommon way of causing a manipulator to move from here to there in a smooth,controlled fashion is to cause each joint to move as specified by a smooth functionof time. Commonly, each joint starts and ends its motion at the same time, so thattheappears coordinated. Exactly how to compute these motionfunctions is the problem of trajectory generation. (See Fig. 1.11.)Often, a path is described not only by a desired destination but also by someintermediate locations, or via points, through which the manipulator must pass enroute to the destination. In such instances the term spline is sometimes used to referto a smooth function that passes through a set of via points.In order to force the end-effector to follow a straight line (or other geometricshape) through space, the desired motion must be converted to an equivalent setof joint motions. This Cartesian trajectory generation wifi also be considered inChapter 7.Manipulatordesign and sensorsAlthoughmanipulators are, in theory, universal devices applicable to many situ-ations, economics generally dictates that the intended task domain influence themechanical design of the manipulator. Along with issues such as size, speed, andload capability, the designer must also consider the number of joints and theirgeometric arrangement. These considerations affect the manipulator's workspacesize and quality, the stiffness of the manipulator structure, and other attributes.The more joints a robot arm contains, the more dextrous and capable it wifibe. Of course, it wifi also be harder to build and more expensive. In order to build
Section 1.2The mechanics and control of mechanical manipulators 11
FIGURE 1.1 1: In order to move the end-effector through space from point A topointB, we must compute a trajectory for each joint to follow.
a useful robot, that can take two approaches: build a specialized robot fora specifictask, or build a universal robot thatwould able to perform a wide variety of tasks.In the case of a specialized robot, some careful thinking will yield a solution forhow many joints are needed. For example, a specialized robot designed solely toplace electronic components on a flat circuit board does not need to have morethan four joints. Three joints allow the position of the hand to attain any positionin three-dimensional space, with a fourth joint added to allow the hand to rotatethe grasped component about a vertical axis. In the case of a universal robot, it isinteresting that fundamental properties of the physical world we live in dictate the"correct" minimum number of joints—that minimum number is six.Integral to the design of the manipulator are issues involving the choice andlocation of actuators, transmission systems, and internal-position (and sometimesforce) sensors. (See Fig. 1.12.) These and other design issues will be discussed inChapter 8.Linearposition controlSomemanipulators are equipped with stepper motors or other actuators that canexecute a desired trajectory directly. However, the vast majority of manipulatorsare driven by actuators that supply a force or a torque to cause motion of the links.In this case, an algorithm is needed to compute torques that will cause the desiredmotion. The problem of dynamics is central to the design of such algorithms, butdoes not in itself constitute a solution. A primary concern of a position controlsystemis to compensate automatically for errors in knowledge of the parametersof a system and to suppress disturbances that tend to perturb the system from thedesired trajectory. To accomplish this, position and velocity sensors are monitoredby the controlalgorithm,which computes torque commands for the actuators. (See03A
oi( BS
12Chapter 1Introduction
FIGURE 1.12:Thedesign ofa mechanical manipulator must address issues of actuatorchoice, location, transmission system, structural stiffness, sensor location, and more.
FIG U RE 1.13:In ordertocause the manipulator to follow the desired trajectory, aposition-control system must be implemented.Such a system uses feedback fromjoint sensors to keep the manipulator on course.
Fig. 1.13.) In Chapter 9, we wifi consider control algorithms whose synthesis is basedon linear approximations to the dynamics of a manipulator. These linear methodsare prevalent in current industrial practice.Nonlinearposition controlAlthough control systems based on approximate linear models are popular in currentindustrial robots, it is important to consider the complete nonlinear dynamics ofthe manipulator when synthesizing control algorithms. Some industrial robots arenow being introduced which make use of nonlinear control algorithms in their03
01.
Section 1.2The mechanics and control of mechanical manipulators 13controllers.These nonlinear techniques of controlling a manipulator promise betterperformance than do simpler linear schemes. Chapter 10 will introduce nonlinearcontrol systems for mechanical manipulators.ForcecontrolTheability of a manipulator to control forces of contact when it touches parts,tools, or work surfaces seems to be of great importance in applying manipulatorsto many real-world tasks. Force control is complementary to position control, inthat we usually think of only one or the other as applicable in a certain situation.When a manipulator is moving in free space, only position control makes sense,because there is no surface to react against. When a manipulator is touching arigid surface, however, position-control schemes can cause excessive forces to buildup at the contact or cause contact to be lost with the surface when it was desiredfor some application. Manipulators are rarely constrained by reaction surfaces inall directions simultaneously, so a mixed or hybrid control is required, with somedirections controlled by a position-control law and remaining directions controlledby a force-control law. (See Fig. 1.14.) Chapter 11 introduces a methodology forimplementing such a force-control scheme.A robot should be instructed to wash a window by maintaining a certainforce in the direction perpendicular to the plane of the glass, while following amotion trajectory in directions tangent to the plane. Such split or hybrid controlspecifications are natural for such tasks.ProgrammingrobotsArobot progranuning language serves as the interface between the human userand the industrial robot. Central questions arise: How are motions through spacedescribed easily by the programmer? How are multiple manipulators programmed
FIG U RE 1.14: In order for a manipulator to slide across a surface while applying aconstant force, a hybrid position—force control system must be used.
14Chapter 1Introduction
FIGURE 1.15:Desired motions of the manipulator and end-effector, desired contactforces, and complex manipulation strategies can be described in a robotprograrnminglanguage.
so that they can work in parallel? How are sensor-based actions described in alanguage?Robot manipulators differentiate themselves from fixed automation by being"flexible," which means programmable. Not only are the movements of manipulatorsprogrammable, but, through the use of sensors and communications with otherfactory automation, manipulators can adapt to variations as the task proceeds. (SeeFig. 1.15.)In typical robot systems, there is a shorthand way for a human user to instructthe robot which path it is to follow. First of all, a special point on the hand(or perhaps on a grasped tool) is specified by the user as the operational point,sometimes also called the TCP (for Tool Center Point). Motions of the robot wifibe described by the user in terms of desired locations of the operational pointrelative to a user-specified coordinate system. Generally, the user wifi define thisreference coordinate system relative to the robot's base coordinate system in sometask-relevant location.Most often, paths are constructed by specifying a sequence of via points. Viapoints are specified relative to the reference coordinate system and denote locationsalong the path through which the TCP should pass. Along with specifying the viapoints, the user may also indicate that certain speeds of the TCP be used overvarious portions of the path. Sometimes, other modifiers can also be specified toaffect the motion of the robot (e.g., different smoothness criteria, etc.). From theseinputs, the trajectory-generation algorithm must plan all the details of the motion:velocity profiles for the joints, time duration of the move, and so on. Hence, input
Section 1.2The mechanics and control of mechanical manipulators 15to thetrajectory-generation problem is generally given by constructs in the robotprogramming language.The sophistication of the user interface is becoming extremely importantas manipulators and other programmable automation are applied to more andmore demanding industrial applications. The problem of programming manipu-lators encompasses all the issues of "traditional" computer programming and sois an extensive subject in itself. Additionally, some particular attributes of themanipulator-programming problem cause additional issues to arise. Some of thesetopics will be discussed in Chapter 12.Off-lineprogramming and simulationAnoff-line programming system is a robot programming environment that hasbeen sufficiently extended, generally by means of computer graphics, that thedevelopment of robot programs can take place without access to the robot itself. Acommon argument raised in their favor is that an off-line programming system wifinot cause production equipment (i.e., the robot) to be tied up when it needs to bereprogrammed; hence, automated factories can stay in production mode a greaterpercentage of the time. (See Fig. 1.16.)They also serve as a natural vehicle to tie computer-aided design (CAD) databases used in the design phase of a product to the actual manufacturing of theproduct. In some cases, this direct use of CAD data can dramatically reduce theprogramming time required for the manufacturing process. Chapter 13 discusses theelements of industrial robot off-line programming systems.
FIGURE 1.16: Off-line programming systems, generally providing a computer graphicsinterface, allow robots to be programmed without access to the robot itself duringprogramming.
16Chapter 1Introduction1.3NOTATIONNotation is always an issue in science and engineering. In this book, we use thefollowing conventions:1. Usually, variables written in uppercase represent vectors or matrices. Lower-case variables are scalars.2. Leading subscripts and superscripts identify which coordinate system a quantityis written in. For example,A P representsa position vector written in coordinatesystem {A}, and R is a rotation matrix3 that specifies the relationship betweencoordinate systems {A} and {B}.3. Trailing superscripts are used (as widely accepted) for indicating the inverseor transpose of a matrix (e.g., R1, RT).4. Trailing subscripts are not subject to any strict convention but may indicate avector component (e.g., x, y, or z) or maybe used as a description—as inthe position of a bolt.5. We will use many trigonometric fi.mctions. Our notation for the cosine of ananglemay take any of the following forms: cos =c01 = c1.Vectorsare taken to be column vectors; hence, row vectors wifi have thetranspose indicated explicitly.A note on vector notation in general: Many mechanics texts treat vectorquantities at a very abstract level and routinely use vectors defined relative todifferent coordinate systems in expressions. The clearest example is that of additionof vectors which are given or known relative to differing reference systems. This isoften very convenient and leads to compact and somewhat elegant formulas. Forexample, consider the angular velocity, 0w4 ofthe last body in a series connectionof four rigid bodies (as in the links of a manipulator) relative to the fixed base of thechain. Because angular velocities sum vectorially, we may write a very simple vectorequation for the angular velocity of the final link:=++ 2w3 + (1.1)However, unless these quantities are expressed with respect to a common coordinatesystem, they cannot be summed, and so, though elegant, equation (1.1) has hiddenmuch of the "work" of the computation. For the particular case of the study ofmechanical manipulators, statements like that of (1.1) hide the chore of bookkeepingof coordinate systems, which is often the very idea that we need to deal with in practice.Therefore, in this book, we carry frame-of-reference information in the nota-tion for vectors, and we do not sum vectors unless they are in the same coordinatesystem. In this way, we derive expressions that solve the "bookkeeping" problemand can be applied directly to actual numerical computation.
BIBLIOGRAPHY[1] B.Roth, "Principles of Automation," Future Directions in Manufacturing Technol-ogy, Based on the Unilever Research and Engineering Division Symposium held atPort Sunlight, April 1983, Published by Unilever Research, UK.3This term wifi be introduced in Chapter 2.
Exercises17[2] R.Brooks, "Flesh and Machines," Pantheon Books, New York, 2002.[3] The International Federation of Robotics, and the United Nations, "World Robotics2001," Statistics, Market Analysis, Forecasts, Case Studies and Profitability of RobotInvestment, United Nations Publication, New York and Geneva, 2001.General-referencebooks[4]R. Paul, Robot Manipulators, MIT Press, Cambridge, IvIA, 1981.[5] M. Brady et al., Robot Motion, MIT Press, Cambridge, MA, 1983.[6] W. Synder, Industrial Robots: Computer Interfacing and Control, Prentice-Hall, Engle-wood Cliffs, NJ, 1985.[7] Y. Koren, Robotics for Engineers, McGraw-Hill, New York, 1985.[8] H. Asada and J.J. Slotine, Robot Analysis and Control, Wiley, New York, 1986.[9] K. Fu, R. Gonzalez, and C.S.G. Lee, Robotics: Control, Sensing, Vision, and Intelli-gence, McGraw-Hill, New York, 1987.[10] E. Riven, Mechanical Design of Robots, McGraw-Hill, New York, 1988.[II] J.C. Latombe, Robot Motion Planning, Kiuwer Academic Publishers, Boston, 1991.[12] M. Spong, Robot Control: Dynamics, Motion Planning, and Analysis, HiEE Press,New York, 1992.[13] S.Y. Nof, Handbook of Industrial Robotics, 2nd Edition, Wiley, New York, 1999.[14] L.W. Tsai, Robot Analysis: The Mechanics of Serial and Parallel Manipulators, Wiley,New York, 1999.[15] L. Sciavicco and B. Siciliano, Modelling and Control of Robot Manipulators, 2ndEdition, Springer-Verlag, London, 2000.[16] G. Schmierer and R. Schraft, Service Robots, A.K. Peters, Natick, MA, 2000.General-referencejournals and magazines[17]Robotics World.[18]IEEETransactions on Robotics and Automation.[19] International Journal of Robotics Research (MIT Press).[20] ASME Journal of Dynamic Systems, Measurement, and Control.[21] International Journal of Robotics & Automation (lASTED).
EXERCISES1.1[20] Make a chronology of major events in the development of industrial robotsover the past 40 years. See Bibliography and general references.1.2 [20] Make a chart showing the major applications of industrial robots (e.g., spotwelding, assembly, etc.) and the percentage of installed robots in use in eachapplication area. Base your chart on the most recent data you can find. SeeBibliography and general references.1.3 [40] Figure 1.3 shows how the cost of industrial robots has declined over the years.Find data on the cost of human labor in various specific industries (e.g., labor inthe auto industry, labor in the electronics assembly industry, labor in agriculture,etc.) and create a graph showing how these costs compare to the use of robotics.You should see that the robot cost curve "crosses" various the human cost curves
18Chapter 1Introductionof differentindustries at different times. From this, derive approximate dateswhen robotics first became cost effective for use in various industries.1.4 [10] In a sentence or two, define kinematics, workspace, and trajectory.1.5 [10] In a sentence or two, define frame, degree of freedom, and position control.1.6 [10] In a sentence or two, define force control, and robot programming language.1.7 [10] In a sentence or two, define nonlinear control, and off-line programming.1.8 [20] Make a chart indicating how labor costs have risen over the past 20 years.1.9 [20] Make a chart indicating how the computer performance—price ratio hasincreased over the past 20 years.1.10 [20] Make a chart showing the major users of industrial robots (e.g., aerospace,automotive, etc.) and the percentage of installed robots in use in each industry.Base your chart on the most recent data you can find. (See reference section.)PROGRAMMING EXERCISE (PART 1)Familiarize yourself with the computer you will use to do the programming exercises atthe end of each chapter. Make sure you can create and edit files and can compile andexecute programs.MATLAB EXERCISE 1At the end of most chapters in this textbook, a MATLAB exercise is given. Generally,these exercises ask the student to program the pertinent robotics mathematics inMATLAB and then check the results of the IvIATLAB Robotics Toolbox. The textbookassumes familiarity with MATLAB and linear algebra (matrix theory). Also, the studentmust become familiar with the MATLAB Robotics Toolbox. ForMATLAB Exercise 1,
a) Familiarize yours elf with the MATLAB programming environment if necessary. Atthe MATLAB software prompt, try typing demo andhelp. Using the color-codedMATLAB editor, learn how to create, edit, save, run, and debug rn-files (ASCIIifies with series of MATLAB statements). Learn how to create arrays (matrices andvectors), and explore the built-in MATLAB linear-algebra functions for matrixand vector multiplication, dot and cross products, transposes, determinants, andinverses, and for the solution of linear equations. MATLAB is based on thelanguage C, but is generally much easier to use. Learn how to program logicalconstructs and loops in MATLAB. Learn how to use subprograms and functions.Learn how to use comments (%) forexplaining your programs and tabs for easyreadability. Check out www.mathworks.com for more information and tutorials.Advanced MATLAB users should become familiar with Simulink, the graphicalinterface of MATLAB, and with the MATLAB Symbolic Toolbox.b) Familiarize yourself with the IVIATLAB Robotics Toolbox, a third-party toolboxdeveloped by Peter I. Corke of CSIRO, Pinjarra Hills, Australia. This productcan be downloaded for free from www.cat.csiro.au/cmst/stafflpic/robot. The sourcecode is readable and changeable, and there is an international community ofusers, at robot-toolbox@lists.rnsa.cmst.csiro.au. Download the MATLAB RoboticsToolbox, and install it on your computer by using the .zip ifie and following theinstructions. Read the README ifie, and familiarize yourself with the variousfunctions available to the user. Find the robot.pdf ifie—this is the user manualgiving background information and detailed usage of all of the Toolbox functions.Don't worry if you can't understand the purpose of these functions yet; they dealwith robotics mathematics concepts covered in Chapters 2 through 7 of this book.
CHAPTER2Spatial descriptionsand transformations
2.1INTRODUCTION2.2DESCRIPTIONS: POSITIONS, ORIENTATIONS, AND FRAMES2.3MAPPINGS: CHANGING DESCRIPTIONS FROM FRAME TO FRAME2.4OPERATORS: TRANSLATIONS, ROTATIONS, AND TRANSFORMATIONS2.5SUMMARY OF INTERPRETATIONS2.6TRANSFORMATION ARITHMETIC2.7TRANSFORM EQUATIONS2.8MORE ON REPRESENTATION OF ORIENTATION2.9TRANSFORMATION OF FREE VECTORS2.10 COMPUTATIONAL CONSIDERATIONS
2.1INTRODUCTIONRoboticmanipulation, by definition, implies that parts and tools wifi be movedaround in space by some sort of mechanism. This naturally leads to a need forrepresenting positions and orientations of parts, of tools, and of the mechanismitself. To define and manipulate mathematical quantities that represent positionand orientation, we must define coordinate systems and develop conventions forrepresentation. Many of the ideas developed here in the context of position andorientation will form a basis for our later consideration of linear and rotationalvelocities, forces, and torques.We adopt the philosophy that somewhere there is a universe coordinate systemto which everything we discuss can be referenced. We wifi describe all positionsand orientations with respect to the universe coordinate system or with respect toother Cartesian coordinate systems that are (or could be) defined relative to theuniverse system.2.2DESCRIPTIONS: POSITIONS, ORIENTATIONS, AND FRAMESAdescription is used to specify attributes of various objects with which a manipula-tion system deals. These objects are parts, tools, and the manipulator itself. In thissection, we discuss the description of positions, of orientations, and of an entity thatcontains both of these descriptions: the frame.
19 
20Chapter 2Spatial descriptions and transformationsDescription of a positionOncea coordinate system is established, we can locate any point in the universe witha 3 x 1 position vector. Because we wifi often define many coordinate systems inaddition to the universe coordinate system, vectors must be tagged with informationidentifying which coordinate system they are defined within. In this book, vectorsare written with a leading superscript indicating the coordinate system to whichthey are referenced (unless it is clear from context)—for example, Ap This meansthat the components of A P have numerical values that indicate distances along theaxes of {A}. Each of these distances along an axis can be thought of as the result ofprojecting the vector onto the corresponding axis.Figure 2.1 pictorially represents a coordinate system, {A}, with three mutuallyorthogonal unit vectors with solid heads. A point A P is represented as a vector andcan equivalently be thought of as a position in space, or simply as an ordered set ofthree numbers. Individual elements of a vector are given the subscripts x, y, and z:r1. (2.1)LJInsummary, we wifi describe the position of a point in space with a position vector.Other 3-tuple descriptions of the position of points, such as spherical or cylindricalcoordinate representations, are discussed in the exercises at the end of the chapter.Descriptionof an orientationOften,we wifi find it necessary not only to represent a point in space but also todescribe the orientation of a body in space. For example, if vector Ap in Fig. 2.2locates the point directly between the fingertips of a manipulator's hand, thecomplete location of the hand is still not specified until its orientation is also given.Assuming that the manipulator has a sufficient number of joints,1 the hand couldbe oriented arbitrarily while keeping the point between the fingertips at the same
(AJZA
FIGURE 2.1: Vector relative to frame (example).
1How many are "sufficient" wifi be discussed in Chapters 3 and 4.
r r11r12r21 r22 r23Lr31r32 r33Section 2.2Descriptions: positions, orientations, and frames 21
{B}
fA}Ap
FIGURE 2.2: Locating an object in position and orientation.
position in space. In order to describe the orientation of a body, we wifi attach acoordinatesystem to the body and then give a description of this coordinate systemrelative to the reference system. In Fig. 2.2, coordinate system (B) hasbeen attachedto the body in a known way. A description of {B} relativeto (A)nowsuffices to givethe orientation of the body.Thus, positions of points are described with vectors and orientations of bodiesare described with an attached coordinate system. One way to describe the body-attached coordinate system, (B), isto write the unit vectors of its three principalaxes2 in terms of the coordinate system {A}.Wedenote the unit vectors giving the principal directions of coordinate system(B}as XB,and ZB.'Whenwritten in terms of coordinate system {A}, theyarecalled AXB,AandAZB. Itwill be convenient if we stack these three unit vectorstogether as the columns of a 3 x 3 matrix, in the order AXB, AyB, AZB. Wewill callthis matrix a rotationmatrix, and,because this particular rotation matrix describes{B}relative to {A},wename it with the notation R(thechoice of leading sub-and superscripts in the definition of rotation matrices wifi become clear in followingsections):= [AkBAfA2]= (2.2)
In summary, a set of three vectors may be used to specify an orientation. Forconvenience, we wifi construct a 3 x 3 matrix that has these three vectors as itscolunms. Hence, whereas the position of a point is represented with a vector, the
isoften convenient to use three, although any two would suffice. (The third can always be recoveredby taking the cross product of the two given.)
22Chapter 2Spatial descriptions and transformationsorientationof a body is represented with a matrix. In Section 2.8, we will considersome other descriptions of orientation that require only three parameters.We can give expressions for the scalars in (2.2) by noting that the componentsof any vector are simply the projections of that vector onto the unit directions of itsreference frame. Hence, each component of in (2.2) can be written as the dotproduct of a pair of unit vectors:rxB•xA YBXA ZB.XA1AfT A2]_H (2.3)LXB.ZA YB.ZA ZB.ZAJFor brevity, we have omitted the leading superscripts in the rightmost matrix of(2.3). In fact, the choice of frame in which to describe the unit vectors is arbitrary aslong as it is the same for each pair being dotted. The dot product of two unit vectorsyields the cosine of the angle between them, so it is clear why the components ofrotation matrices are often referred to as direcfion cosines.Further inspection of (2.3) shows that the rows of the matrix are the unitvectors of {A} expressed in {B}; that is,BItT
AHence,the description of frame {A} relative to {B}, is given by the transpose of(2.3); that is,(2.5)This suggests that the inverse of a rotation matrix is equal to its transpose, a factthat can be easily verified asAItT[AItB AfTB (2.6)A2TBwhere 13 is the 3 x 3 identity matrix. Hence,== (2.7)Indeed, from linear algebra [1], we know that the inverse of a matrix withorthonormal columns is equal to its transpose. We have just shown this geometrically.Descriptionof a frameTheinformation needed to completely specify the whereabouts of the manipulatorhand in Fig. 2.2 is a position and an orientation. The point on the body whoseposition we describe could be chosen arbitrarily, however. For convenience, the
Section 2.2Descriptions: positions, orientations, and frames 23pointwhose position we will describe is chosen as the origin of the body-attachedframe. The situation of a position and an orientation pair arises so often in roboticsthat we define an entity called a frame, which is a set of four vectors giving positionand orientation information. For example, in Fig. 2.2, one vector locates the fingertipposition and three more describe its orientation. Equivalently, the description of aframe can be thought of as a position vector and a rotation matrix. Note that a frameis a coordinate system where, in addition to the orientation, we give a position vectorwhich locates its origin relative to some other embedding frame. For example, frame{B} is described byand Awhere ApBORG is the vector that locates theorigin of the frame {B}:{B} = (2.8)In Fig. 2.3, there are three frames that are shown along with the universe coordinatesystem. Frames {A} and {B} are known relative to the universe coordinate system,and frame {C} is known relative to frame {A}.In Fig. 2.3, we introduce a graphical representation of frames, which is conve-nient in visualizing frames. A frame is depicted by three arrows representing unitvectors defining the principal axes of the frame. An arrow representing a vector isdrawn from one origin to another. This vector represents the position of the originat the head of the arrow in tenns of the frame at the tail of the arrow. The directionof this locating arrow tells us, for example, in Fig. 2.3, that {C} is known relative to{A} and not vice versa.In summary, a frame can be used as a description of one coordinate systemrelative to another. A frame encompasses two ideas by representing both positionand orientation and so may be thought of as a generalization of those two ideas.Positions could be represented by a frame whose rotation-matrix part is the identitymatrix and whose position-vector part locates the point being described. Likewise,an orientation could be represented by a frame whose position-vector part was thezero vector.
id
zu Ycxc
FIGURE 2.3:Example of several frames.
24Chapter 2Spatial descriptions and transformations2.3MAPPINGS: CHANGING DESCRIPTIONS FROM FRAME TO FRAMEIna great many of the problems in robotics, we are concerned with expressing thesame quantity in terms of various reference coordinate systems. The previous sectionintroduced descriptions of positions, orientations, and frames; we now consider themathematics of mapping in order to change descriptions from frame to frame.Mappingsinvolving translated framesInFig. 2.4, we have a position defined by the vector We wish to express thispoint in space in terms of frame {A}, when {A} has the same orientation as {B}. Inthis case, {B} differs from {A} only by a translation, which is given by ApBORG, avector that locates the origin of {B} relative to {A}.Because both vectors are defined relative to frames of the same orientation,we calculate the description of point P relative to {A}, Ap, byvector addition:A _BA—+BORG (2.9)Note that only in the special case of equivalent orientations may we add vectors thatare defined in terms of different frames.In this simple example, we have illustrated mapping a vector from one frameto another. This idea of mapping, or changing the description from one frame toanother, is an extremely important concept. The quantity itself (here, a point inspace) is not changed; only its description is changed. This is illustrated in Fig. 2.4,where the point described by B P is not translated, but remains the same, and insteadwe have computed a new description of the same point, but now with respect tosystem {A}.
FIGURE 2.4:Translational mapping.lAl
XAxB
Section 2.3Mappings: changing descriptions from frame to frame 25Wesay that the vector Adefines this mapping because all the informa-tion needed to perform the change in description is contained in A(alongwith the knowledge that the frames had equivalent orientation).Mappingsinvolving rotated framesSection2.2 introduced the notion of describing an orientation by three unit vectorsdenoting the principal axes of a body-attached coordinate system. For convenience,we stack these three unit vectors together as the columns of a 3 x 3 matrix. We wificall this matrix a rotation matrix, and, if this particular rotation matrix describes {B}relative to {A}, we name it with the notationNote that, by our definition, the columns of a rotation matrix all have unitmagnitude, and, further, that these unit vectors are orthogonal. As we saw earlier, aconsequence of this is that== (2.10)Therefore, because the columns of are the unit vectors of {B} written in {A}, therowsofare the unit vectors of {A} written in {B}.So a rotation matrix can be interpreted as a set of three column vectors or as aset of three row vectors, as follows:Bkr(2.11)B2TAAs in Fig. 2.5, the situation wifi arise often where we know the definition of a vectorwith respect to some frame, {B}, and we would like to know its definition withrespect to another frame, (A}, where the origins of the two frames are coincident.
(B](A]
XA
FIGURE2.5:Rotating the description of a vector.
26Chapter 2Spatial descriptions and transformationsThis computationis possible when a description of the orientation of {B} is knownrelative to {A}. This orientation is given by the rotation matrix whose columnsare the unit vectors of {B} written in {A}.In order to calculate A P, we note that the components of any vector are simplythe projections of that vector onto the unit directions of its frame. The projection iscalculated as the vector dot product. Thus, we see that the components of Ap maybe calculated as=.Bp,
.Bp (2.12)=B2A.BpIn order to express (2.13) in terms of a rotation matrix multiplication, we notefrom (2.11) that the rowsofare BXA ByA and BZA. So (2.13) may be writtencompactly, by using a rotation matrix, asAPARBP (2.13)Equation 2.13 implements a mapping—that is, it changes the description of avector—from Bp which describes a point in space relative to {B}, into Ap, which isa description of the same point, but expressed relative to {A}.We now see that our notation is of great help in keeping track of mappingsand frames of reference. A helpful way of viewing the notation we have introducedis to imagine that leading subscripts cancel the leading superscripts of the followingentity, for example the Bs in (2.13).
EXAMPLE2.1Figure2.6 shows a frame {B} that is rotated relative to frame {A} about Z by30 degrees. Here, Z is pointing out of the page.
FIGURE 2.6: (B} rotated 30 degrees about 2.Bp
(B)(A)
Section 23Mappings: changing descriptions from frame to frame 27Writingthe unit vectors of {B} in terms of {A} and stacking them as the cohmmsof the rotation matrix, we obtainr0.866—0.500 0.000 1=0.5000.866 0.000 .(2.14)Lo.0000.000 1.000]Given [0.0 1Bp=2.0, (2.15)L0.0]we calculateA pas[—1.0001Ap=ARBp=1.732.(2.16)L0.000]Here, R acts as a mapping that is used to describe B P relative to frame {A},Ap Aswas introduced in the case of translations, it is important to remember that,viewed as a mapping, the original vector P is not changed in space. Rather, wecompute a new description of the vector relative to another frame.
Mappings involving general framesVeryoften, we know the description of a vector with respect to some frame {B}, andwe would like to know its description with respect to another frame, {A}. We nowconsider the general case of mapping. Here, the origin of frame {B} is not coincidentwith that of frame {A} but has a general vector offset. The vector that locates {B}'sorigin is called AAlso {B} is rotated with respect to {A}, as described byGiven Bp we wish to compute Apas in Fig. 2.7.
tAlAp
XAYB
FIGURE 2.7:General transform of a vector.
28Chapter 2Spatial descriptions and transformationsWecan first changeBPto its description relative to an intermediate framethat has the same orientation as {A}, but whose origin is coincident with the originof {B}. This is done by premultiplying by as in the last section. We then accountfor the translation between origins by simple vector addition, as before, and obtainAp=Bp+ ApBQRG (2.17)Equation 2.17 describes a general transformation mapping of a vector from itsdescription in one frame to a description in a second frame. Note the followinginterpretation of our notation as exemplified in (2.17): the B's cancel, leaving allquantities as vectors written in terms of A, which may then be added.The form of (2.17) is not as appealing as the conceptual formAP_ATBP (2.18)That is, we would like to think of a mapping from one frame to another as anoperator in matrix form. This aids in writing compact equations and is conceptuallyclearer than (2.17). In order that we may write the mathematics given in (2.17) inthe matrix operator form suggested by (2.18), we define a 4 x 4 matrix operator anduse 4 x 1 position vectors, so that (2.18) has the structure[Ap1[APBQRG1[Bpl (2.19) L1J[0 001]L1jIn other words,1. a "1" is added as the last element of the 4 x 1 vectors;2. a row "[0001]" is added as the last row of the 4 x 4 matrix.We adopt the convention that a position vector is 3 x 1 or 4 x 1, depending onwhether it appears multiplied by a 3 x 3 matrix or by a 4 x 4 matrix. It is readilyseen that (2.19) implementsAp=Bp+ ApBQRQ1 =1. (2.20)The 4 x 4 matrix in (2.19) is called a homogeneous transform. For our purposes,it can be regarded purely as a construction used to cast the rotation and translationof the general transform into a single matrix form. In other fields of study, it can beused to compute perspective and scaling operations (when the last row is other than"[0 0 0 1]" or the rotation matrix is not orthonormal). The interested reader shouldsee [2].Often, we wifi write an equation like (2.18) without any notation indicatingthat it is a homogeneous representation, because it is obvious from context. Notethat, although homogeneous transforms are useful in writing compact equations, acomputer program to transform vectors would generally not use them, because oftime wasted multiplying ones and zeros. Thus, this representation is mainly for ourconvenience when thinking and writing equations down on paper.
Section 2.3Mappings: changing descriptions from frame to frame 29Justas we used rotation matrices to specify an orientation, we will usetransforms (usually in homogeneous representation) to specify a frame. Observethat, although we have introduced homogeneous transforms in the context ofmappings, they also serve as descriptions of frames. The description of frame {B}relative to (A} isEXAMPLE 2.2Figure2.8 shows a frame {B}, which is rotated relative to frame (A} about 2 by30degrees, translated 10 units in XA, and translated 5 units in Find Ap, where Bp =[307000]TThe definition of frame (B) is0.866 —0.500 0.000 10.0A0.5000.866 0.0005.02 21 BT=0.0000.000 1.0000.00001Given [3.0 1Bp=I7.0, (2.22)L0.0]we use the definition of (B }justgiven as a transformation:[9.098112.562 .(2.23)L0.000]Ap=Bp=
Bp
Ap
(A}
ADBORG
XA
FIGURE 2.8:Frame{B}rotated and translated.
30Chapter 2Spatial descriptions and transformations2.4OPERATORS: TRANSLATIONS, ROTATIONS, AND TRANSFORMATIONSThesame mathematical forms used to map points between frames can also beinterpreted as operators that translate points, rotate vectors, or do both. This sectionillustrates this interpretation of the mathematics we have already developed.TranslationaloperatorsAtranslation moves a point in space a finite distance along a given vector direc-tion. With this interpretation of actually translating the point in space, only onecoordinate system need be involved. It turns out that translating the point in spaceis accomplished with the same mathematics as mapping the point to a secondframe. Almost always, it is very important to understand which interpretation ofthe mathematics is being used. The distinction is as simple as this: When a vector ismoved "forward" relative to a frame, we may consider either that the vector moved"forward" or that the frame moved "backward." The mathematics involved in thetwo cases is identical; only our view of the situation is different. Figure 2.9 indicatespictorially how a vector A P1 is translated by a vector A Here,the vector Agivesthe information needed to perform the translation.The result of the operation is a new vector A P2, calculated asAp2 =Ap1+AQTo write this translation operation as a matrix operator, we use the notationAp2=DQ(q)Ap1(2.24)
(2.25)where q is the signed magnitude of the translation along the vector directionTheDQ operator may be thought of as a homogeneous transform of a special
FIGURE 2.9:Translation operator.A)ZAAr,
AQ
Section 2.4Operators: translations, rotations, and transformations 31simpleform: 1 0 0DQ(q) = ,(2.26)000 1whereandare the components of the translation vector Q andq =1/q2++ q2. Equations (2.9) and (2.24) implement the same mathematics. Notethat, if we had defined BpAORG (instead of ApBORG) in Fig. 2.4 and had used it in(2.9), then we would have seen a sign change between (2.9) and (2.24). This signchange would indicate the difference between moving the vector "forward" andmoving the coordinate system "backward." By defining the location of {B} relativeto {A} (withAwe cause the mathematics of the two interpretations to bethe same. Now that the "DQ" notation has been introduced, we may also use it todescribe frames and as a mapping.RotationaloperatorsAnotherinterpretation of a rotation matrix is as a rotational operator that operateson a vectorA P1 and changes that vector to a new vector,A P2, bymeans of a rotation,R. Usually, when a rotation matrix is shown as an operator, no sub- or superscriptsappear, because it is not viewed as relating two frames. That is, we may writeAPRAP (2.27)Again, as in the case of translations, the mathematics described in (2.13) and in(2.27) is the same; only our interpretation is different. This fact also allows us to seehow to obtain rotational matrices that are to be used as operators:The rotation matrix that rotates vectors through some rotation, R, is the same asthe rotation matrix that describes a frame rotated by R relative to the reference frame.Although a rotation matrix is easily viewed as an operator, we will also defineanother notation for a rotational operator that clearly indicates which axis is beingrotated about: Ap2=RK(O)Ap1 (2.28)In this notation, "RK (0)" is a rotational operator that performs a rotation aboutthe axis direction K by 0 degrees. This operator can be written as a homogeneoustransform whose position-vector part is zero. For example, substitution into (2.11)yields the operator that rotates about the Z axis by 0 ascos0 —sinG 0 0=[sinGcos0 (2.29)
Of course, to rotate a position vector, we could just as well use the 3 x 3 rotation-matrix part of the homogeneous transform. The "RK" notation, therefore, may beconsidered to represent a 3 x 3 or a 4 x 4 matrix. Later in this chapter, we will seehow to write the rotation matrix for a rotation about a general axis K.
32Chapter 2Spatial descriptions and transformations
FIGURE 2.10: The vector Ap1rotated30 degrees about 2.
EXAMPLE2.3Figure 2.10 shows a vector AP1. We wish tocompute the vector obtained by rotatingthis vector about 2 by 30 degrees. Call the new vectorTherotation matrix that rotates vectors by 30 degrees about 2 is the same asthe rotation matrix that describes a frame rotated 30 degrees about Z relativeto thereference frame. Thus, the correct rotational operator is[0.866 —0.500 0.000 1=I0.5000.866 0.000I.(2.30)[0.0000.000 1.000]Given[0.0 1Ap1=2.0, (2.31)L0.0]we calculateAp2asr—i.000lAp2=Ap1=1.732 .(2.32)[0.000]
Equations (2.13) and (2.27) implement the same mathematics. Note that, if wehad defined R(insteadof R)in(2.13), then the inverse of Rwouldappear in (2.27).This change would indicate the difference between rotating the vector "forward"versus rotating the coordinate system "backward." By defining the location of {B}relativeto {A}(byR),wecause the mathematics of the two interpretations to bethe same.Ap,p1
IAI
Section 2.4Operators: translations, rotations, and transformations 33Transformation operatorsAswith vectors and rotation matrices, a frame has another interpretation asa transformation operator. In this interpretation, only one coordinate system isinvolved, and so the symbol T is used without sub- or superscripts. The operator Trotates and translates a vector A P1 to computea new vector,AP_TAP (2.33)Again, as in the case of rotations, the mathematics described in (2.18) and in (2.33)is the same, only our interpretation is different. This fact also allows us to see howto obtain homogeneous transforms that are to be used as operators:The transform that rotates by R and translates by Q isthe same as the transformthat describes afraine rotated by Rand translated by Q relativeto the reference frame.A transform is usually thought of as being in the form of a homogeneoustransform with general rotation-matrix and position-vector parts.
EXAMPLE2.4Figure2.11 shows a vector A P1. We wish to rotate it about 2 by30 degrees andtranslate it 10 units in XA and 5 units in FindAp2 where Ap1=[3.07.0 0•01T•The operator T, which performs the translation and rotation, is
0.866—0.500 0.00010.00.500T=0.0000.866 0.0000.000 1.0005.00.00001(2.34)
IAIAp1
AQ
XA
FIGURE 2.11:ThevectorAp1 rotated and translated to form Ap2
34Chapter 2Spatial descriptions and transformationsGiven r3.01Ap1=7.0 (2.35)L0.0]we use T as an operator:r9.0981Ap2=TAp1=12.562 .(2.36)[0.000]Note that this example is numerically exactly the same as Example 2.2, but theinterpretation is quite different.
2.5SUMMARY OF INTERPRETATIONSWehave introduced concepts first for the case of translation only, then for thecase of rotation only, and finally for the general case of rotation about a pointand translation of that point. Having understood the general case of rotation andtranslation, we wifi not need to explicitly consider the two simpler cases since theyare contained within the general framework.As a general tool to represent frames, we have introduced the homogeneoustransform, a 4 x 4 matrix containing orientation and position information.We have introduced three interpretations of this homogeneous transform:1.It is a description of a frame. describes the frame {B} relative to the frame{A}. Specifically, the colunms of are unit vectors defining the directions ofthe principal axes of {B}, and A locates the position of the origin of {B}.2. It is a transform mapping. mapsBp -÷Ap3.Itis a transform operator. T operates on Ap1 to create Ap2From this point on, the terms frame and transform wifi both be used to referto a position vector plus an orientation. Frame is the term favored in speaking of adescription, and transform is used most frequently when function as a mapping oroperator is implied. Note that transformations are generalizations of (and subsume)translations and rotations; we wifi often use the term transform when speaking of apure rotation (or translation).2.6TRANSFORMATION ARITHMETICInthis section, we look at the multiplication of transforms and the inversion oftransforms. These two elementary operations form a functionally complete set oftransform operators.CompoundtransformationsInFig. 2.12, we have Cp and wish to find Ap
Section 2.6Transformation arithmetic 35
FIGURE 2.12:Compoundframes:Each is known relative to the previous one.
Frame {C} is known relative to frame {B}, and frame {B}is known relative toframe (A}. We can transform Cp into Bp as
then we can transformB P into A PasBp=Cp; (2.37)
Ap=BpCombining (2.37) and(2.38),we get the (not unexpected) result(2.38)
Consider a frame {B} that is known with respect to a frame {A}—that is, we knowthe value ofSometimes we will wish to invert this transform, in order to get adescription of {A} relative to {B}—that is, T. A straightforward way of calculatingthe inverse is to compute the inverse of the 4 x 4 homogeneous transform. However,if we do so, we are not taking full advantageof the structure inherent in thetransform. It is easy to find acomputationally simpler method of computing theinverse, one that does take advantage of this structure.zI3Yc
x13
APATBTCP (2.39)fromwhichwe could defineAT_ATBTCBC•Again, note that familiarity with the sub- and superscript notation makes thesemanipulations simple. In terms of the known descriptions of {B} and {C}, we cangive the expression for asAT[ (2.41) C[0001]
Inverting a transform
36Chapter 2Spatial descriptions and transformationsTofindwe mustcomputeand BPAORG fromandAFirst,recall from our discussion of rotation matrices that(2.42)Next, we change the description of A into {B} by using (2.13):BAp_BRApBp243 BORGYABORG+AORGThe left-hand side of (2.43) must be zero, so we haveB—BRAp—ATAp 44 BORG__BRBORG2.Using (2.42) and (2.44), we can write the form of T asrARTARTAP1BT=BBBORG(2.45) ALU001jNotethat, with our notation,BT _AT_iABEquation (2.45) is a general and extremely useful way of computing the inverse of ahomogeneous transform.EXAMPLE 2.5Figure2.13 shows a frame {B} that is rotated relative to frame {A} about Z by 30degrees and translated four units in XA and three units in Thus, we have adescription ofFindThe frame defining {B} is0.866—0.5000.0004.0ABT0.5000.00000.8660.00000.0001.00003.00.01(2.46)
{Bj
(A}XB
xA
FIGURE 2.13: {B} relative to {A}.
Using (2.45), we computeSection 2.7Transform equations37
0.866 0.500 0.000B—0.500 0.866 0.000AT=0.0000.000 1.000000
Figure 2.14 indicates a situation in which a frame {D} can be expressed as productsof transformations in two different ways. First,
second;UT —UTAT.DAD
UT —UTBT CTDBCD(2.48)
(2.49)We can set these two descriptions of equal to construct a transformUTAT —UTBT CTADBCD
FIGURE 2.14:Setof transformsformingaloop.(2.50)—4.964—0.5980.01
2.7 TRANSFORM EQUATIONS(2.47)
equation:
(A}(D}
38Chapter 2Spatial descriptions and transformationsTransformequations can be used to solve for transforms in the case of n unknowntransforms and n transform equations. Consider (2.50) in the case that all transformsare known exceptHere, we have one transform equation and one unknowntransform; hence, we easily find its solution to beBT —UT_iUT AT CT—iCBADD (2.51)Figure 2.15 indicates a similar situation.Note that, in all figures, we have introduced a graphical representation offrames as an arrow pointing from one origin to another origin. The arrow's directionindicates which way the frames are defined: In Fig. 2.14, frame {D} is defined relativeto [A}; in Fig. 2.15, frame {A} is defined relative to {D}. In order to compound frameswhen the arrows line up, we simply compute the product of the transforms. If anarrow points the opposite way in a chain of transforms, we simply compute itsinverse first. In Fig. 2.15, two possible descriptions of {C} are
andUT —UTDT-i DCAAC
FIGURE 2.15:Example of a transform equation.(2.52)
(2.53) UT —UTBCBC
(AJ(DJ
LU)
(B }Section 2.8More on representation of orientation 39(TJ
Again, we might equate (2.52) and (2.53) to solve for, say,
EXAMPLE 2.6= (2.54)
Assume that we know the transform T in Fig. 2.16, which describes the frame atthe manipulator's fingertips {T} relative to the base of the manipulator, {B}, thatwe know where the tabletop is located in space relative to the manipulator's base(because we have a description of the frame {S} that is attached to the table asshown,T), and that we know the location of the frame attached to the bolt lyingon the table relative to the table frame—that is, Calculate the position andorientation of the bolt relative to the manipulator's hand, T.Guided by our notation (and, it is hoped, our understanding), we compute thebolt frame relative to the hand frame asTT—BT-_lBT STGTS
2.8 MORE ON REPRESENTATION OF ORIENTATION(2.55)
So far, our only means of representing an orientation is by giving a 3 x 3 rotationmatrix. As shown, rotation matrices are special in that all columns are mutuallyorthogonal and have unit magnitude. Further, we wifi see that the determinant of aFIGURE 2.16:Manipulator reaching for a bolt.
40Chapter 2Spatial descriptions and transformationsrotation matrix is always equal to +1. Rotation matrices may also be called properorthonormal matrices, where"proper" refers to the fact that the determinant is +1(nonproper orthonormal matrices have the determinant —1).It is natural to ask whether it is possible to describe an orientation with fewerthan nine numbers. A result from linear algebra (known as Cayley's formula fororthonormal matrices [3])states that, for any proper orthonormal matrix R, thereexists a skew-symmetric matrix S such that
R=(13—+ 5), (2.56)where13 is a 3 x 3 unit matrix. Now a skew-symmetric matrix (i.e., S = _ST) ofdimension 3 is specified by three parameters (si, as
0sy 1S =0.(2.57)0JTherefore, an immediate consequence of formula (2.56) isthat any 3 x 3 rotationmatrix can be specified by just three parameters.Clearly, the nine elements of a rotation matrix are not all independent. In fact,given a rotation matrix, R,itis easy to write down the six dependencies between theelements. Imagine Rasthree columns, as originally introduced:
R={X2]. (2.58)Aswe know from Section 2.2, these three vectors are the unit axes of some framewritten in terms of the reference frame. Each is a unit vector, and all three must bemutually perpendicular, so we see that there are six constraints on the nine matrixelements:
iic' 1= 1,(2.59)
.2=0.Itis natural then to ask whether representations of orientation can be devised suchthat the representation is conveniently specifiedwith three parameters. This sectionwill present several such representations.Whereas translations along three mutually perpendicular axes are quite easyto visualize, rotations seem less intuitive. Unfortunately, people have a hard timedescribing and specifying orientations in three-dimensional space. One difficulty isthat rotations don't generally commute. That is, isnot•the same as
Section 2.8More on representation of orientation 41EXAMPLE 2.7Considertwo rotations, one about 2by30 degrees and one about by 30 degTees:r0.866—0.500 0.000 1=0.5000.866 0.000I(2.60) [0.0000.000 1.000]r1.0000.0000.000 1=I0.0000.866 —0.500 (2.61)L0.0000.5000.866]r0.87—0.430.25=0.500.75 —0.43[0.000.500.87r0.87—0.500.00 1=0.430.75 —0.50I(2.62)L0.250.430.87]The fact that the order of rotations is important should not be surprising; further-more, it is captured in the fact that we use matrices to represent rotations, becausemultiplication of matrices is not commutative in general.
Because rotations can be thought of either as operators or as descriptions oforientation, it is not surprising that different representations are favored for eachof these uses. Rotation matrices are useful as operators. Their matrix form is suchthat, when multiplied by a vector, they perform the rotation operation. However,rotation matrices are somewhat unwieldy when used to specify an orientation. Ahuman operator at a computer terminal who wishes to type in the specificationof the desired orientation of a robot's hand would have a hard time inputting anine-element matrix with orthonormal colunms. A representation that requires onlythree numbers would be simpler. The following sections introduce several suchrepresentations.
X—Y—Zfixed anglesOnemethod of describing the orientation of a frame (B} is as follows:Start with the frame coincident with a known reference frame {A}.Rotate {B} first about XA by an angle y, then about by an angleand,finally, about 2A by an angle a.Each of the three rotations takes place about an axis in the fixed referenceframe {A}. We will call this convention for specifying an orientation X—Y—Z fixedangles. The word "fixed" refers to the fact that the rotations are specified aboutthe fixed (i.e., nonmoving) reference frame (Fig. 2.17). Sometimes this conventionis referred to as roll, pitch, yaw angles, but care must be used, as this name is oftengiven to other related but different conventions.
42Chapter 2Spatial descriptions and transformations
ZA
FIGURE2.17:X—Y—Z fixed angles. Rotations are performed in the orderRz(a).
The derivation of the equivalent rotation matrix, (y, fi,a),is straight-forward, because all rotations occur about axes of the reference frame; that is,a)=°°i=saca00100 cy —sy ,(2.63)L001] [—sfi 0 c,8j[0sycy ]whereca is shorthand for cos a, sa for sin a, and so on. It is extremely important tounderstand the order of rotations used in (2.63). Thinking in terms of rotations asoperators, we have applied the rotations (from the right) of (y), then(p),andthenMultiplying (2.63) out, we obtainrcac,8cas,8sy—sacy casficy+sasyla)=sac,8+ cacy—casy.(2.64)[—s,8c,Bsyc18cy]Keepin mind that the definition given here specifies the order of the three rotations.Equation (2.64) is correct only for rotations performed in the order: about XA by y,aboutby $,aboutZA by a.The inverse problem, that of extracting equivalent X—Y—Z fixed angles froma rotation matrix, is often of interest. The solution depends on solving a set oftranscendental equations: there are nine equations and three unknowns if (2.64) isequated to a given rotation matrix. Among the nine equations are six dependencies,so, essentially, we have three equations and three unknowns. Letrr11r12 r13 1a)=r21ifl (2.65)Lr32r33 ]From(2.64), we see that, by taking the square root of the sum of the squaresofandwe can compute cosThen,we can solve forwith the arc tangentZB
YB
XI'A
XBXB
Section 2.8More on representation of orientation 43ofoverthe computed cosine. Then, as long as cfi 0, we can solve for a bytaking the arc tangent of r21/c,8 over r11/c13 and we can solve for y by taking the arctangent of r32/c,8overInsummary,=+a =r11/c,8), (2.66)y =where Atan2(y, x) is a two-argument arc tangent function.3Although a second solution exists, by using the positive square root in theformula forwe always compute the single solution for which —90.0° < 90.00.Thisis usually a good practice, because we can then define one-to-one mappingfunctions between various representations of orientation. However, in some cases,calculating all solutions is important (more on this in Chapter 4). If =±90.0°(so that=0),the solution of (2.67) degenerates. In those cases, only the sum orthe difference of a and y can be computed. One possible convention is to choosea =0.0in these cases, which has the results given next.If=90.0°,then a solution can be calculated to be=90.0°,a =0.0, (2.67)=r22).If=—90.0°,then a solution can be calculated to be=—90.0°,a =0.0, (2.68)y =—Atan2(r12,r92).
Z—Y--XEuler anglesAnotherpossible description of a frame (B] is as follows:Start with the frame coincident with a known frame {A}. Rotate {B} firstabout ZB by an angle a, then about byan angleand,finally, aboutXB by an angle y.In this representation, each rotation is performed about an axis of the movingsystem (B] rather than one of the fixed reference {A}. Such sets of three rotations3Atan2(y, x) computes tan1 but uses the signsofboth x and y to identify the quadrant in whichthe resulting angle lies. For example, Atan 2(—2.0, —2.0) = —135°,whereas Atan 2(2.0, 2.0) =45°,adistinction which would be lost with a single-argument arc tangent function. We are frequently computingangles that can range over a full 360°, so we will make use of the Atan2 function regularly. Note thatAtan2 becomes undefflied when both arguments are zero. It is sometimes called a "4-quadrant arctangent," and some programming-language libraries have it predeSned.
44Chapter 2Spatial descriptions and transformations
arecalled Eulerangles. Notethat each rotation takes place about an axis whoselocation depends upon the preceding rotations. Because the three rotations occurabout the axes Z, Y, and X, we wifi call this representation Z—Y—X Euler angles.Figure 2.18 shows the axes of {B} after each Euler-angle rotation is applied.Rotationabout Z causes X to rotate into X', Y to rotate into Y', and so on. Anadditional "prime" gets added to each axis with each rotation. A rotation matrixwhich is parameterized by Z—Y—X Euler angles wifi be indicated by the notationy).Note that we have added "primes" to the subscripts to indicatethat this rotation is described by Euler angles.With reference to Fig. 2.18, we can use the intermediate frames {B'} and {B"}in order to give an expression for y).Thinking of the rotations asdescriptions of these frames, we can immediately writeAp_AQB'QB"RBB'B"B'whereeach of the relative descriptions on the right-hand side of (2.69) is given bythe statement of the Z—Y--X-Euler-angle convention. Namely, the final orientationof {B} is given relative to {A} as=00010000 cy]whereca =cosa,sa =sina,and so on. Multiplying out, we obtain[cac,8—sacy+ sasy 1$,y)=sac,8sas,Bsy + cacy —casy.(2.71)L c,6cyJNotethat the result is exactly the same as that obtained for the same three rotationstaken in the opposite order about fixed axes! This somewhat nonintuitive result holdsZAZRZR
XE
FIGURE 2.18:Z—Y—X Euler angles.
Section 2.8More on representation of orientation 45ingeneral: three rotations taken about fixed axes yield the same final orientationas the same three rotations taken in opposite order about the axes of the movingframe.Because (2.71) is equivalent to (2.64), there is no need to repeat the solutionfor extracting Z—Y—X Euler angles from a rotation matrix. That is, (2.66) can alsobe used to solve for Z—Y—X Euler angles that correspond to a given rotation matrix.
Z—Y—ZEuler anglesAnotherpossible description of a frame {B} isStart with the frame coincident with a known frame {A}. Rotate {B} firstabout ZB by an angle a, then about byan angleand,finally, aboutZb by an angle y.Rotations are described relative to the frame we are moving, namely, {B}, sothis is an Euler-angle description. Because the three rotations occur about the axesZ, Y, and Z, we will call this representation Z—Y—Z Euler angles.Following the development exactly as in the last section, we arrive at theequivalent rotation matrix
Tcac,8cy—sasy—sacycask 1fi,y)=+ casy —sac,Bsy + cacy sas,8 J.(2.72)[—s,Bcy cfi]Thesolution for extracting Z—Y--Z Euler angles from a rotation matrix isstated next.Givenr17AD (—L r31r33then,if sin0, it follows that=+'33),a=Atan2(r23/sfl,r13/s$), (2.74)y=Atan2(r32/s$,Although a second solution exists (which we find by using the positive square root inthe formula forwealways compute the single solution for which 0.0 < < 180.00.If=0.0or 180.0°, the solution of (2.74) degenerates. In those cases, only the sumor the difference of a and y may be computed. One possible convention is to choosea =0.0in these cases, which has the results given next.If=0.0,then a solution can be calculated to be=0.0,a =0.0, (2.75)y=Atan2(—r12,r11).
46Chapter 2Spatial descriptions and transformationsIf= 180.0°, thena solution can be calculated to be=180.0°,a = 0.0, (2.76)y=Atan2(r12,Otherangle-set conventionsIn the preceding subsections we have seen three conventions for specifying orienta-tion: X—Y—Z fixed angles, Z—Y—X Euler angles, and Z—Y—Z Euler angles. Eachof these conventions requires performing three rotations about principal axes in acertain order. These conventions are examples of a set of 24 conventions that wewill call angle-set conventions. Of these, 12 conventions are for fixed-angle sets,and 12 are for Euler-angle sets. Note that, because of the duality of fixed-anglesets with Euler-angle sets, there are really only 12 unique parameterizations of arotation matrix by using successive rotations about principal axes. There is oftenno particular reason to favor one convention over another, but various authorsadopt different ones, so it is useful to list the equivalent rotation matrices for all 24conventions. Appendix B (in the back of the book) gives the equivalent rotationmatrices for all 24 conventions.Equivalentangle—axis representationWiththe notation Rx (30.0) we give the description of an orientation by giving anaxis, X, and an angle, 30.0 degrees. This is an example of an equivalent angle—axisrepresentation. If the axis is a general direction (rather than one of the unit directions)any orientation may be obtained through proper axis and angle selection. Considerthe following description of a frame {B}:Start with the frame coincident with a known frame {A}; then rotate {B}about the vector AK by an angle 9 according to the right-hand rule.Vector K is sometimes called the equivalent axis of a finite rotation. A generalorientation of {B} relative to {A} may be written as 9) or RK(O) and wifibe called the equivalent angle—axis representation.4 The specification of the vectorAK requires only two parameters, because its length is always taken to be one. Theangle specifies a third parameter. Often, we wifi multiply the unit direction, K, withthe amount of rotation, 9, to form a compact 3 x 1 vector description of orientation,denoted by K (no "hat"). See Fig. 2.19.When the axis of rotation is chosen from among the principal axes of {A}, thenthe equivalent rotation matrix takes on the familiar form of planar rotations:[110Rx(8)=0cos9 —sin9 ,(2.77)L0sin9cos9 ]
4Thatsuch a k and 0 exist for any orientation of (B} relative to was shown originally by Eulerand is known as Euler's theorem on rotation [3].
(A)Section 2.8More on representation of orientation 47
ZAAk
Yu
XB(B)
XA
FIGU RE 2.19:Equivalent angle— axis representation.r0sinol=010,(2.78)0coso][cos9—sibRz(9) =sin0cos90.(2.79)[001]Ifthe axis of rotation is a general axis, it can be shown (as in Exercise 2.6) that theequivalent rotation matrix isrRK(O)= I ,(2.80)]where c9 =cos9,sO =sin9,vO =1—cos0, and=The sign of 9 isdetermined by the right-hand rule, with the thumb pointing along the positive senseofEquation (2.80)convertsfrom angle—axis representation to rotation-matrixrepresentation. Note that, given any axis of rotation and any angular amount, we can easily construct an equivalent rotation matrix.The inverse problem, namely, that of computing K and 0 from a given rotationmatrix, is mostly left for the exercises (Exercises 2.6 and 2.7), but a partial result isgiven here [3]. Ifr1RK (9)=r21r23,(2.81)Lr32 r33 Jthen0 =Acos(ru + r22± r331)
48Chapter 2Spatial descriptions and transformationsand
1K=2sinGr13—.(2.82)Lr21 —JThissolution always computes a value of 0 between 0 and 180 degrees. For anyaxis—angle pair (AK, 0), there is another pair, namely, (_AK, —0), which results inthe same orientation in space, with the same rotation matrix describing it. Therefore,in converting from a rotation-matrix into an angle—axis representation, we are facedwith choosing between solutions. A more serious problem is that, for small angularrotations, the axis becomes ill-defined. Clearly, if the amount of rotation goes tozero, the axis of rotation becomes completely undefined. The solution given by(2.82) fails if 0 =00or 0 =180°.
EXAMPLE2.8Aframe {B)is described as initially coincident with {A}. We then rotate {B} aboutthe vector A K =[0.70707070 0]T (passing through the origin) by an amount 0 = 30degrees. Give the frame description of {B}.Substituting into (2.80) yields the rotation-matrix part of the frame description.There was no translation of the origin, so the position vector is [0, 0, Hence,0.933 0.0670.354 0.0A0.067 0.933 —0.354 0.0 2 83 BT=—0.3540.3540.866 0.00.00.00.01.0
Up to this point, all rotations we have discussed have been about axes that passthrough the origin of the reference system. If we encounter a problem for whichthis is not true, we can reduce the problem to the "axis through the origin" case bydefining additional frames whose origins lie on the axis and then solving a transformequation.
EXAMPLE2.9Aframe {B} is described as initially coincident with {A). We then rotate {B} aboutthe vector AK =[0.7070.707 001T (passing through the point Ap=[1.02.0 3.0])by an amount 0 =30degrees. Give the frame description of {B}.Before the rotation, (A} and {B} are coincident. As is shown in Fig. 2.20, wedefine two new frames, {A'} and {B'}, which are coincident with each other and havethe same orientation as {A} and {B} respectively, but are translated relative to {A}by an offset that places their origins on the axis of rotation. We wifi choose1.0 0.0 0.0 1.0A0.0 1.0 0.0 2.0 2 84 AlT=0.00.0 1.0 3.00.0 0.0 0.0 1.0
Section 2.8More on representation of orientation 49K
FIGURE2.20: Rotation about an axis that does not pass through the origin of {A}.Initially, {B}wascoincident with {A}.
Similarly,the description of {B}interms of {B'}is1.0 0.0 0.0 —1.0B'0.01.0 0.0 —2.0 2 85 BT=0.0 0.0 1.0 —3.00.0 0.0 0.01.0Now, keeping other relationships fixed, we can rotate {B'} relativeto {A'}.Thisis arotation about an axis that passes through the origin, so we can use (2.80) to compute{B'}relativeto {A'}.Substitutinginto (2.80) yields the rotation-matrix part of theframe description. There was no translation of the origin, so the position vector is[0, 0, OjT.Thus,we have0.933 0.0670.354 0.00.067 0.933 —0.354 0.0 2 86 —0.354 0.3540.866 0.00.00.00.01.0Finally, we can write a transform equation to compute the desired frame,= (2.87)which evaluates to0.933 0.0670.354 —1.13A0.0670.933 —0.3541.132 88 BT=—0.354 0.3540.8660.050.000 0.0000.0001.00Arotationabout an axis that does not pass through the origin causes a change inposition, plus the same final orientation as if the axis had passed through the origin.(B')
Ap
(A)(B)
50Chapter 2Spatial descriptions and transformationsNotethat we could have used any definition of {A'} and {B'} such that their originswere on the axis of rotation. Our particular choice of orientation was arbitrary, andour choice of the position of the origin was one of an infinity of possible choiceslying along the axis of rotation. (See also Exercise 2.14.)
EulerparametersAnotherrepresentation of orientation is by means of four numbers called the Eulerparameters. Although complete discussion is beyond the scope of the book, we statethe convention here for reference.In terms of the equivalent axis K = and the equivalent angle 8, theEuler parameters are given by8€1=icy sin-, (2.89)
€3 =sin
8€4 =cosIt is then clear that these four quantities are not independent:+++=1(2.90)must always hold. Hence, an orientation might be visualized as a point on a unithypersphere in four-dimensional space.Sometimes, the Euler parameters are viewed as a 3 x 1 vector plus a scalar.However, as a 4 x 1 vector, the Euler parameters are known as a unit quaternion.The rotation matrixthat is equivalent to a set of Euler parameters is
1—2(ElE7 —E3E4)2(E1e3 + E7E4)RE =2(E1E2+ E3E4)1——2(e2E3 —(2.91)2(E1e3 —E2E4)2(E263 + E1E4)1 ——Given a rotation matrix, the equivalent Euler parameters are
—r32—r23El-tE4
€2=r13— (2.92)4E4—r21—r12€3 —4E4€4 =+ r11 + r22 + r33.
Section 2.9Transformation of free vectors 51Notethat (2.92) is not useful in a computational sense ifthe rotation matrixrepresents a rotation of 180 degrees about some axis, because c4 goes to zero.However, it can be shown that, in the limit, all the expressions in (2.92) remain finiteeven for this case. In fact, from the definitions in (2.88), it is clear that all e, remainin the interval [—1, 1].Taughtand predefined orientationsInmany robot systems, it wifi be possible to "teach" positions and orientationsby using the robot itself. The manipulator is moved to a desired location, and thisposition is recorded. A frame taught in this manner need not necessarily be one towhich the robot wifi be commanded to return; it could be a part location or a fixturelocation. In other words, the robot is used as a measuring tool having six degreesof freedom. Teaching an orientation like this completely obviates the need for thehuman programmer to deal with orientation representation at all. In the computer,the taught point is stored as a rotation matrix (or however), but the user never hasto see or understand it. Robot systems that allow teaching of frames by using therobot are thus highly recommended.Besides teaching frames, some systems have a set of predefined orientations,such as "pointing down" or "pointing left." These specifications are very easyfor humans to deal with. However, if this were the only means of describing andspecifying orientation, the system would be very limited.2.9 TRANSFORMATION OF FREE VECTORSWe have been concerned mostly with position vectors in this chapter. In laterchapters, we wifi discuss velocity and force vectors as well. These vectors willtransform differently because they are a different type of vector.In mechanics, one makes a distinction between the equality and the equivalenceof vectors. Two vectors are equal if they have the same dimensions, magnitude, anddirection. Two vectors that are considered equal could have different lines ofaction—for example, the three equal vectors in Fig 2.21. These velocity vectorshave the same dimensions, magnitude, and direction and so are equal according toour definition.Two vectors are equivalent in a certain capacity if each produces the very sameeffect in this capacity. Thus, if the criterion in Fig. 2.21 is distance traveled, all threevectors give the same result and are thus equivalent in this capacity. If the criterion isheight above the xy plane, then the vectors are not equivalent despite their equality.Thus, relationships between vectors and notions of equivalence depend entirely onthe situation at hand. Furthermore, vectors that are not equal might cause equivalenteffects in certain cases.We wifi define two basic classes of vector quantities that might be helpful.The term linevectorrefers to a vector that is dependent on its line of action,along with direction and magnitude, for causing its effects. Often, the effects of aforce vector depend upon its line of action (or point of application), so it would thenbe considered a line vector.A free vector refers to a vector that may be positioned anywhere in space with-out loss or change of meaning, provided that magnitude and direction are preserved.
52Chapter 2Spatial descriptions and transformations
z/xV3
FIG URE 2.21:Equalvelocityvectors.For example, a pure moment vector is always a free vector. If we have amoment vector BN that is known in terms of {B}, then we calculate the samemoment in terms of frame {A} asAN_ARBN (2.93)In other words, all that counts is the magnitude and direction (in the case of a freevector), so only the rotation matrix relating the two systems is used in transforming.The relative locations of the origins do not enter into the calculation.Likewise, a velocity vector written in {B}, Bv, iswritten in {A} asAV=BV (2.94)The velocity of a point is a free vector, so all that is important is its direction andmagnitude. The operation of rotation (as in (2.94)) does not affect the magnitude,yet accomplishes the rotation that changes the description of the vector from {B}to {A). Note thatAwhich would appear in a position-vector transformation,does not appear in a velocity transform. For example, in Fig. 2.22, if B v= 5X,thenAV=Velocity vectors and force and moment vectors wifi be introduced more fullyin Chapter 5.2.10COMPUTATIONAL CONSIDERATIONSTheavailability of inexpensive computing power is largely responsible for thegrowth of the robotics industry; yet, for some time to come, efficient computationwill remain an important issue in the design of a manipulation system.The homogeneous representation is useful as a conceptual entity, but trans-formation software typically used in industrial manipulation systems does not makeuse of it directly, because the time spent multiplying by zeros and ones is wasteful.V2V1
y
Section 2.10Computational considerations 53
FIGURE 2.22:Transforming velocities.
Usually, the computations shown in (2.41) and(2.45) are performed, rather than thedirect multiplication or inversion of 4 x 4 matrices.The order in which transformations are applied can make a large differencein the amount of computation required to compute the same quantity. Considerperforming multiple rotations of a vector, as inAPARBRCRDP (2.95)One choice is to first multiply the three rotation matrices together, to form in the expressionAp=
Rfrom its three constituents requires 54 multiplications and 36 additions.Performing the final matrix-vector multiplication of (2.96) requires an additional9 multiplications and 6 additions, bringing the totals to 63 multiplications and 42additions.If, instead, we transform the vector through the matrices one at a time, that is,Ap—ARBR CR DpBCDAPARBRCP (2.97)Ap=BpAp =Ap
then the total computation requires only 27 multiplications and 18 additions, fewerthan half the computations required by the other method.Of course, in some cases, the relationships andare constant, whilethere are many Dp. that need to be transformed into Ap. Insuch a case, it is more efficient to calculateonce, and then use it for all future mappings. See alsoExercise 2.16.(BYBV
ZB
54Chapter 2Spatial descriptions and transformations
EXAMPLE 2.10Givea method of computing the product of two rotation matrices, R R, that usesfewer than 27 multiplications and 18 additions.Where L. are the columns of and C, are the three columns of the result,computeC1 =(2.98)=C'1xwhich requires 24 multiplications and 15 additions.
BIBLIOGRAPHY[1]B. Noble, Applied Linear Algebra, Prentice-Hall, Englewood Cliffs, NJ, 1969.[2] D. Ballard and C. Brown, Computer Vision, Prentice-Hall, Englewood Cliffs, NJ, 1982.[3] 0. Bottema and B. Roth, Theoretical Kinematics, North Holland, Amsterdam, 1979.[4] R.P. Paul, Robot Manipulators, MIT Press, Cambridge, MA, 1981.[5]I. Shames, Engineering Mechanics, 2nd edition, Prentice-Hall, Englewood Cliffs, NJ,1967.[6] Symon, Mechanics, 3rd edition, Addison-Wesley, Reading, IvIA, 1971.[71 B. Gorla and M. Renaud, Robots Manipulateurs, Cepadues-Editions, Toulouse, 1984.
EXERCISES2.1[15] A vector Ap is rotated about ZA by 9 degrees and is subsequently rotatedabout XA bydegrees. Give the rotation matrix that accomplishes these rotationsin the given order.2.2 [15] A vector Ap is rotated about by 30 degrees and is subsequently rotatedabout XA by 45 degrees. Give the rotation matrix that accomplishes these rotationsin the given order.2.3 [16] A frame {B} is located initially coincident with a frame {A}. We rotate {B}about ZB by 9 degrees, and then we rotate the resulting frame about XB by 0degrees.Give the rotation matrix that will change the descriptions of vectors fromBp to Ap2.4 [16] A frame {B} is located initially coincident with a frame {A}. We rotate {B}about ZB by 30 degrees, and then we rotate the resulting frame about XB by 45degrees. Give the rotation matrix that will change the description of vectors fromB p to A p.2.5 [13]R is a 3 x 3 matrix with eigenvalues 1, and e_W, where i =Whatis the physical meaning of the eigenvector of R associated with the eigenvalue 1?2.6 [21] Derive equation (2.80).2.7 [24] Describe (or program) an algorithm that extracts the equivalent angle andaxis of a rotation matrix. Equation (2.82) is a good start, but make sure that youralgorithm handles the special cases 8 = 0°and 9 =180°.
Exercises552.8[29] Write a subroutine that changes representation of orientation from rotation-matrix form to equivalent angle—axis form. A Pascal-style procedure declarationwould beginProcedure RNTOAA (VARR:mat33;VAR K:vec3; VARtheta:real);Write another subroutine that changes from equivalent angle—axis representationto rotation-matrix representation:Procedure AATORN(VAR K:vec3; VAR theta:real: VAR R:nat33);Write the routines in C if you prefer.Run these procedures on several cases of test data back-to-back and verify thatyou get back what you put in. Include some of the difficult cases!2.9 [27] Do Exercise 2.8 for roll, pitch, yaw angles about fixed axes.2.10 [27] Do Exercise 2.8 for Z—Y—Z Euler angles.2.11 [10] Under what condition do two rotation matrices representing finite rotationscommute? A proof is not required.2.12 [14] A velocity vector is given byr10.0Bv1200L30.0Given 0.866 —0.500 0.00011.0A0.5000.866 0.000 —3.0BT=0.0000.000 1.0009.00001compute A2.13 [21] The following frame definitions are given as known:r0.866—0.500 0.00011.0u I0.5000.866 0.000 —1.0AT=I0.0000.000 1.0008.0Lo0011.000 0.0000.0000.0B0.000 0.866 —0.50010.0 AT=0.0000.5000.866 —20.00001r0.866—0.5000.000 —3.0c I0.4330.750 —0.500 —3.0=I0.2500.4330.8663.0Lo001Draw a frame diagram (like that of Fig. 2.15) to show their arrangement qualita-tively, and solve for2.14 [31] Develop a general formula to obtain T, where, starting from initial coinci-dence, {B} is rotated byaboutwherepasses through the pointAp (notthrough the origin of {A} in general).2.15 [34] {A} and {B)areframes differing only in orientation. {B} isattained asfollows: starting coincident with {A}, (B] is rotated by radians about unit vectorK—that is,=
56Chapter 2Spatial descriptions and transformationsShowthatAR —B—where[0kyK=Ik,002.16[22]A vector must be mapped through three rotation matrices:Ap=Dp
One choice is to first multiply the three rotation matrices together, to form inthe expression Ap=DpAnother choice is to transform the vector through the matrices one at a time—thatis,Ap=DpAPARBRCPAp=Bp,ApApD P is changing at 100 Hz, we would have to recalculate A P at the same rate.However, the three rotation matrices are also changing, as reported by a visionsystem that gives us new values for R,R, andat 30 Hz. What is the best wayto organize the computation to minimize the calculation effort (multiplicationsand additions)?2.17 [16] Another familiar set of three coordinates that can be used to describe a pointin space is cylindrical coordinates. The three coordinates are defined as illustratedin Fig. 2.23. The coordinate 0 gives a direction in the xy plane along which totranslate radially by an amount r. Finally, z is given to specify the height abovethe xy plane. Compute the Cartesian coordinates of the point A P in terms of thecylindrical coordinates 9, r, and z.2.18[18]Another set of three coordinates that can be used to describe a point inspace is spherical coordinates. The three coordinates are defined as illustratedin Fig. 2.24. The angles a and can be thought of as describing azimuth andelevation of a ray projecting into space. The third coordinate, r, is the radialdistance along that ray to the point being described. Calculate the Cartesiancoordinates of the point A p in terms of the spherical coordinates a, andr.2.19 [24] An object is rotated about its X axis by an amount andthen it is rotatedabout its newaxis by an amount i/i.Fromour study of Euler angles, we knowthat the resulting orientation is given by
whereas, if the two rotations had occurred about axes of the fixed reference frame,the result would have been
//
FIG URE2.23:Cylindrical coordinates.
FIGURE 2.24: Sphericalcoordinates.
It appears that the order of multiplication depends upon whether rotations aredescribed relative to fixed axes or those of the frame being moved. It is moreappropriate, however, to realize that, in the case of specifying a rotation aboutan axis of the frame being moved, we are specifying a rotation in the fixed systemgiven by (for this example)
This similarity transform[1],multiplying the original onthe left, reduces tothe resulting expression in which it looks as if the order of matrix multiplicationhas been reversed. Taldng this viewpoint, give a derivation for the form of the(AJExercises57
z
XA
Ap
58Chapter 2Spatial descriptions and transformationsrotationmatrix that is equivalent to the Z—Y—Z Euler-angle set (ci, $, y).(Theresult is given by (2.72).)2.20 [2011 Imagine rotating a vector Q abouta vector K by an amount 6 to form a newvector, Q'—that is,Q'=Use (2.80) to derive Rodriques's formula,Q'= Qcos6+ sin0(1 x Q)+(1— C058)(le.2.21 [15] For rotations sufficiently small that the approximations sin 8 = 6,cos 6 =1,and 62 =0hold, derive the rotation-matrix equivalent to a rotation of 8 about ageneral axis,Start with (2.80) for your derivation.2.22 [20] Using the result from Exercise 2.21, show that two infinitesimal rotationscommute (i.e., the order in which the rotations are performed is not important).2.23 [25] Give an algorithm to construct the definition of a frame T from three pointsUp1 Up2 and Up3 where the following is known about these points:1 Up1 js at the origin of {A};2. Up2 lies somewhere on the positive X axis of {A};3• Up3 lies near the positive axis in the XY plane of {A).2.24 [45] Prove Cayley's formula for proper orthonormal matrices.2.25 [30] Show that the eigenvalues of a rotation matrix are 1, andwhere=2.26[33] Prove that any Euler-angle set is sufficient to express all possible rotationmatrices.2.27 [15] Referring to Fig. 2.25, give the value2.28 [15] Referring to Fig. 2.25, give the value2.29 [15] Referring to Fig. 2.25, give the value of T.2.30 [15] Referring to Fig. 2.25, give the value of T.2.31 [15] Referring to Fig. 2.26, give the value of T.
FIGURE 2.25: Frames at the corners of a wedge.________
3
Programming exercise (Part 2) 59
I
FIGURE 2.26: Framesat the corners of a wedge.
2.32[15] Referringto Fig. 2.26, give the value2.33 [15] Referring to Fig. 2.26, give the value of T.2.34 [15] Referring to Fig. 2.26, give the value of2.35 [20] Prove that the determinant of any rotation matrix is always equal to 1.2.36 [36] A rigid body moving in a plane (i.e., in 2-space) has three degrees of freedom.A rigid body moving in 3-space has six degrees of freedom. Show that a body inN-space has(N2 + N) degrees of freedom.2.37 [15] Given0.250.430.865.0A0.87 —0.500.00 —4.0BT—0.430.75 —0.503.00001what is the (2,4) element of T?2.38 [25] Imagine two unit vectors, v1 and v2, embedded in a rigid body. Note that, nomatter how the body is rotated, the geometric angle between these two vectors ispreserved (i.e., rigid-body rotation is an "angle-preserving" operation). Use thisfact to give a concise (four- or five-line) proof that the inverse of a rotation matrixmust equal its transpose and that a rotation matrix is orthonormal.2.39 [37] Give an algorithm (perhaps in the form of a C program) that computes theunit quaternion corresponding to a given rotation matrix. Use (2.91) as startingpoint.2.40 [33] Give an algorithm (perhaps in the form of a C program) that computes theZ—X—Z Euler angles corresponding to a given rotation matrix. See Appendix B.2.41 [33] Give an algorithm (perhaps in the form of a C program) that computes theX—Y—X fixed angles corresponding to a given rotation matrix. See Appendix B.PROGRAMMINGEXERCISE (PART 2)1.If your function library does not include an Atan2 function subroutine, write one.2. To make a friendly user interface, we wish to describe orientations in the planarworld by a single angle, 9, instead of by a 2 x 2 rotation matrix. The user wifi always3
60Chapter 2Spatial descriptions and transformationscommunicatein terms of angle 9, but internally we will need the rotation-matrixform. For the position-vector part of a frame, the user will specify an x and ay value. So, we want to allow the user to specify a frame asa 3-tuple: (x, y, 9).Internally, we wish to use a 2 x 1 position vector and a 2 x 2 rotation matrix, so weneed conversion routines. Write a subroutine whose Pascal definition would beginProcedure UTOI (VAR uforni: vec3; VAR if orm:frame);where "UTOI" stands for "User form TO Internal form." The first argument isthe 3-tuple (x, y, 0), and the second argument is of type "frame," consists of a(2 x 1) position vector and a (2 x 2) rotation matrix. If you wish, you may representthe frame with a (3 x 3) homogeneous transform in which the third row is [0 0 1].The inverse routine will also be necessary:Procedure IT{JU (VAR if orm: frame; VAR uform: vec3);3. Write a subroutine to multiply two transforms together. Use the following proce-dure heading:Procedure TMULT (VAR brela, creib, crela: frame);The first two arguments are inputs, and the third is an output. Note that the namesof the arguments document what the program does (brela =4. Write a subroutine to invert a transform. Use the following procedure heading:Procedure TINVERT (VAR brela, areib: frame);The first argument is the input, the second the output. Note that the names of thearguments document what the program does (brela T).5. The following frame definitions are given as known:=[xy 9] =[11.01.030.0],=[xy0]=z[0.07.0 45.0],gT =[xy 9] =[—3.0—3.0 —30.0].These frames are input in the user representation [x, y, 9] (where 9 is in degrees).Draw a frame diagram (like Fig. 2.15, only in 2-D) that qualitatively shows theirarrangement. Write a program that calls TMIJLT and TINVERT (defined inprogramming exercises 3 and 4) as many times as needed to solve for T. Thenprint out T in both internal and user representation.
MATLAB EXERCISE2Aa) Usingthe Z—Y—X (ay)Euler angle convention, write a MATLAB programto calculate the rotation matrix R when the user enters the Euler angles a —y.Test for two examples:i) a =10°,=20°,y =30°.ii) a =30°,=90°,y =—55°.For case (i), demonstrate the six constraints for unitary orthonormal rotationmatrices (i.e., there are nine numbers in a 3 x 3 matrix, but only three areindependent). Also, demonstrate the beautiful property, ==for case i.
MATLAB Exercise 2B61b)Write a MATLABprogramto calculatetheEuler angles a—$—y when the user enters the rotation matrixR (the inverse problem). Calculate both possiblesolutions. Demonstrate this inverse solution for the two cases from part (a). Usea circular check to verify your results (i.e., enter Euler angles in code a from part(a); take the resulting rotation matrix and use this as the input to code b; youget two sets of answers—one should be the original user input, and the second canbe verified by once again using the code in part (a).e) For a simple rotation of about the Y axis only, for $= 200 andB P={10 1 }T,calculate A F; demonstrate with a sketch that your results are correct.d) Check all results, by means of the Corke MATLAB Robotics Toolbox. Try thefunctions rp y2tr() ,tr2rpyQ,rotxQ,and rotzQ.
MATLABEXERCISE 2Ba) WriteaMATLAB program to calculate the homogeneous transformation matrixT when the user enters Z— V —x Eulerangles a —— yand the position vectorATest for two examples:i) a=10°, fl=20°, y=300,andAPB={1 23}T.ii) For ,8 =20°(a =j,= 00),A'3B =(30 1 }T•b) For8 =200(a=y=0°),APB ={3 0 1}T,andBP ={1 0 1}T,115eMATLABt0calculate A P; demonstrate with a sketch that your results are correct. Also, usingthe same numbers, demonstrate all three interpretations of the homogeneoustransformation matrix—the (b) assignment is the second interpretation, transformmapping.c)Writea MATLAB program to calculate the inverse homogeneous transformationmatrix T1=T, using thesymbolic formula. Compare your result with anumerical MATLAB function (e.g., mv). Demonstrate that both methods yield correctresults (i.e.,=14). Demonstrate this for examples (i)and (ii) from (a) above.d) Defineto be the result from (a)(i) and to be the result from (a)(ii).
i)CalculateT, and show the relationship via a transformgraph. Do the same
ii) Givenandfrom(d)(i)—assume you don't know calculateit, andcompare your result with the answer you know.iii) Given Tand T from (d)(i) —assume you don't know T,calculateit, andcompareyour result with theanswer you know.e) Check all results by means of the Corke MATLAB Robotics Toolbox. Tryfunctions rpy2tr() and translQ.
CHAPTER3Manipulator kinematics
3.1INTRODUCTION3.2LINK DESCRIPTION3.3LINK-CONNECTION DESCRIPTION3.4CONVENTION FOR AFFIXING FRAMES TO LINKS3.5MANIPULATOR KINEMATICS3.6ACTUATOR SPACE, JOINT SPACE, AND CARTESIAN SPACE3.7EXAMPLES: KINEMATICS OF TWO INDUSTRIAL ROBOTS3.8FRAMES WITH STANDARD NAMES3.9WHERE IS THE TOOL?3.10 COMPUTATIONAL CONSIDERATIONS
3.1INTRODUCTIONKinematicsis the science of motion that treats the subject without regard to theforces that cause it. Within the science of kinematics, one studies the position, thevelocity, the acceleration, and all higher order derivatives of the position variables(with respect to time or any other variable(s)). Hence, the study of the kinematics ofmanipulators refers to all the geometrical and time-based properties of the motion.The relationships between these motions and the forces and torques that cause themconstitute the problem of dynamics, which is the subject of Chapter 6.In this chapter, we consider position and orientation of the manipulatorlinkages in static situations. In Chapters 5 and6, we wifi consider the kinematicswhen velocities and accelerations are involved.In order to deal with the complex geometry of a manipulator, we wifi affixframes to the various parts of the mechanism and then describe the relationshipsbetween these frames. The study of manipulator kinematics involves, among otherthings, how the locations of these frames change as the mechanism articulates. Thecentral topic of this chapter is a method to compute the position and orientation ofthe manipulator's end-effector relative to the base of the manipulator as a functionof the joint variables.3.2LINK DESCRIPTIONAmanipulator may be thought of as a set of bodies connected in a chain by joints.These bodies are called links. Joints form a connection between a neighboring pairof links. The term lower pair is used to describe the connection between a pair of
62
Section 3.2Link description63
FIGURE 3.1:Thesixpossible lower-pair joints.
bodies when the relative motion is characterized by two surfaces sliding over oneanother. Figure 3.1 shows the six possible lower pair joints.Mechanical-design considerations favor manipulators' generally being con-structed from joints that exhibit just one degree of freedom. Most manipulatorshave revolute joints or have sliding joints called prismatic joints. In the rare casethat a mechanism is built with a joint having n degrees of freedom, it can be modeled as n joints of one degree of freedom connected with n — 1links of zero length.Therefore, without loss of generality, we wifi consider only manipulators that havejoints with a single degree of freedom.The links are numbered starting from the immobile base of the arm, whichmight be called link 0. The first moving body is link 1, and so on, out to the freeend of the arm, which is link n. In order to position an end-effector generally in3-space, a minimum of six joints is required.1 Typical manipulators have five or sixjoints. Some robots are not actually as simple as a single kinematic chain—thesehave parallelogram linkages or other closed kinematic structures. We wifi considerone such manipulator later in this chapter.A single link of a typical robot has many attributes that a mechanical designerhad to consider during its design: the type of material used, the strength and stiffness
1This makes good intuitive sense, because the description of an object in space requires six parame- ters—three for position and three for orientation.Revolute Prismatic
Cylindrical Planar
Screw Spherical
64Chapter 3Manipulator kinematicsAxisi—1 Axisi
FIGURE 3.2: The kinematic function of a link is to maintain a fixed relationshipbetween the two joint axes it supports. This relationship can be described with twoparameters: the link length, a, and the link twist, a.
of the link, the location and type of the joint bearings, the external shape, theweight and inertia, and more. However, for the purposes of obtaining the kinematicequations of the mechanism, a link is considered only as a rigid body that definesthe relationship between two neighboring joint axes of a manipulator. Joint axes aredefined by lines in space. Joint axis i is defined by a line in space, or a vectordirection, about which link i rotates relative to link i 1.It turns out that, forkinematic purposes, a link can be specified with two numbers, which define therelative location of the two axes in space.For any two axes in 3-space, there exists a well-defined measure of distancebetween them. This distance is measured along a line that is mutually perpendicularto both axes. This mutual perpendicular always exists; it is unique except whenboth axes are parallel, in which case there are many mutual perpendiculars of equallength. Figure 3.2 shows link i — 1and the mutually perpendicular line along whichthe link length,is measured. Another way to visualize the link parameteris to imagine an expanding cylinder whose axis is the joint i — 1axis—when it justtouches joint axis i, the radius of the cylinder is equal toThe second parameter needed to define the relative location of the twoaxes is called the link twist. If we imagine a plane whose normal is the mutuallyperpendicular line just constructed, we can project the axes i — 1and i onto thisplane and measure the angle between them. This angle is measured from axis i — 1to axis i in the right-hand sense about a1_1.2 We wifi use this definition of the twist
thiscase,is given the direction pointing from axis i—itoaxist•Link ii
///fv/a11
Section 3.3Link-connection description 65
of link i —1,InFig. 3.2,is indicated as the angle between axis i — 1andaxis i. (The lines with the triple hash marks are parallel.) In the case of intersectingaxes, twist is measured in the plane containing both axes, but the sense of islost. In this special case, one is free to assign the sign of a1_1 arbitrarily.You should convince yourself that these two parameters, length and twist, asdefined above, can be used to define the relationship between any two lines (in thiscase axes) in space.
EXAMPLE3.1Figure 3.3 shows the mechanical drawings of a robot link. If this link is used in arobot, with bearing "A" used for the lower-numbered joint, give the length andtwist of this link. Assume that holes are centered in each bearing.By inspection, the common perpendicular lies right down the middle ofthe metal bar connecting the bearings, so the link length is 7 inches. The end viewactually shows a projection of the bearings onto the plane whose normal is the mutualperpendicular. Link twist is measured in the right-hand sense about the commonperpendicular from axis i — 1to axis i, so, in this example, it is clearly +45 degrees.
3.3LINK-CONNECTION DESCRIPTIONThe problem of connecting the links of a robot together is again one filled withmany questions for the mechanical designer to resolve. These include the strengthof the joint, its lubrication, and the bearing and gearing mounting. However, forthe investigation of kinematics, we need only worry about two quantities, which wificompletely specify the way in which links are connected together.Bearing "A" Bearing "B"I,A2in./2in.,>,
H—2mn.5in.2in.—H
FIGURE 3.3:A simplelinkthat supports two revolute axes.
66Chapter 3Manipulator kinematicsAxisi—1 Axisi
FIGURE3.4:The linkoffset,d, andthe joint angle, 9,are two parameters thatmaybeusedto describe the nature of the connection between neighboring links.
Intermediate linksin the chainNeighboringlinks have a common joint axis between them. One parameter ofinterconnection has to do with the distance along this common axis from one linkto the next. This parameter is called the link offset. Theoffset at joint axis iiscalledThesecond parameter describes the amount of rotation about this common axisbetween one link and its neighbor. This is called the joint angle,Figure 3.4 shows the interconnection of link i 1 and link i.Recallthat at_iis the mutual perpendicular between the two axes of link i —1. Likewise,is themutual perpendicular defined for link i. Thefirst parameter of interconnection is thelink offset,whichis the signed distance measured along the axis of joint i fromthe point whereintersects the axis to the point where intersects the axis. Theoffsetisindicated in Fig. 3.4. The link offset isvariable if joint iisprismatic.The second parameter of interconnection is the angle made between an extensionofandmeasured about the axis of joint i. Thisis indicated in Fig. 3.4, wherethe lines with the double hash marks are parallel. This parameter is named and isvariable for a revolute joint.First and lastlinks in the chainLinklength,and link twist,depend on joint axes iandi+1. Hence, a1 througha,,4 andthroughare defined as was discussed in this section. At the endsof the chain, it wifi be our convention to assign zero to these quantities. That is,a0 = a,, = 0.0 and= ct,,=Link offset,andjoint angle,are well defined
fact, a,, anddonot need to be defined atall.Link i1
a1
Section 3.4Convention for affixing frames to links 67forjoints 2 throughn — 1according to the conventions discussedin thissection.Ifjoint1is revolute, the zero position for may be chosen arbitrarily; d1 = 0.0willbe our convention.Similarly,if joint1isprismatic, thezero position of d1 may bechosenarbitrarily;=0.0wifi be our convention.Exactly thesame statementsapply to jointn.These conventions have been chosen so that, in a case where a quantity couldbe assigned arbitrarily, a zero value is assigned so that later calculations wifi be assimple as possible.Link parametersHence, any robot can be described kinematically by giving the values of fourquantities for eachlink. Twodescribe the linkitself,and two describe the link'sconnection to a neighboring link. In the usualcase of a revolute joint, iscalledthe jointvariable, and the otherthree quantitieswould be fixedlinkparameters.Forprismatic joints, d1isthe joint variable, and the other three quantities are fixedlink parameters. The definition of mechanisms by means of these quantities is aconvention usually called the Denavit—Hartenberg notationOther methodsofdescribingmechanisms are available, but are not presented here.At thispoint, we could inspect any mechanism and determine theDenavit—Hartenberg parameters that describe it. For a six-jointed robot, 18 num-bers would be required to describe the fixed portion of its kinematics completely.In the case of asix-jointedrobot with all revolute joints, the 18 numbersare in theform of six sets ofdi).EXAMPLE 3.2Two links, as described in Fig. 3.3, are connectedas links 1 and 2 of a robot. Joint 2is composed of a "B" bearing of link 1 and an "A" bearing of link 2, arranged sothatthe flat surfaces of the "A"and"B" bearings lie flush against eachother. Whatis d2?Thelinkoffsetd2isthe offset at joint 2, which is the distance, measured alongthejoint 2axis, between the mutual perpendicular of link 1 andthat of link2. Fromthe drawings in Fig. 3.3, this is 2.5 inches.
Before introducing more examples, we wifi define a conventionforattachinga frame to each link of the manipulator.3.4CONVENTION FOR AFFIXING FRAMES TO LINKSIn orderto describe the locationof eachlinkrelativeto itsneighbors, we define aframeattached toeach link. Thelinkframes arenamed by numberaccordingto thelink towhich they areattached.That is, frame {i }is attached rigidly to link i.
4Note that many related conventions go by the name Denavit—Hartenberg, but differ in a few details.For example, the version used in this book differs from some of the robotic literature in the manner offrame numbering. Unlike some other conventions, in this book frame {i} is attached to link i and has itsorigin lying on joint axis i.
68Chapter 3Manipulator kinematicsIntermediate links in the chainTheconvention we wifi use to locate frames on the links isas follows: The 2-axisof frame {i}, called Z1,iscoincident with the joint axis i. The origin of frame {i} islocated where theperpendicular intersects the joint i axis. X1 points along a1 inthe direction from joint ito joint i + 1.In the case of a1 =0,X1 is normal to the plane of Z1 and We define a1asbeing measured in the right-hand sense about andso we see that the freedom ofchoosing the sign ofin this case corresponds to two choices for the direction ofis formed by the right-hand rule to complete the ith frame. Figure 3.5 showsthe location of frames {i — 1}and {i Ifora general manipulator.Firstand lastlinksinthe chainWe attach a frame to the base of the robot, or link 0, called frame {0}. Thisframe does not move; for the problem of arm kinematics, it can be considered thereference frame. We may describe the position of all other link frames in terms ofthis frame.Frame {0} is arbitrary, so it always simplifies matters to choose Z0 alongaxis 1and to locate frame {0} so that it coincides with frame {1} when joint variable 1 iszero. Using this convention, we wifi always have a0 = 0.0,a0 =0.0.Additionally,this ensures that d1 =0.0if joint 1 is revolute, or 01 = 0.0if joint 1 is prismatic.For joint n revolute, the direction of XN is chosen so that it aligns with XN_jwhen=0.0,and the origin of frame {N} is chosen so that =0.0.For joint nprismatic, the direction of XN is chosen so that =0.0,and the origin of frame {N}is chosen at the intersection of XN.1 and joint axis n when d,, = 0.0.
FIGURE 3.5:Link frames are attached so that frame {i} is attached rigidly to link i.Link i—1
Na1
Section 3.4Convention for affixing frames to links 69Summary of the link parameters in terms of the link framesIfthe link frames have been attached to the links according to our convention, thefollowing definitions of the link parameters are valid:=thedistance from Z1 tomeasured along=theangle fromtomeasured about=thedistance fromtomeasured alongand=the angle fromtomeasured about Z•Weusually choose a1 >0,because it corresponds to a distance; however,andare signed quantities.A final note on uniqueness is warranted. The convention outlined above doesnot result in a unique attachment of frames to links. First of all, when we first alignthe Z, axis withjoint axis i, there are two choices of direction in which to pointZ.Furthermore,in the case of intersecting joint axes (i.e., =0),there are twochoices for the direction of correspondingto the choice of signs for the normalto the plane containing 2,and2i+1• When axes i and i + 1 are parallel, the choiceof origin location for {i }isarbitrary (though generally chosen in order to cause d1 tobe zero). Also, when prismatic joints are present, there is quite a bit of freedom inframe assignment. (See also Example 3.5.)Summaryof link-frame attachment procedureThefollowing is a summary of the procedure to follow when faced with a newmechanism, in order to properly attach the link frames:1. Identify the joint axes and imagine (or draw) infinite lines along them.steps 2 through 5 below, consider two of these neighboring lines (at axes i andi + 1).2. Identify the common perpendicular between them, or point of intersection.At the point of intersection, or at the point where the common perpendicularmeets the ith axis, assign the link-frame origin.3. Assign the Z1 axis pointing along the ith joint axis.4. Assign theaxispointing along the common perpendicular, or, if the axesintersect, assign k1tobe normal to the plane containing the two axes.5. Assign theaxisto complete a right-hand coordinate system.6. Assign {0} to match {1} when the first joint variable is zero. For {N}, choose anorigin location and XN direction freely, but generally so as to cause as manylinkage parameters as possible to become zero.
EXAMPLE3.3Figure3.6(a) shows a three-link planar arm. Because all three joints are revolute,this manipulator is sometimes called an RRR (or 3R) mechanism. Fig. 3.6(b) is aschematic representation of the same manipulator. Note the double hash marks
70Chapter 3Manipulator kinematics
FIGURE 3.6:Athree-link planararm. On the right, we show the same manipulatorby means of a simple schematic notation. Hash marks on the axes indicate that theyare mutually parallel.
indicated on each of the three axes, which indicate that these axes are parallel.Assign link frames to the mechanism and give the Denavit—Hartenberg parameters.We start by defining the reference frame, frame {O}. It is fixed to the base andaligns with frame {i} when the first joint variable (9k) is zero. Therefore, we positionframe {O} as shown in Fig. 3.7 with Z0 aligned with the joint-i axis. For this arm,all joint axes are oriented perpendicular to the plane of the arm. Because the arm
Y1
FIGURE 3.7: Link-frame assignments.(a) (b)
x3
Yo
xo
Section 3.4Convention for affixing frames to links 71
d1Bj
1oo0
00
00
FIGURE 3.8:Link parameters of the three-link planar manipulator.
lies in a plane with all 2axesparallel, there are no link offsets—all are zero. Alljoints are rotational, so when they are at zero degrees, all X axes must align.With these comments in mind, it is easy to find the frame assignments shownin Fig. 3.7. The corresponding link parameters are shown in Fig. 3.8.Note that, because the joint axes are all parallel and all the Z axes are taken aspointing out of the paper, all a very simple mechanism.Note also that our kinematic analysis always ends at a frame whose origin lies onthe last joint axis; therefore, 13 does not appear in the link parameters. Such finaloffsets to the end-effector are dealt with separately later.
EXAMPLE3.4Figure3.9(a) shows a robot having three degrees of freedom and one prismatic joint.This manipulator can be called an "RPR mechanism," in a notation that specifiesthe type and order of the joints. It is a "cylindrical" robot whose first two jointsare analogous to polar coordinates when viewed from above. The last joint (joint 3)provides "roll" for the hand. Figure 3.9(b) shows the same manipulator in schematic
Joint2Joint3_____
Joint 1
(a) (b)
FIGURE3.9:Manipulator having three degrees of freedom and one prismatic joint.
72Chapter 3Manipulator kinematics
z3
FIGURE 3.10:Link-frame assignments.
form. Note the symbol used to represent prismatic joints, and note that a "dot" isused to indicate the point at which two adjacent axes intersect. Also, the fact thataxes 1 and 2 are orthogonal has been indicated.Figure 3.10(a) shows the manipulator with the prismatic joint at minimumextension; the assignment of link frames is shown in Fig. 3.10(b).Note that frame {0} and frame {1} are shown as exactly coincident in this figure,because the robot is drawn for the position =0.Note that frame {0}, although notat the bottom of the flanged base of the robot, is nonetheless rigidly affixed to link 0,the nonmoving part of the robot. Just as our link frames are not used to describe thekinematics all the way out to the hand, they need not be attached all the way backto the lowest part of the base of the robot. It is sufficient that frame {O} be attachedanywhere to the nonmoving link 0, and that frame {N}, the final frame, be attachedanywhere to the last link of the manipulator. Other offsets can be handled later in ageneral way.Note that rotational joints rotate about the Z axis of the associated frame, butprismatic joints slide along Z. In the case where joint i is prismatic,is a fixedconstant, andis the variable. If d1 is zero at minimum extension of the link, thenframe {2} should be attached where shown, so that d2 wifi give the true offset. Thelink parameters are shown in Fig. 3.11.Note that 87 is zero for this robot and that d7 is a variable. Axes 1 and 2intersect, so a1 is zero. Angle must be 90 degrees in order to rotate so as toalign with 1, (about X1).
EXAMPLE3.5Figure3.12(a) shows a three-link, 3R manipulator for which joint axes 1 and 2intersect and axes 2 and 3 are parallel. Figure 3.12(b) shows the kinematic schematicof the manipulator. Note that the schematic includes annotations indicating that thefirst two axes are orthogonal and that the last two are parallel.Demonstrate the nonuniqueness of frame assignments and of the Denavit—Hartenberg parameters by showing several possible correct assignments of frames(1}and{2}.(a) (b)
Section 3.5Manipulator kinematics 73
ia1_10j—1d1
000
00
00L703
FIGURE 3.11:Linkparametersfor the RPR manipulator of Example 3.4.
FIGURE 3.12:Three-link,nonpianarmanipulator.
Figure 3.13 shows two possible frame assignments and corresponding param-eters for the two possible choices of direction of Z2.In general, when 2,and2j+1 intersect, there are two choices for Inthisexample, joint axes 1 and 2 intersect, so there are two choices for the direction ofX1. Figure 3.14 shows two more possible frame assignments, corresponding to thesecond choice of X1.In fact, there are four more possibilities, corresponding to the preceding fourchoices, but with Z1 pointing downward.
3.5MANIPULATOR KINEMATICSInthis section, we derive the general form of the transformation that relatesthe frames attached to neighboring links. We then concatenate these individualtransformations to solve for the position and orientation of link n relativeto link 0.L1
(a) (b)
74Chapter 3Manipulator kinematics
FIGURE 3.13: Two possible frame assignments.
FIGURE 3.14: Two more possible frame assignments.
Derivation of link transformationsWe wish to construct the transform that defines frame {i }relative to the frame {i —1}.In general, this transformation will be a function of the four link parameters. Forany givenrobot,this transformation wifi be a function of only one variable, the otherthree parameters being fixed by mechanical design. By defining a frame for eachlink, we have broken the kinematics problem into a subproblems. In order to solveeach of these subproblems, namely wewill further break each subprobleminto four subsubproblems. Each of these four transformations will be a function ofone link parameter oniy and will be simple enough that we can write down its formby inspection. Webegin by defining three intermediate frames for each link—{P},{Q},and {R}.Figure3.15 shows the same pair of joints as before with frames {P}, {Q},and{R}defined.Note that only the X and Z axesare shown for each frame, to makethe drawing clearer. Frame {R} differsfrom frame {i1} only by a rotation ofa1 a10L7a1 0 a2 =
a1 = 0a2 = 0a1 90 a2 = 002 =d1=0 d1=0
where=1Section 3.5Manipulator kinematics75Adsi
FIGURE 3.15: Location of intermediate frames {P}, {Q},and {R}.
Frame (Q} differs from {R}bya translationFrame {P}differsfrom {Q} by arotationand frame {i}differsfrom {P}bya translation d1.Ifwe wish to write thetransformation that transforms vectors defined in {i} totheir description in {i —we may writei—lp= RT (3.1)or(3.2)
(3.3)Consideringeach of these transformations, we see that (3.3) may be written= (3.4)or= (3.5)wherethe notation ScrewQ (r, q') stands for the combination of a translation along anaxisby a distance r and a rotation about the same axis by an angle Multiplyingout (3.4), we obtain the general form of
(3.6)0
0001.
76Chapter 3Manipulator kinematics
EXAMPLE3.6Using the link parameters shown in Fig. 3.11 for the robot of Fig. 3.9, compute theindividual transformations for each link.Substituting the parameters into (3.6), we obtainc910 00T—s81c91 001—0010'0001
=(3.7)
c93 —sO3 0 02T—503c030 03—001120001Once having derived these link transformations, we wifi find it a good idea to checkthem against common sense. For example, the elements of the fourth column ofeach transform should give the coordinates of the origin of the next higher frame.
Concatenatinglink transformationsOncethe link frames have been defined and the corresponding link parametersfound, developing the kinematic equations is straightforward. From the values of thelink parameters, the individual link-transformation matrices can be computed. Then,the link transformations can be multiplied together to find the single transformationthat relates frame [N} to frame {0}:(3.8)This transformation,T, wifi be a function of all iijointvariables. If the robot'sjoint-position sensors are queried, the Cartesian position and orientation of the lastlink can be computed by3.6 ACTUATOR SPACE, JOINT SPACE, AND CARTESIAN SPACEThe position of all the links of a manipulator of n degrees of freedom can bespecified with a set of n joint variables. This set of variables is often referred to asthe a x 1 joint vector. The space of all such joint vectors is referred to as joint space.Thus far in this chapter, we have been concerned with computing the Cartesianspace description from knowledge of the joint-space description. We use the termCartesian space when position is measured along orthogonal axes and orientationis measured according to any of the conventions outlined in Chapter 2. Sometimes,the terms task-oriented space and operational space are used for what we will callCartesian space.
Section 3.7Examples: kinematics of two industrial robots 77
'H'ActuatorJointCartesianspacespacespace
FIG U RE3.16:Mappings between kinematic descriptions.
So far, we have implicitly assumed that each kinematic joint is actuated directlyby some sort of actuator. However, in the case of many industrial robots, this is not so.For example, sometimes two actuators work together in a differential pair to move asingle joint, or sometimes a linear actuator is used to rotate a revolute joint, throughthe use of a four-bar linkage. In these cases, it is helpful to consider the notion ofactuator positions. The sensors that measure the position of the manipulator areoften located at the actuators, so some computations must be performed to realizethe joint vector as a function of a set of actuator values, or actuator vector.As is indicated in Fig. 3.16, there are three representations of a manipulator'sposition and orientation: descriptions in actuator space, in joint space, and inCartesian space. In this chapter, we are concerned with the mappings betweenrepresentations, as indicated by the solid arrows in Fig. 3.16. In Chapter 4, we willconsider the inverse mappings, indicated by the dashed arrows.The ways in which actuators might be connected to move a joint are quitevaried; they might be catalogued, but we wifi not do so here. For each robot wedesign or seek to analyze, the correspondence between actuator positions and jointpositions must be solved. In the next section, we will solve an example problem foran industrial robot.3.7EXAMPLES: KINEMATICS OF TWO INDUSTRIAL ROBOTSCurrent industrial robots are available in many different kinematic configurations [2],[3]. In this section, we work out the kinematics of two typical industrial robots. Firstwe consider the Unimation PUMA 560, arotary-joint manipulator with six degreesof freedom. We will solve for the kinematic equations as functions of the joint angles.For this example, we wifi skip the additional problem of the relationship betweenactuator space and joint space. Second, we consider the Yasukawa Motoman L-3, arobot with five degrees of freedom and rotary joints. This example is done in detail,including the actuator-to-joint transformations. This example may be skipped onfirst reading of the book.The PUMA 560The Unimation PUMA 560 (Fig. 3.17) is a robot with six degrees of freedomand all rotational joints (i.e., it is a 6R mechanism). It is shown in Fig. 3.18, with
78Chapter 3Manipulator kinematics
FIGURE 3.17:TheUnimationPUMA 560. Courtesy of Unimation Incorporated,Shelter Rock Lane,Danbury,Conn.
link-frame assignments inthe position correspondingtoall jointanglesequaltozero.5Figure3.19 shows adetail oftheforearm ofthe robot.Notethat the frame {0} (not shown) is coincident with frame [1} when iszero. Note also that, for this robot, as for many industrial robots, the joint axesof joints 4, 5, and 6 all intersect at a common point, and this point of intersectioncoincides with the origin of frames {4}, {5}, and {6}. Furthermore, the joint axes 4, 5,and 6 are mutually orthogonal. This wrist mechanism is ifiustrated schematically inFig. 3.20.The link parameters corresponding to this placement of link frames are shownin Fig. 3.21. In the case of the PUMA 560, a gearing arrangement in the wrist ofthe manipulator couples together the motions of joints 4, 5, and 6. What this meansis that, for these three joints, we must make a distinction between joint space andactuator space and solve the complete kinematics in two steps. However, in thisexample, we will consider only the kinematics from joint space to Cartesian space.
5Unimationhas used a slightly different assignment of zero location of the joints, such that =031800,whereis the position of joint 3 in Unimation's convention.
Section 3.7Examples: kinematics of two industrial robots 79
FIG U RE 3.18:Some kinematic parameters and frame assignments for the PUMA 560
FIG URE 3.19:Kinematic parameters and frame assignments for the forearm of thePUMA 560 manipulator.manipulator.z4
80Chapter 3Manipulator kinematics
ia,—1d1Oi
1000
00
0a7d363
4—90°a3d404
590000
60006
FIGURE 3.21:Link parameters of the PUMA 560.65
FIGURE 3.20:Schematic of a 3R wrist in which all three axes intersect at a point andare mutually orthogonal. This design is used in the PUMA 560 manipulator andmany other industrial robots.
Section 3.7Examples: kinematics of two industrial robots 81Using(3.6), we compute each of the link transformations:
6Depending on the amount of space available to show expressions, we use any of the following threeforms: cos 95, C95,orc5.0T—1—c91 —sO1 00
00000 010
00010000000010000 000 000
0000000 00001(3.9)
We now formby matrix multiplication of the individual link matrices.While forming this product, we wifi derive some subresults that wifi be useful whensolving the inverse kinematic problem in Chapter 4. We start by multiplying andthat is,c5c6 —c5s6 —s5 0=4T5T =6 00001where c5 is shorthand for cos 05, S5 for sin and so on.6 Then we have
(3.11) ==C4C5C6 —C4C5S6 —S4C6—C4S5s5C6 C5
82Chapter 3Manipulator kinematicsBecausejoints 2 and 3 are always parallel, multiplying andfirst and thenapplying sum-of-angle formulas wifi yield a somewhat simpler final expression. Thiscan be done whenever two rotational joints have parallel axes and we have
where we have used the sum-of-angle formulas (from Appendix A):
Then we haveC23 = C2C3 —S23 = C2S3 +
1.1.113
—1T3T —1211r22 1r23636—1.
11.
1
13311
r21r32r330001==C230a2c2001d3
000
whereipxipyipz1(3.12)
(3.13)= c73[c4c5c6——= —S4C5c6 — c4S6,= —s23[c4c5c6—s4s6] — c23s5c6,=—c23[c4c5s6+s4c6] + s23s5s6,= S4C5S6 — C4C6,= s93[c4c5s6+s4c6]+c23s5s6,=—C23C4S5 —
S23C4S5— C23C5,a2c2 + a3 C23d4s73,d3,=—a3s23 — a2s2 — d4c23.
Finally, we obtain the product of all six link transforms:
Section 3.7Examples: kinematics of two industrial robots 83Here,=— s4s5) — s23s5c5] + s1(s4c5c6 + c4s6),=s4s6) — s23s5c6 — c1(s4c5c6 + c4s6),r31 = —s23(c4c5c6 — s4s6) — c23s5c6,
= c1[c23(—c4c5s6 — s4c6) + s23s5s6] + s1(c4c6 — s4c5s6),r22 = s1[c23(—c4c5s6 — s4c6) + s23s5s6] c1(c4c6 — s4c5s6),r32 = —s23(—c4c5s5 — s4c6) + c23s5s6,
r13 = —c1(c23c4s5 + s23c5) — s1s4s5,r23 = —sj(c23c4s5 + s23c5) + c1s4s5,r33 = 523C4S5 —=+ a3c23 — d4s23] — d3s1,P) = s1[a2c2 + a3c23 — d4s23] + d3c1,= —a3s23 — a2s2 — d4c23. (3.14)Equations (3.14) constitute the kinematics of the PUMA 560. Theyspecify how tocompute the position and orientation of frame {6} relative to frame {O} of the robot.These are the basic equations for all kinematic analysis of this manipulator.TheYasukawa Motoman L-3TheYasukawa Motoman L-3 is a popular industrial manipulator with five degreesof freedom (Fig. 3.22). Unlike the examples we have seen thus far, the Motomanis not a simple open kinematic chain, but rather makes use of two linear actuatorscoupled to links 2 and 3 with four-bar linkages. Also, through a chain drive, joints 4and 5 are operated by two actuators in a differential arrangement.In this example, we wifi solve the kinematics in two stages. First, we wifi solvefor joint angles from actuator positions; second, we will solve for Cartesian positionand orientation of the last link from joint angles. In this second stage, we can treatthe system as if it were a simple open-kinematic-chain SR device.Figure 3.23 shows the linkage mechanism that connects actuator number 2 tolinks 2 and 3 of the robot. The actuator is a linear one that directly controls thelength of the segment labeled DC. Triangle ABC is ftxed, as is the length BD. Joint2 pivots about point B, and the actuator pivots slightly about point C as the linkagemoves. We give the following names to the constants (lengths and angles) associatedwith actuator 2:=AB,= AC, a2 = BC,=BD,c,= LJBD, 12 = BJ,
84Chapter 3Manipulator kinematics
FIGURE 3.22:TheYasukawaMotoman L-3. Courtesy of Yasukawa.
we givethefollowingnames to the variables:=—LJBQ,= /CBD,g2 =DC.Figure 3.24 shows the linkage mechanism that connects actuator number 3 tolinks 2 and 3 of the robot. The actuator is a linear one that directly controls thelength of the segment labeled HG. Triangle EFG is fixed, as is the length FH. Joint3 pivots about point J, and the actuator pivots slightly about point G as the linkagemoves. We give the following names to the constants (lengths and angles) associatedwith actuator 3:= EF,= EG,a3 =GF,= HF,13 =JK.We give the following names to the variables:03 =LPJK,1/13= LGFH,g3 =GH.This arrangement of actuators and linkages has the following functional effect.Actuator 2 is used to position joint 2; while it is doing so, link 3 remains in thesame orientation relative to the base of the robot. Actuator 3 is used to adjust
Section 3.7Examples: kinematics of two industrial robots 85
FIGURE 3.23:Kinematicdetailsof the Yasukawa actuator-2 linkage.
the orientation of link 3 relative to thebase of the robot (rather than relative tothe preceding link as in a serial-kinematic-chain robot). One purpose of such alinkage arrangement is to increase the structural rigidity of the main linkages ofthe robot. This often pays off in terms of an increased ability to position the robotprecisely.The actuators for joints 4 and 5 are attached to link 1 of the robot with their axesaligned with that ofjoint 2 (points B and F in Figs. 3.23 and 3.24). They operate thewrist joints through two sets of chains—one set located interior to link 2, the secondset interior to link 3. The effect of this transmission system, along with its interactionwith the actuation of links 2 and 3, is described functionally as follows: Actuator 4is used to position joint 4 relative to the base of the robot, rather than relative to thepreceding link 3. This means that holding actuator 4 constant wifi keep link 4 at aconstant orientation relative to the base of the robot, regardless of the positions ofjoints 2 and 3. Finally, actuator 5 behaves as if directly connected to joint 5.We now state the equations that map a set of actuator values (A1) to theequivalent set of joint values (0,). In this case, these equations were derived bystraightforward plane geometry—mostly just application of the "law of cosines."771f a triangle's angles are labeled a, b, and c, whereangle a is opposite side A, and so on, thenA2 =B2+ C2 —2BCcos a.
86Chapter 3Manipulator kinematics
FIGURE 3.24:Kinematic details of th3 Yasukawa actuator-3 linkage.
Appearing in these equations are scale (k1) and offset constantsfor eachactuator. For example, actuator 1 is directly connected to joint axis 1, and so theconversion is simple; it is just a matter of a scale factor plus an offset. Thus,=k1A1+ x1,1(14\22a222+tan1+Q2 —2700,Y2
93 —cos—94= —k4A4—92—03+A4+180°,95= k5A5+ A5.—+tan1— 90°,\/(3.15)
Figure 3.25 shows the attachment of the link frames. In this figure, the manipula-tor is shown in a position corresponding to the joint vector 0 = (0,—90°, 90°, 90°, 0).Figure 3.26 shows the link parameters for this manipulator. The resulting link-transformation matrices are
c81 —s91 000T—s91c91 001—0010'0001c92—sO2 0000102— —sO,—c02 0 00001CO3 —SO30122T—503c030 030010'0001
CO4—504 0 133T—sO4c040 040010'0001c050 000
0001Section 3.7Examples: kinematics of two industrial robots 87
(3.16)
z4
FIGURE 3.25:Assignment of link frames for the Yasukawa L-3.
88Chapter 3Manipulator kinematics
ia1—1d1
000
00
00
00
0005
FIGURE 3.26:Linkparametersof the Yasukawa L-3 manipulator.
Forming the product to obtain T, we obtainr11r12 r13=r21Pyr39 r330001wherer11= c1c234c5r21 = S1C234C5 + C1S5,r31 = —s234c5,
r12 = —c1c234s5 —=S1C234S5 + C1C5,=
r13 = C1S234,=/33 =
Section 3.8Frames with standard names 89=+ 13c23),=s1(12c7+ 13c23),Pz =—13s93. (3.17)We developed the kinematic equations for the Yasukawa Motoman in twosteps. In the first step, we computed a joint vector from an actuator vector; in thesecond step, we computed a position and orientation of the wrist frame from thejoint vector. If we wish to compute only Cartesian position and not joint angles, itis possible to derive equations that map directly from actuator space to Cartesianspace. These equations are somewhat simpler computationally than the two-stepapproach. (See Exercise 3.10.)3.8FRAMES WITH STANDARD NAMESAs a matter of convention, it wifi be helpful if we assign specific names and locationsto certain "standard" frames associated with a robot and its workspace. Figure 3.27shows a typical situation in which a robot has grasped some sort of tool and is to position the tool tip to a user-defined location. The five frames indicated inFig. 3.27 are so often referred to that we will define names for them. The namingand subsequent use of these five frames in a robot programming and control systemfacilitates providing general capabilities in an easily understandable way. All robotmotions will be described in terms of these frames.Brief definitions of the frames shown in Fig. 3.27 follow.Thebase frame, {B}{B}is located at the base of the manipulator. It is merely another name for frame{0}. It is affixed to a nonmoving part of the robot, sometimes called link 0.
FIGURE 3.27:Thestandardframes.
90Chapter 3Manipulator kinematicsThe station frame, {S}{S}islocatedin a task-relevant location. In Fig. 3.28, it is at the corner of a tableupon which the robot istowork. Asfarastheuser of thisrobotsystemis concerned,{S} istheuniverse frame, and all actions of the robot are performed relative to it.It issometimes calledthetaskframe, theworldframe, or theuniverseframe. Thestationframe isalways specified withrespecttothe base frame, that is,Thewrist frame, {W}{W} is affixed to the last link of the manipulator. It is another name for frame {N}, thelink frame attached to the last link of the robot. Very often, {W} has its origin fixedat a point called the wrist of the manipulator, and {W} moves with the last link ofthe manipulator. It is defined relative to the base frame—that is, {W} = =Thetool frame, {T}{T}is affixed to the end of any tool the robot happens to be holding. When thehand is empty, {T} is usually located with its origin between the fingertips ofthe robot. The tool frame is always specified with respect to the wrist frame. InFig. 3.28, the tool frame is defined with its origin at the tip of a pin thatthe robot isholding.
FIGURE 3.28:Exampleofthe assignment of standard frames.Tool frame
\
Base frame\
Section 3.9Where is the tool?91The goal frame, {G}{G}is a description of the location to which the robot is to move the tool. Specifically this means that, at the end of the motion, the tool frame should be brought tocoincidence with the goal frame. {G} is always specified relative to the station frame.In Fig. 3.28, the goal is located at a hole into which we want the pin to be inserted.All robot motions may be described in terms of these frames without loss of generality. Their use helps to give us a standard language for talking about robot tasks.3.9WHERE IS THE TOOL?Oneof the first capabilities a robot must have is to be able to calculate the positionand orientation of the tool it is holding (or of its empty hand) with respect to aconvenient coordinate system. That is, we wish to calculate the value of the toolframe, {T}, relative to the station frame, {S}. Once has been computed via thekinematic equations, we can use Cartesian transforms, as studied in Chapter 2, tocalculate {T} relative to {S}. Solving a simple transform equation leads to=T1 (3.18)Equation (3.18) implements what is called the WHERE function in some robotsystems. It computes "where" the arm is. For the situation in Fig. 3.28, the output of WHERE would be the position and orientation of the pin relative to the table top.Equation (3.18) can be thought of as generalizing the kinematics. T computesthe kinematics due to the geometry of the linkages, along with a general transform (which might be considered a fixed link) at the base end T)and another at theend-effectorThese extra transforms allow us to include tools with offsets andtwists and to operate with respect to an arbitrary station frame.3.10COMPUTATIONAL CONSIDERATIONSInmany practical manipulator systems, the time required to perform kinematiccalculations is a consideration. In this section, we briefly discuss various issuesinvolved in computing manipulator kinematics, as exemplified by (3.14), for the case of the PUMA 560.One choice to be made is the use of fixed- or floating-point representationof the quantities involved. Many implementations use floating point for ease of software development, because the programmer does not have to be concernedwith scaling operations capturing the relative magnitudes of the variables. However, when speed is crucial, fixed-point representation is quite possible, because the variables do not have a large dynamic range, and these ranges are fairly well known.Rough estimations of the number of bits needed in fixed-point representation seem to indicate that 24 are sufficient [4].By factoring equations such as (3.14), it is possible to reduce the number ofmultiplications and additions—at the cost of creating local variables (usually a good trade-off). The point is to avoid computing common terms over and over throughoutthe computation. There has been some application of computer-assisted automatic factorization of such equations [5].
92Chapter 3Manipulator kinematicsThe majorexpense in calculating kinematics is often the calculation of thetranscendental functions (sine and cosine). When these functions are available aspart of a standard library, they are often computed from a series expansion atthe cost of many multiply times. At the expense of some required memory, manymanipulation systems employ table-lookup implementations of the transcendentalfunctions. Depending on the scheme, this reduces the amount of time required tocalculate a sine or cosine to two or three multiply times or less [6].The computation of the kinematics as in (3.14) is redundant, in that ninequantities are calculated to represent orientation. One means that usually reducescomputation is to calculate only two columns of the rotation matrix and then tocompute a cross product (requiring only six multiplications and three additions)to compute the third column. Obviously, one chooses the two least complicatedcolumns to compute.
BIBLIOGRAPHY[1]J. DenavitandR.S. Hartenberg, "A Kinematic Notation for Lower-Pair MechanismsBased on Matrices," Journal of Applied Mechanics, pp. 215—221, June 1955.[2]J."Kinematics," in The International Encyclopedia of Robotics, R. Dorf andS. Nof, Editors, John C. Wiley and Sons, New York, 1988.[3]J. Colson and N.D. Perreira, "Kinematic Arrangements Used in Industrial Robots,"13th Industrial Robots Conference Proceedings, April 1983.[4] T. Turner, J. Craig, and W. Gruver, "A Microprocessor Architecture for AdvancedRobot Control," 14th ISIR, Stockholm, Sweden, October 1984.[5] W. Schiehien, "Computer Generation of Equations of Motion," in Computer AidedAnalysis and Optimization of Mechanical System Dynamics, E.J. Haug, Editor, Springer-Verlag, Berlin & New York, 1984.[61 C. Ruoff, "Fast Trigonometric Functions for Robot Control," Robotics Age, November1981.
EXERCISES3.1 [15]Compute the kinematics of the planar arm from Example 3.3.3.2 [37] Imagine an arm like the PUMA 560, except that joint 3 is replaced witha prismatic joint. Assume the prismatic joint slides along the direction of X1 inFig. 3.18; however, there is still an offset equivalent to d3 to be accounted for.Make any additional assumptions needed. Derive the kinematic equations.3.3 [25] The arm with three degrees of freedom shown in Fig. 3.29 is like the one inExample 3.3, except that joint l's axis is not parallel to the other two. Instead,there is a twist of 90 degrees in magnitude between axes 1 and 2. Derive linkparameters and the kinematic equations for Note that no 13 need be defined.3.4 [22] The arm with three degrees of freedom shown in Fig. 3.30 has joints 1and 2 perpendicular and joints 2 and 3 parallel. As pictured, all joints are attheir zero location. Note that the positive sense of the joint angle is indicated.Assign link frames {0} through {3} for this arm—that is, sketch the arm, showingthe attachment of the frames. Then derive the transformation matrices
FIGURE 3.29: The 3Rnonpianar arm (Exercise 3.3).Exercises93
FIGURE 3.30:Twoviewsofa 3Rmanipulator (Exercise 3.4).
3.5[26] Writeasubroutine to computethekinematicsofa PUMA560.Codeforspeed, tryingtominimizethenumberofmultiplicationsasmuch as possible.Use theprocedureheading(or equivalent inC)ProcedureKIN(VAR theta: vec6; VAR wreib: frame);Counta sine or cosine evaluation as costing 5 multiply times. Countadditionsas costing 0.333 multiply times and assignment statements as 0.2 multiply times.02
L1
01
{T}
ZTxs
94Chapter 3Manipulator kinematicsCounta square-root computation as costing 4 multiply times. Howmany multiplytimes do you need?3.6 [2011 Write a subroutine to compute the kinematics of the cylindrical arm inExample 3.4. Use the procedure heading (or equivalent in C)Procedure KIN(VAR jointvar: vec3; VAR wreib: frames);Count a sine or cosine evaluation as costing 5 multiply times. Count additionsas costing 0.333 multiply times and assignment statements as 0.2 multiply times.Count a square-root computation as costing 4 multiply times. How many multiplytimes do you need?3.7 [22] Write a subroutine to compute the kinematics of the arm in Exercise 3.3. Usethe procedure heading (or equivalent in C)Procedure KIN(VAR theta: vec3; VAR wreib: frame);Count a sine or cosine evaluation as costing 5 multiplytimes. Count additionsas costing 0.333 multiply times and assignment statements as 0.2 multiply times.Count a square-root computation as costing 4 multiply times. How many multiplytimes do you need?3.8 [13] In Fig. 3.31, the location of the tool, T,is not accurately known. Using forcecontrol, the robot feels around with the tool tip until it inserts it into the socket(or Goal) at locationT. Once in this "calibration" configuration (in which {G}and {T) are coincident), the position of the robot, is figured out by readingthe joint angle sensors and computing the kinematics. Assuming T and T areknown, give the transform equation to compute the unknown tool frame, T.
FIGURE 3.31:Determination of the tool frame (Exercise 3.8).{B }
Exercises95Tip
FIGURE 3.32: Two-link arm with frame assignments (Exercise 3.9).
3.9[11]For the two-link manipulator shown in Fig. 3.32(a), the link-transformationmatrices,andwere constructed. Their product isc91c02 —c91s92 11c010Ts01c92 —s01s02 —c01 11s012—sO2c02000001The link-frame assignments used are indicated in Fig. 3.32(b). Note that frame{0) is coincident with frame {1} when 01 = 0.The length of the second link is 12.Find an expression for the vector 0 which locates the tip of the arm relativeto the {0} frame.3.10[39]Derive kinematic equations for the Yasukawa Motoman robot (seeSection 3.7) that compute the position and orientation of the wrist frame directlyfrom actuator values, rather than by first computing the joint angles. A solutionis possible that requires only 33 multiplications, two square roots, and six sine or cosine evaluations.3.11[17]Figure 3.33 shows the schematic of a wrist which has three intersecting axes that are not orthogonal. Assign link frames to this wrist (as if it were a 3-DOF manipulator), and give the link parameters.3.12[08]Can an arbitrary rigid-body transformation always be expressed with fourparameters (a, a, d, 0) in the form of equation (3.6)?3.13[15]Show the attachment of link frames for the 5-DOF manipulator shownschematically in Fig. 3.34.3.14[20]As was stated, the relative position of any two lines in space can be givenwith two parameters, a and a, where a is the length of the common perpendicularjoining the two and a is the angle made by the two axes when projected ontoa plane normal to the common perpendicular. Given a line defined as passingthrough point p with unit-vector direction th and a second passing through pointq with unit-vector direction ii, write expressions for a and a.3.15[15]Show the attachment of link frames for the 3-DOF manipulator shownschematically in Fig. 3.35.3.16[15]Assign link frames to the RPR planar robot shown in Fig. 3.36, and give thelinkage parameters.3.17 [15] Show the attachment of link frames on the three-link robot shown in Fig. 3.37.(a) (b)
[15] Show the attachment of link frames on the three-link robot shown in Fig. 3.38.[15] Show the attachment of link frames on the three-link robot shown in Fig. 3.39.[15] Show the attachment of link frames on the three-link robot shown in Fig. 3.40.[15] Show the attachment of link frames on the three-link robot shown in Fig. 3.41.[18] Show the attachment of link frames on the P3R robot shown in Fig. 3.42.Given your frame assignments, what are the signs of d2, d3, and a2?96Chapter 3Manipulator kinematics
FIGURE 3.33:3R nonorthogonal-axis robot (Exercise 3.11).
S/\/\/
FIGURE 3.34:Schematic of a 2RP2R manipulator (Exercise 3.13).
3.183.193.203.213.22
FIGURE 3.35:Schematic of a 3R manipulator (Exercise 3.15).
FIGURE 3.36:RPR planar robot (Exercise 3.16).Exercises97
FIGURE 3.37:Three-linkRRPmanipulator (Exercise 3.17).034
d3
07
01
98Chapter 3Manipulator kinematics
--fl---
FIGURE 3.38:Three-link RRR manipulator (Exercise 3.18).
d7
FIGURE3.39: Three-link RPPmanipulator (Exercise 3.19).
d1
FIGURE 3.40:Three-link PRR manipulator (Exercise 3.20).03
03
Programming exercise (Part 3) 99
FIGURE 3.42:Schematic of a P3R manipulator (Exercise 3.22).
PROGRAMMING EXERCISE (PART 3)1. Write a subroutine to compute the kinematics of the planar 3R robot in Exam-ple 3.3—that is, a routine with the joint angles' values as input, and a frame (thewrist frame relative to the base frame) as output. Use the procedure heading (orequivalent in C)Proceduie KIN(VAR theta: vec3; VAR wreib: franie);where "wreib" is the wrist frame relative to the base frame, The type "frame"consists of a 2 x 2 rotation matrix and a 2 x 1 position vector. If desired, you mayrepresent the frame with a 3 x 3 homogeneous transform in which the third row is[0 0 1]. (The manipulator data are 11 =12=0.5meters.)d3
FIGURE 3.41: Three-link PPP manipulator (Exercise 3.21).'I
100Chapter 3Manipulator kinematics
2.Write a routine that calculates where the tool is, relative to the station frame. Theinput to the routine is a vector of joint angles:ProcedureWHERE(VAR theta: vec3; VARtrels: frame);Obviously, WI-IFRE must make use of descriptions of the tool frame and therobot base frame in order to compute the location of the tool relative to the stationframe. The values ofT andT should be stored in global memory (or, as asecond choice, you may pass them as arguments in 'WHERE).3. A tool frame and a station frame for a certain task are defined as follows by theuser:=[xy9]=[0.1 0.2 30.0],=[xy 9] =[—0.10.3 0.0].Calculate the position and orientation of the tool relative to the station frame forthe following three configurations (in units of degrees) of the arm:93] =[0.090.0 —90.0],
93] =[—23.6—30.3 48.0],[°i03]=[130.040.0 12.0].
MATLABEXERCISE 3Thisexercise focuses on DII parameters and on the forward-pose (position and orien-tation) kinematics transformation for the planar 3-DOF, 3R robot (of Figures 3.6 and3.7). The following fixed-length parameters are given: L1 = 4,L7 =3,and L3 =2(m).a) Derive the DH parameters. You can check your results against Figure 3.8.b) Derive the neighboring homogeneous transformation matrices i =1,2, 3.These are functions of the joint-angle variables i =1,2, 3. Also, derive theconstantby inspection: The origin of {H} is in the center of the gripper fingers,and the orientation of {H} is always the same as the orientation of {3}.c) Use Symbolic MATLAB to derive the forward-pose kinematics solution T andT symbolically (as a function of Abbreviate your answer, using s1 = sin(91),cos(01), and so on. Also, there is a ++93)simplification,by using sum-of-angle formulas, that is due to the parallel Z1 axes. Calculate the forward-posekinematics results (bothandvia MATLAB for the following input cases:i) e=91T={00 O}T•ii) 0 ={10°20° 300}Tiii) 0 ={90°90°Forall three cases, check your results by sketching the manipulator configurationand deriving the forward-pose kinematics transformation by inspection. (Think ofthe definition of °HT in terms of a rotation matrix and a position vector.) Includeframes {H}, {3), and {0} in your sketches.d) Check all your results by means of the Corke MATLAB Robotics Toolbox. Tryfunctions link() ,robotQ,andfkineQ.
CHAPTER4Inverse manipulator kinematics
4.1INTRODUCTION4.2SOLVABILITY4.3THE NOTION OF MANIPULATOR SUBSPACE WHEN n <64.4ALGEBRAIC VS. GEOMETRIC4.5ALGEBRAIC SOLUTION BY REDUCTION TO POLYNOMIAL4.6PIEPER'S SOLUTION WHEN THREE AXES INTERSECT4.7EXAMPLES OF INVERSE MANIPULATOR KINEMATICS4.8THE STANDARD FRAMES4.9SOLVE-ING A MANIPULATOR4.10 REPEATABILITY AND ACCURACY4.11 COMPUTATIONAL CONSIDERATIONS
4.1INTRODUCTIONInthe last chapter, we considered the problem of computing the position andorientation of the tool relative to the user's workstation when given the joint anglesof the manipulator. In this chapter, we investigate the more difficult converseproblem: Given the desired position and orientation of the tool relative to thestation, how do we compute the set of joint angles which wifi achieve this desiredresult? Whereas Chapter 3 focused on the direct kinematics of manipulators, herethe focus is the inverse kinematics of manipulators.Solving the problem of finding the required joint angles to place the toolframe, {T}, relative to the station frame, {S}, is split into two parts. First, frametransformations are performed to find the wrist frame, {W}, relative to the baseframe, {B}, and then the inverse kinematics are used to solve for the joint angles.4.2SOLVABILITYTheproblem of solving the kinematic equations of a manipulator is a nonlinear one.Given the numerical value of T, we attempt to find values of Considerthe equations given in (3.14). In the case of the PUMA 560 manipulator, the precisestatement of our current problem is as follows: Given as sixteen numeric values(four of which are trivial), solve (3.14) for the six joint angles through £96.For the case of an arm with six degrees of freedom (like the one correspondingto the equations in (3.14)), we have 12 equations and six unknowns. However,among the 9 equations arising from the rotation-matrix portion of only 3 areindependent. These, added to the 3 equations from the position-vector portion of
101 
102Chapter4Inverse manipulator kinematicsgive6 equations with six unknowns. These equations are nonlinear, transcendentalequations, which can be quite difficult to solve. The equations of (3.14) are those of arobot that had very simple link parameters—many of the were 0 or ±90 degrees.Many link offsets and lengths were zero. It is easy to imagine that, for the case of ageneral mechanism with six degrees of freedom (with all link parameters nonzero)the kinematic equations would be much more complex than those of (3.14). As withany nonlinear set of equations, we must concern ourselves with the existence ofsolutions, with multiple solutions, and with the method of solution.Existenceof solutionsThequestion of whether any solution exists at all raises the question of themanipulator's workspace. Roughly speaking, workspace is that volume of space thatthe end-effector of the manipulator can reach. For a solution to exist, the specifiedgoal point must lie within the workspace. Sometimes, it is useful to consider twodefinitions of workspace: Dextrous workspace is that volume of space that the robotend-effector can reach with all orientations. That is, at each point in the dextrousworkspace, the end-effector can be arbitrarily oriented. The reachable workspace isthat volume of space that the robot can reach in at least one orientation. Clearly,the dextrous workspace is a subset of the reachable workspace.Consider the workspace of the two-link manipulator in Fig. 4.1. If =12,thenthe reachable workspace consists of a disc of radius The dextrous workspaceconsists of only a single point, the origin. If l2, then there is no dextrousworkspace, and the reachable workspace becomes a ring of outer radius +12andinner radius—121.Inside the reachable workspace there are two possibleorientations of the end-effector. On the boundaries of the workspace there is onlyone possible orientation.These considerations of workspace for the two-link manipulator have assumedthat all the joints can rotate 360 degrees. This is rarely true for actual mechanisms.When joint limits are a subset of the full 360 degrees, then the workspace is obviouslycorrespondingly reduced, either in extent, or in the number of possible orientations
FIG U RE 4.1: Two-link manipulator with link lengths l1 and 12.LI
Section 4.2Solvability103attainable.For example, if the arm in Fig. 4.1 has full 360-degree motion for 01, butonly 0 <02 <180°, then the reachable workspace has the same extent, but only oneorientation is attainable at each point.When a manipulator has fewer than six degrees of freedom, it cannot attaingeneral goal positions and orientations in 3-space. Clearly, the planar manipulatorin Fig. 4.1 cannot reach out of the plane, so any goal point with a nonzero Z-coordinate value can be quickly rejected as unreachable. In many realistic situations,manipulators with four or five degrees of freedom are employed that operate outof a plane, but that clearly cannot reach general goals. Each such manipulatormust be studied to understand its workspace. In general, the workspace of such a robot is a subset of a subspace that can be associated with any particular robot.Given a general goal-frame specification, an interesting problem arises in connectionwith manipulators having fewer than six degrees of freedom: What is the nearestattainable goal frame?Workspace also depends on the tool-frame transformation, because it is usuallythe tool-tip that is discussed when we speak of reachable points in space. Generally,the tool transformation is performed independently of the manipulator kinematicsand inverse kinematics, so we are often led to consider the workspace of the wristframe, {W}. For a given end-effector, a tool frame, {T}, is defined; given a goal frame,{G}, the corresponding {W} frame is calculated, and then we ask: Does this desiredposition and orientation of {W} lie in the workspace? In this way, the workspacethat we must concern ourselves with (in a computational sense) is different from theone imagined by the user, who is concerned with the workspace of the end-effector(the {T} frame).If the desired position and orientation of the wrist frame is in the workspace,then at least one solution exists.MultiplesolutionsAnotherpossible problem encountered in solving kinematic equations is that ofmultiple solutions. A planar arm with three revolute joints has a large dextrousworkspace in the plane (given "good" link lengths and large joint ranges), becauseany position in the interior of its workspace can be reached with any orientation.Figure 4.2 shows a three-link planar arm with its end-effector at a certain position
FIGURE 4.2: Three-link manipulator. Dashed lines indicate a second solution.
104Chapter 4Inverse manipulator kinematics
FIGURE 4.3: One of the two possible solutions to reach point B causesa collision.
and orientation. The dashed lines indicate a second possible configuration in whichthe same end-effector position and orientation are achieved.The fact that a manipulator has multiple solutions can cause problems, becausethe system has to be able to choose one. The criteria upon which to base a decisionvary, but a very reasonable choice would be the closest solution.For example, if themanipulator is at point A, asin Fig. 4.3, and we wish to move it to point B, agoodchoice would be the solution that minimizes the amount that each joint is requiredto move. Hence, in the absence of the obstacle, the upper dashed configuration inFig. 4.3 would be chosen. This suggests that one input argument to our kinematicinverse procedure might be the present position of the manipulator. In this way,if there is a choice, our algorithm can choose the solution closest in joint-space.However, the notion of "close" might be defined in several ways. For example,typical robots could have three large links followed by three smaller, orienting linksnear the end-effector. In this case, weights might be applied in the calculation ofwhich solution is "closer" so that the selection favors moving smaller joints ratherthan moving the large joints, when a choice exists. The presence of obstacles mightforce a "farther" solution to be chosen in cases where the "closer" solution wouldcause a collision—in general, then, we need to be able to calculate all the possiblesolutions. Thus, in Fig. 4.3, the presence of the obstacle implies that the lower dashedconfiguration is to be used to reach point B.Thenumber of solutions depends upon the number ofjoints in the manipulatorbut is also a function of the link parameters (a1, a1, and fora rotary jointmanipulator) and the allowable ranges of motion of the joints. For example, thePUMA 560canreach certain goals with eight different solutions. Figure 4.4 showsfour solutions; all place the hand with the same position and orientation. For eachsolution pictured, there is another solution in which the last three joints "ifip" to analternate configuration according to the following formulas:94 = 94 + 18095 = (4.1)=+ 1800.So, in total, there can be eight solutions for a single goal. Because of limits on jointranges, some of these eight could be inaccessible.A
Section 4.2Solvability105
FIGURE 4.4:Foursolutionsof the PUMA560.
In general, the more nonzero link parameters there are, the more ways therewifi be to reach a certain goal. For example, consider a manipulator with sixrotational joints. Figure 4.5 shows how the maximum number of solutions is relatedto how many of the link length parameters (the are zero. The more that arenonzero, the bigger is the maximum number of solutions. For a completely generalrotary-jointed manipulator with six degrees of freedom, there are up to sixteensolutions possible [1, 6].Methodof solutionUnlikelinear equations, there are no general algorithms that may be employed tosolve a set of nonlinear equations. In considering methods of solution, it wifi be wiseto define what constitutes the "solution" of a given manipulator.A manipulator wifi be considered solvable if the joint variables can bedetermined by an algorithm that allows one to determine all the sets of jointvariables associated with a given position and orientation [2].
106Chapter 4Inverse manipulator kinematics
a1Number of solutionsa1a3a5=Oa3=a50a3=O
FIGURE 4.5: Number of solutions vs. nonzero a1.
The main point of this definition is that we require, in the case of multiplesolutions, that it be possible to calculate all solutions. Hence, we do not considersome numerical iterative procedures as solving the manipulator—namely, thosemethods not guaranteed to find all the solutions.We wifi split all proposed manipulator solution strategies into two broadclasses: closed-form solutions and numerical solutions. Because of their iterativenature, numerical solutions generally are much slower than the correspondingclosed-form solution; so much so, in fact, that, for most uses, we are not interestedin the numerical approach to solution of kinematics. Iterative numerical solution tokinematic equations is a whole field of study in itself (see [6,11,12]) and is beyondthe scope of this text.We wifi restrict our attention to closed-form solution methods. In this context,"closed form" means a solution method based on analytic expressions or on thesolution of a polynomial of degree 4 or less, such that noniterative calculations sufficeto arrive at a solution. Within the class of closed-form solutions, we distinguish twomethods of obtaining the solution: algebraic and geometric. These distinctions aresomewhat hazy: Any geometric methods brought to bear are applied by means ofalgebraic expressions, so the two methods are similar. The methods differ perhapsin approach only.A major recent result in kinematics is that, according to our definition ofsolvability, all systems with revolute and prismatic joints having a total of six degreesof freedomin a single series chain are solvable. However, this general solution isa numerical one. Only in special cases can robots with six degrees of freedom besolved analytically. These robots for which an analytic (or closed-form) solutionexists are characterized either by having several intersecting joint axes or by havingmanyequal to 0 or ±90 degrees. Calculating numerical solutions is generally timeconsuming relative to evaluating analytic expressions; hence, it is considered veryimportant to design a manipulator so that a closed-form solution exists. Manipulatordesigners discovered this very soon, and now virtually all industrial manipulatorsare designed sufficiently simply that a closed-form solution can be developed.A sufficient condition that a manipulator with six revolute joints have a closed-form solution is that three neighboring joint axes intersect at a point. Section 4.6discusses this condition. Almost every manipulator with six degrees of freedom builttoday has three axes intersecting. For example, axes 4, 5, and 6 of the PUMA 560intersect.
Section 4.3The notion of manipulator subspace when n < 61074.3THE NOTION OF MANIPULATOR SUBSPACE WHEN n <6Theset of reachable goal frames for a given manipulator constitutes its reachableworkspace. For a manipulator with n degrees of freedom (where ii < 6), thisreachable workspace can be thought of as a portion of an n-degree-of-freedomsubspace. In the same manner in which the workspace of a six-degree-of-freedommanipulator is a subset of space, the workspace of a simpler manipulator is a subsetof its subspace. For example, the subspace of the two-link robot of Fig. 4.1 is a plane,but the workspace is a subset of this plane, namely a circle of radius li + 12 for the case that=12.One way to specify the subspace of an n-degree-of-freedom manipulator is togive an expression for its wrist or tool frame as a function of n variables that locate it.If we consider these n variables to be free, then, as they take on all possible values,the subspace is generated.
EXAMPLE4.1Givea description of the subspace of for the three-link manipulator fromChapter 3, Fig. 3.6.The subsp ace ofT is given by
0.0XBT=0.0Y(42 W0.00.01.0 0.0'0001where x and y give the position of the wrist and describes the orientation of theterminal link. As x, y, andare allowed to take on arbitrary values, the subspaceis generated. Any wrist frame that does not have the structure of (4.2) lies outsidethe subspace (and therefore lies outside the workspace) of this manipulator. Linklengths and joint limits restrict the workspace of the manipulator to be a subset of this subspace.
FIGURE 4.6: A polar two-link manipulator.
x
y01108Chapter 4Inverse manipulator kinematics
(4.3)EXAMPLE 4.2Give a description of the subspace of for the polar manipulator with two degreesof freedom shown in Fig. 4.6. We have
=wherex and y can take any values. The orientation is restricted because the °22 axismust point in a direction that depends on x and y. The axisalways points down,and the 0X2 axis can be computed as the cross product x022.Interms of x andy, we have
02=_________
Thesubspace can therefore be given as1.y+0(4.4)
(4.5)
Usually, in defining a goal for a manipulator with n degrees of freedom, weuse n parameters to specify the goal. If, on the other hand, we give a specification ofa full six degrees of freedom, we wifi not in general be able to reach the goal withan n <6manipulator. In this case, we might be interested instead in reaching a goalthat lies in the manipulator's subspace and is as "near" as possible to the originaldesired goal.Hence, when specifying general goals for a manipulator with fewer than sixdegrees of freedom, one solution strategy is the following:1. Given a general goal frame, T, compute a modified goal frame, T,suchthatlies in the manipulator's subspace and is as "near" to as possible.A definition of "near" must be chosen.2. Compute the inverse kinematics to find joint angles using Tas the desiredgoal. Note that a solution stifi might not be possible if the goal point is not inthe manipulator's workspace.It generally makes sense to position the tool-frame origin to the desired locationand then choose an attainable orientation that is near the desired orientation. Aswe saw in Examples 4.1 and 4.2, computation of the subspace is dependent onmanipulator geometry. Each manipulator must be individually considered to arriveat a method of making this computation.
Section 4.4Algebraic vs. geometric109Section4.7 gives an example of projecting a general goal into the subspace of amanipulator with five degrees of freedom in order to compute joint angles that willresult in the manipulator's reaching the attainable frame nearest to the desired one.4.4ALGEBRAIC VS. GEOMETRICAsan introduction to solving kinematic equations, we will consider two differentapproaches to the solution of a simple planar three-link manipulator.AlgebraicsolutionConsiderthe three-link planar manipulator introduced in Chapter 3. It is shownwith its link parameters in Fig. 4.7.Following the method of Chapter 3, we can use the link parameters easily tofind the kinematic equations of this arm:
ia1—1d1
1000Ui
20L1002
30L7003
FIGURE 4.7:Three-linkplanarmanipulator and its link parameters.C123—S1230.011c1 + 12c12BTW— 0T—— 3—S1230.000.00.01.00011s1 + 12s120.01(4.6)
110Chapter4Inverse manipulator kinematicsTo focusour discussion on inverse kinematics, we wifi assume that the necessarytransformations have been performed so that the goal point is a specification of thewrist frame relative to the base frame, that is, Because we are working witha planar manipulator, specification of these goal points can be accomplished mosteasily by specifying three numbers: x, y, and whereis the orientation of link 3in the plane (relative to the +X axis). Hence, rather than giving a general Tas agoal specification, we wifi assume a transformation with the structure0.0XBT=5çb0.0Y(47W0.00.01.0 0.00001All attainable goals must lie in the subspace implied by the structure of equa-tion (4.7). By equating (4.6) and (4.7), we arrive at a set of four nonlinear equationsthat must be solved for and 93:=c123, (4.8)Sc/, =s123, (4.9)x =11c1+ l7c12, (4.10)y =+ l2s12. (4.11)We now begin our algebraic solution of equations (4.8) through (4.11). If wesquare both (4.10) and (4.11) and add them, we obtainx2 + y2 = + + 2l1l2c2, (4.12)where we have made use of=—= C157 + Sic2. (4.13)Solving (4.12) for c2, we obtainx2+ y2_12_ 1212(4.14)21112In order for a solution to exist, the right-hand side of (4.14) must have a valuebetween —1 and 1. In the solution algorithm, this constraint would be checked atthis time to find out whether a solution exists. Physically, if this constraint is notsatisfied, then the goal point is too far away for the manipulator to reach.Assuming the goal is in the workspace, we write an expression for as(4.15)Finally, we computeusing the two-argument arctangent routine1:=Atan2(s2,c2). (4.16)1See Section 2.8.
Section 4.4Algebraic vs. geometric 111Thechoice of signs in (4.15) corresponds to the multiple solution in which we can choose the "elbow-up" or the "elbow-down" solution. In determining we haveused one of the recurring methods for solving the type of kinematic relationshipsthat often arise, namely, to determine both the sine and cosine of the desired jointangle and then apply the two-argument arctangent. This ensures that we have foundall solutions and that the solved angle is in the proper quadrant.Having foundwe can solve (4.10) and (4.11) for 01. We write (4.10) and(4.11) in the formx=k1c1—k2s1, (4.17)y =k1s1+ k2c1, (4.18)where=+ 12c2,=12s2. (4.19)In order to solve an equation of this form, we perform a change of variables.Actually, we are changing the way in which we write the constants k1 andk2.If_________
r=+ (4.20)andy =Atan2(k2,k1),then=rcosy,k2=rsiny. (4.21)Equations (4.17) and (4.18) can now be written as=cosycos91—sinysin01, (4.22)=cosysin91+sinycos01, (4.23)socos(y + Oi)= (4.24)sin(y += (4.25)
Usingthe two-argument arctangent, we gety +=Atan2= Atan2(y,x),(4.26)and so01 =Atan2(y,x) —Atan2(k2,k1).(4.27)
112Chapter 4Inverse manipulator kinematicsNotethat, when a choice of sign is made in the solution of above,itwifi cause a sign change in k2, thus affecting The substitutions used, (4.20)and (4.21), constitute a method of solution of a form appearing frequently inkinematics—namely, that of (4.10) or (4.11). Note also that, if x = y=0,then(4.27) becomes undefined—in this case, is arbitrary.Finally, from (4.8) and (4.9), we can solve for the sum of through 93:++ 93 = Atan2(s4,c4)=(4.28)From this, we can solve for 03, because we know the first two angles. It is typicalwith manipulators that have two or more links moving in a plane that, in the courseof solution, expressions for sums of joint angles arise.In summary, an algebraic approach to solving kinematic equations is basicallyone of manipulating the given equations into a form for which a solution is known.It turns out that, for many common geometries, several forms of transcendentalequations commonly arise. We have encountered a couple of them in this precedingsection. In Appendix C, more are listed.GeometricsolutionIna geometric approach to finding a manipulator's solution, we try to decomposethe spatial geometry of the arm into several plane-geometry problems. For manymanipulators (particularly when the =0or ±90) this can be done quite easily.Joint angles can then be solved for by using the tools of plane geometry [7]. For thearm with three degrees of freedom shown in Fig. 4.7, because the arm is planar, wecan apply plane geometry directly to find a solution.Figure 4.8 shows the triangle formed by 11, 12, and the line joining the origin offrame {0} with the origin of frame {3}. The dashed lines represent the other possibleconfiguration of the triangle, which would lead to the same position of the frame(3}. Considering the solid triangle, we can apply the "law of cosines" to solve for 92:(4.29)
FIGURE4.8:Planegeometryassociated with a three-link planar robot.x2 +=+—21112cos(180 +
x
Section 4.5Algebraic solution by reduction to polynomial 113Now;cos(180 +=— cos(92),so we havex2 + y2 _12_ 12c2=21112(4.30)12In order for this triangle to exist, the distance to the goal point ,/x2 + y2 must beless than or equal to the sum of the link lengths, 11 + 12. This condition would bechecked at this point in a computational algorithm to verify existence of solutions.This condition is not satisfied when the goal point is out of reach of the manipulator.Assuming a solution exists, this equation is solved for that value of that liesbetween 0 and —180 degrees, because only for these values does the triangle inFig. 4.8 exist. The other possible solution (the one indicated by the dashed-linetriangle) is found by symmetry to be =Tosolve forwe find expressions for angles andas indicated in Fig. 4.8.First, $maybe in any quadrant, depending on the signs of x and y. So we must usea two-argument arctangent:$= Atan2(y,x). (4.31)We again apply the law of cosines to findx2 +y2 + 12_1212(4.32)211\/x2 + y2Here, the arccosine must be solved so that 0 < <180°, in order that the geometrywhich leads to (4.32) will be preserved. These considerations are typical when usinga geometric approach—we must apply the formulas we derive only over a range ofvariables such that the geometry is preserved. Then we have=$ ± (4.33)where the plus sign is used if <0 and the minus sign if 02 > 0.We know that angles in a plane add, so the sum of the three joint angles mustbe the orientation of the last link:01 + 02 + 03 = (4.34)This equation is solved for 03 to complete our solution.4.5ALGEBRAIC SOLUTION BY REDUCTION TO POLYNOMIALTranscendentalequations are often difficult to solve because, even when there is onlyone variable (say, 9), it generally appears as sin 0 and cos 9. Making the followingsubstitutions, however, yields an expression in terms of a single variable, u:0u =tan
1u2cos 0 = , (4.35) 1 + u22usin0=1+u2
114Chapter 4Inverse manipulator kinematicsThis isa very important geometric substitution used often in solving kinematicequations. These substitutions convert transcendental equations into polynomialequations in u. Appendix A lists these and other trigonometric identities.
EXAMPLE4.3Convertthe transcendental equationacos8+bsin9 =c (4.36)into a polynomial in the tangent of the half angle, and solve for 0.Substituting from (4.35) and multiplying through by 1 + u2, we havea(1 —u2)+ 2bu =c(1+ u2).(437)Collecting powers of ityields(a + c)u2— 2bu+ (ca)=0,(4.38)which is solved by the quadratic formula:b±,1b2+a2_c2 (4.39)a+cHence,____________
0=2tan1 (4.40)a±c/Shouldthe solution for u from (4.39) be complex, there is no real solution tothe original transcendental equation. Note that, if a + c = 0,the argument of thearctangent becomes infinity and hence 0 = 180°.In a computer implementation,this potential division by zero should be checked for ahead of time. This situationresults when the quadratic term of (4.38) vanishes, so that the quadratic degeneratesinto a linear equation.
Polynomials up to degree four possess closed-form solutions [8, 9], so manip-ulators sufficiently simple that they can be solved by algebraic equations of thisdegree (or lower) are called closed-form-solvable manipulators.4.6PIEPER'S SOLUTION WHEN THREE AXES INTERSECTAsmentioned earlier, although a completely general robot with six degrees offreedom does not have a closed-form solution, certain important special casescan be solved. Pieper [3, 4] studied manipulators with six degrees of freedom inwhich three consecutive axes intersect at a point.2 In this section, we outline themethod he developed for the case of all six joints revolute, with the last three axesintersecting. His method applies to other configurations, which include prismatic2lncluded in this family of manipulators are those with three consecutive parallel axes, because theymeet at the point at infinity.
Section 4.6Pieper's solution when three axes intersect 115joints,and the interested reader should see [4]. Pieper's work applies to the majorityof commercially available industrial robots.When the last three axes intersect, the origins of link frames (4), {5}, and {6}are all located at this point of intersection. This point is given in base coordinates asx==(4.41)1or, using the fourth colunm of (3.6) for i = 4,as
= (4.42)
or asfl (93)= (4.43)
wherea3f2—d4sa3 (4.44) 311Using (3.6) forin (4.44) yields the following expressions for f1:=a3c3+ d4sa3s3 + a2,f2 =a3ca2s3d4sa3ca2c3d4sa2ca3—d3sa2,(4.45)=—+ d4ca2ca3 +Using (3.6) forandin (4.43), we obtainc1g1 —s1g2on—s1g1+c1g240RGg31whereg1 =c9f1—s2f2+a1,
g2=s2coi1f1+c2ca1f2——d2sa1,(4.47)g3 =+ c2sa1f2 ++ d2ca1.We now write an expression for the squared magnitude of which we wifidenote as r =x2+ y2 + z2, and which is seen from (4.46) to be722 (4.48)
116Chapter 4Inverse manipulator kinematicsso,using (4.47) for thewe haver=+++++ 2d2f3 + 2a1(c2f1 —s2f2).(4.49)We now write thisequation,along with the Z-component equation from (4.46), as asystem of two equations in the formr= (kjc2+ k2s2)2a1 + k3,z =(k1s2—k2c2)sa1+ k4, (4.50)wherek1 =k2=—f2,(4.51)=+Equation (4.50) is useful because dependence on has been eliminated and becausedependence ontakes a simple form.Now let us consider the solution of (4.50) for 03. We distinguish three cases:1.If=0,then we have r =k3,where r is known. The right-hand side (k3) is afunction of 03 only. After the substitution (4.35), a quadratic equation in tanmay be solved for 03.2. If sa1 =0,then we have z =k4,where z is known. Again, after substitutingvia (4.35), a quadratic equation arises that can be solved for 03.3. Otherwise, eliminate s2 and c2 from (4.50) to obtain
"2+4) (4.52) 4a1sci1This equation, after the (4.35) substitution for 03, results in an equation ofdegree 4, which can be solved forHaving solved forwe can solve (4.50) for 02 and (4.46) forTo complete our solution, we need to solve for 04, 05, and These axesintersect, so these joint angles affect the orientation of only the last link. We cancompute them from nothing more than the rotation portion of the specified goal,Having obtained02, and 03, we can compute bywhich notation wemean the orientation of link frame {4} relative to the base frame when 04 = 0.Thedesired orientation of {6} differs from this orientation only by the action of the lastthree joints. Because the problem was specified as given we can compute=60R. (4.53)
31t is helpful to note that++=++++ 2d4d3ccs3 + 2a2a3c3 + 2a2d4sa3s3.
Section 4.7Examples of inverse manipulator kinematics 117For many manipulators, these last three angles can be solved for by usingexactly the Z—Y—Z Euler angle solution given in Chapter 2, applied to 194=0 For any manipulator (with intersecting axes 4, 5, and 6), the last three joint anglescan be solved for as a set of appropriately defined Euler angles. There are alwaystwo solutions for these last three joints, so the total number of solutions for themanipulator will be twice the number found for the first three joints.4.7EXAMPLES OF INVERSE MANIPULATOR KINEMATICSIn this section, we work out the inverse kinematics of two industrial robots. Onemanipulator solution is done purely algebraically; the second solution is partiallyalgebraic and partially geometric. The following solutions do not constitute acookbook method of solving manipulator kinematics, but they do show many ofthe common manipulations likely to appear in most kinematic solutions. Note thatPieper's method of solution (covered in the preceding section) can be used for thesemanipulators, but here we choose to approach the solution a different way, to giveinsight into various available methods.TheUnimation PUMA 560Asan example of the algebraic solution technique applied to a manipulator with sixdegrees of freedom, we will solve the kinematic equations of the PUMA 560, whichwere developed in Chapter 3. This solution is in the style of [5].We wish to solver11 r17r13r21r23r31r32 r330001= (4.54)forwhenis given as numeric values.A restatement of (4.54) that puts the dependence on on the left-hand sideof the equation is= (4.55)Invertingwewrite (4.55) as
c1s1 0 0r11 r12 r13—S1C1 00r21 r22 (4 56 001 0r31 r32 r3300010001whereis given by equation (3.13) developed in Chapter 3. This simple techniqueof multiplying each side of a transform equation by an inverse is often used toadvantage in separating out variables in the search for a solvable equation.Equating the (2, 4) elements from both sides of (4.56), we have+=d3. (4.57)
118Chapter 4Inverse manipulator kinematicsTosolve an equation of this form, we make the trigonometric substitutions
=psinq5, (4.58)where
P= (4.59)Substituting (4.58) into (4.57), we obtain
ClScb— S1C4 — —.
Fromthe difference-of-angles formula,= (4.61)Hence,Id2—= ±\/1— (4.62)and so"d/d2\
.(4.63) ppFinally, the solution formay be written as=Atan2(d3, ±,,/p2+—(4.64)Note that we have found two possible solutions for corresponding to the plus-or-minus sign in (4.64). Now that is known, the left-hand side of (4.56) is known.If we equate both the (1,4) elements and the (3,4) elements from the two sides of(4.56), we obtain+=ci3c23 — d4s23+ a2c2,= a3s23+ d4c,3 + a2s2. (4.65)If we square equations (4.65) and (4.57) and add the resulting equations, we obtain
a3c3 —d4s3=K, (4.66)whereK=A.(4.67) 2a2
Section 4.7Examples of inverse manipulator kinematics 119Notethat dependence onhas been removed from (4.66). Equation (4.66) is ofthe same form as (4.57) and so can be solved by the same kind of trigonometricsubstitution to yield a solution for 93:93 = Atan2(a3,d4) —Atan2(K,+—K2).(4.68)The plus-or-minus sign in (4.68) leads to two different solutions for 03. If we consider(4.54) again, we can now rewrite it so that all the left-hand side is a function of onlyknowns and 92:= (4.69)orC1C23S1C23—a7c3r11PxC1S23S1S23C23a2s3r23=(4.70) —s1c10—d3r32r33600010001whereis given by equation (3.11) developed in Chapter 3. Equating boththe (1,4) elements and the (2,4) elements from the two sides of (4.70), we get+——a2c3=a3,
——C23p+ a2s3 =d4.(4.71)These equations can be solved simultaneously for s23 and c23, resulting in(—a3 —++ s1p3,) (a2s3d4)S23=+(a2s3—(a3+ a2c3)+ = .(4.72) ++The denominators are equal and positive, so we solve for the sum of and 93as= Atan2[(—a3—a2c3)p—+—a2s3),(a2s3(a3+ a2c3)+(4.73)Equation (4.73) computes four values of 023, according to the four possible combina-tions of solutions forand 93,then,four possible solutions forare computed as
97=— 03, (4.74)where the appropriate solution for 93 is used when forming the difference.Now the entire left side of (4.70) is known. Equating both the (1,3) elementsand the (3,3) elements from the two sides of (4.70), we getr13 C1 C23 + r23s1c23 —r33s23=—c4s5,—r13s1 +r23c1=s4s5.(4.75)As long as0, we can solve for 94 as
94= Atan2(—r13s1+ r23c1, —r13c1c23 —r23s1c23+ r33s73).(4.76)
120Chapter 4Inverse manipulator kinematicsWhen 85=0,the manipulator is in a singular configuration in which joint axes 4 and6line upand cause the same motion of the last link of the robot. In this case, all thatmatters (and all that can be solved for) is the sum or difference of 84 and Thissituation is detected by checking whether both arguments of the Atan2 in (4.76) arenear zero. If sO, 84 is chosen arbitrarily,4 and when is computed later, it will becomputed accordingly.If we consider (4.54) again, we can now rewrite it so that all the left-hand sideis a function of only knowns and 94, by rewriting it as= (4.77)whereis given byc1c23c4+s1s4S1C23C4C1S4S23C4 —a2c3c4+d3s4—a3c4—c1c23s4 + s1c4 —s1c23s4 — c1c4s23s4a2c3s4 + d3c4 + a3s4 (4 78) —c1s23—s1s23—C23— d40001andis given by equation (3.10) developed in Chapter 3. Equating both the (1,3)elements and the (3,3) elements from the two sides of (4.77), we getr13(c1c23c4 + s1s4) + r23(s1c73c4 — c1s4) — r33(s93c4) = —s5,r13(c1s23) + r23(—s1s23)+ r33(—c23) =c5.(4.79)Hence, we can solve for 05 as95 =Atan2(s5,c5), (4.80)where s5 and c5 are given by (4.79).Applying the same method one more time, we compute and write(4.54) in the form= (4.81)Equating both the (3,1) elements and the (1,1) elements from the two sides of (4.77)as we have done before, we get=Atan2(s6,c6), (4.82)where
s6= —r11(c1c23s4 — s1c4)r21(s1c23s4 + c1c4)+ r31(s23s4),c6 =+ s1s4)c5 —c1s73s5]+ r21[(s1c73c4 —c1s4)c5—s1s23s5]—r31(s23c4c5+ c23s5).Becauseof the plus-or-minus signs appearing in (4.64) and (4.68), these equationscompute four solutions. Additionally, there are four more solutions obtained by41t is usually chosen to be equal to the present value of joint 4.
Section 4.7Examples of inverse manipulator kinematics 121"ifipping"the wrist of the manipulator. For each of the four solutions computedabove, we obtain the ifipped solution by94= 94+ 180°,95 = (4.83)=+ 1800.Afterall eight solutions have been computed, some (or even all) of them might haveto be discarded because of joint-limit violations. Of any remaining valid solutions,usually the one closest to the present manipulator configuration is chosen.The Yasukawa Motomart L-3Asthe second example, we will solve the kinematic equations of the YasukawaMotoman L-3, which were developed in Chapter 3. This solution wifi be partiallyalgebraic and partially geometric. The Motoman L-3 has three features that makethe inverse kinematic problem quite different from that of the PUMA. First, themanipulator has only five joints, so it is not able to position and orient its end-effector in order to attain general goal frames. Second, the four-bar type of linkagesand chain-drive scheme cause one actuator to move two or more joints. Third, theactuator position limits are not constants, but depend on the positions of the otheractuators, so finding out whether a computed set of actuator values is in range is nottrivial.If we consider the nature of the subspace of the Motoman manipulator (andthe same applies to many manipulators with five degrees of freedom), we quicklyrealize that this subspace can be described by giving one constraint on the attainableorientation: The pointing direction of the tool, that is, the ZT axis, must lie in the"plane of the arm." This plane is the vertical plane that contains the axis of joint1 and the point where axes 4 and 5 intersect. The orientation nearest to a generalorientation is the one obtained by rotating the tool's pointing direction so that it liesin the plane, using a minimum amount of rotation. Without developing an explicitexpression for this subspace, we will construct a method for projecting a generalgoal frame into it. Note that this entire discussion is for the case that the wrist frameand tool frame differ only by a translation alongIn Fig. 4.9, we indicate the plane of the arm by its normal, M, and the desiredpointing direction of the tool by ZT. This pointing direction must be rotated byangle 0 about some vector K in order to cause the new pointing direction, Z,, to liein the plane. It is clear that the ft thatminimizes 9 lies in the plane and is orthogonalto both ZT andForany given goal frame, M is defined as
1M=I,(4.84)0]whereandare the X and Y coordinates of the desired tool position. Then Kis given byK=MxZT. (4.85)
122Chapter4Inverse manipulator kinematics
FIGURE 4.9:Rotatinga goal frameinto the Motoman'ssubspace.
The newis(4.86)The amount of rotation, 9, is given bycos9 =ZTsin8 =(2Tx.k.(4.87)Using Rodriques's formula (see Exercise 2.20), we have(4.88)Finally, we compute the remaining unknown column of the new rotation matrix ofthe tool as(4.89)Equations (4.84) through (4.89) describe a method of projecting a given general goalorientation into the subspace of the Motoman robot.Assuming that the given wrist frame, lies in the manipulator's subspace,we solve the kinematic equations as follows. In deriving the kinematic equations forthe Motoman L-3, we formed the product of link transformations:= (4.90)Ifwelet r11 r12 r130T =r21r22 (4.91) 5r31 r32 r330001and premultiply both sides by we have= (4.92)
Section 4.7Examples of inverse manipulator kinematics 123wherethe left-hand side isc1r11 + s1r21c1r12+ s1r22c1r13+ s1r23+—r33 (4 93 —s1r11 + c1r21—s1r12+ c1r27 —s1r13 + c1r23+0001and the right-hand side is**S234***C234 * (494) s5 c5000001in the latter, several of the elements have not been shown. Equating the (3,4)elements, we get+=0, (4.95)which gives us5=pr). (4.96)Equating the (3,1) and (3,2) elements, we get55 =—s1r11+ c1r21,
C5=+ c1r22, (4.97)from which we calculate as05 =Atan2(r21c1—r11s1,r22c1 —r12s1).(4.98)Equating the (2,3) and (1,3) elements, we getC234 == c1r13+s1r23, (4.99)which leads to°234 =Atan2(r13c1+ r23s1, r33). (4.100)To solve for the individual angles 03, and 94, we will take a geometric approach.Figure 4.10 shows the plane of the arm with point A at joint axis 2, point B at jointaxis 3, and point C at joint axis 4.From the law of cosines applied to triangle ABC, we have++—122cos93 = .(4.101)21213Next, we have693 =Atan2(i/i—cos2O3,cos03).(4.102)
5For thismanipulator,a second solution would violate joint limits and so is not calculated.6For this manipulator, a second solution would violate joint limits and so is not calculated.
124Chapter 4Inverse manipulator kinematics
FIGURE 4.10: The planeof the Motoman manipulator.
From Fig. 4.10, we see that=— fi, or=—Atan2+p2)—Atan2(13Sffl93, 12 + 13 COS 93).(4.103)Finally, we have04 =—93. (4.104)Having solved for joint angles, we must perform the further computation to obtainthe actuator values. Referring to Section 3.7, we solve equation (3.16) for the A1:
A1=—
A2=cos(92—+2700)++—
A3=cos(92 +03—tan1+900)++
A4=+—— 93—94), k4A5 =— 95). (4.105)The actuators have limited ranges of motion, so we must check that our computedsolution is in range. This "in range" check is complicated by the fact that themechanical arrangement makes actuators interact and affect each other's allowedrange of motion. For the Motoman robot, actuators 2 and 3 interact in such a waythat the following relationship must always be obeyed:
A2 —10,000 >A3>A2+ 3000.(4.106)
Section 4.8The standard frames125Thatis, the limits of actuator 3 are a function of the position of actuator 2. Similarly,32,000 —A4<A5 <55,000. (4.107)Now, one revolution of joint 5 corresponds to 25,600 actuator counts, so, whenA4 >2600,there are two possible solutions for A5. This is the only situation in whichthe Yasukawa Motoman L-3 has more than one solution.4.8THE STANDARD FRAMESTheability to solve for joint angles is really the central element in many robotcontrol systems. Again, consider the paradigm indicated in Fig. 4.11, which showsthe standard frames.The way these frames are used in a general robot system is as follows:1. The user specifies to the system where the station frame is to be located. Thismight be at the corner of a work surface, as in Fig. 4.12, or even affixed to amoving conveyor belt. The station frame, (SI, is defined relative to the baseframe, {B}.2.Theuser specifies the description of the tool being used by the robot by givingthe {T}-frame specification. Each tool the robot picks up could have a different{T} frame associated with it. Note that the same tool grasped in different waysrequires different {T}-frame definitions. {T} is specified relative to {W}—thatis,3. The user specifies the goal point for a robot motion by giving the descriptionof the goal frame, {G}, relative to the station frame. Often, the definitions of{T} and {S} remain fixed for several motions of the robot. In this case, oncethey are defined, the user simply gives a series of {G} specifications.
FIGURE 4.11: Locationofthe "standard"frames.{G }
126Chapter 4Inverse manipulator kinematics
FIG U RE 4.12:Example workstation.
In many systems, the tool frame definition (VT) is constant (for example, it isdefined with its origin at the center of the fingertips). Also, the station framemight be fixed or might easily be taught by the user with the robot itself. Insuch systems, the user need not be aware of the five standard frames—he orshe simpiy thinks in terms of moving the tool to locations (goals) with respectto the work area specified by station frame.4. The robot system calculates a series of joint angles to move the joints throughin order that the tool frame wifi move from its initial location in a smoothmanner until {T} ={G}at the end of motion.4.9SOLVE-INGAMANIPULATORThe SOLVE function implements Cartesian transformations and calls the inversekinematics function. Thus, the inverse kinematics are generalized so that arbi-trary tool-frame and station-frame definitions may be used with our basic inversekinematics, which solves for the wrist frame relative to the base frame.Given the goal-frame specification, SOLVE uses the tool and stationdefinitions to calculate the location of {W} relative to {B},
B T—BTST WT—lWSTTThen, the inverse kinematics take as an input and calculatethrough(4.108)Tool frame
Base frame\
Section 4.11Computational considerations 1274.10REPEATABILITY AND ACCURACYMany industrial robots today move to goal points that have been taught. A taughtpoint is one that the manipulator is moved to physically, and then the joint positionsensors are read and the joint angles stored. When the robot is commanded toreturn to that point in space, each joint is moved to the stored value. In simple"teach and playback" manipulators such as these, the inverse kinematic problemnever arises, because goal points are never specified in Cartesian coordinates. Whena manufacturer specifies how precisely a manipulator can return to a taught point,he is specifying the repeatability of the manipulator.Any time a goal position and orientation are specified in Cartesian terms,the inverse kinematics of the device must be computed in order to solve for therequired joint angles. Systems that allow goals to be described in Cartesian termsare capable of moving the manipulator to points that were never taught—points inits workspace to which it has perhaps never gone before. We will call such pointscomputed points. Such a capability is necessary for many manipulation tasks. Forexample, if a computer vision system is used to locate a part that the robot mustgrasp, the robot must be able to move to the Cartesian coordinates supplied by thevision sensor. The precision with which a computed point can be attained is calledthe accuracy of the manipulator.The accuracy of a manipulator is bounded by the repeatability. Clearly,accuracy is affected by the precision of parameters appearing in the kinematicequations of the robot. Errors in knowledge of the Denavit—Hartenberg parameterswill cause the inverse kinematic equations to calculate joint angle values that arein error. Hence, although the repeatability of most industrial manipulators is quitegood, the accuracy is usually much worse and varies quite a bit from manipulatorto manipulator. Calibration techniques can be devised that allow the accuracy ofa manipulator to be improved through estimation of that particular manipulator'skinematic parameters [10].
4.11COMPUTATIONAL CONSIDERATIONSIn many path-control schemes, which we will consider in Chapter 7, it is necessaryto calculate the inverse kinematics of a manipulator at fairly high rates, for exam-ple, 30 Hz or faster. Therefore, computational efficiency is an issue. These speedrequirements rule out the use of numerical-solution techniques that are iterative innature; for this reason, we have not considered them.Most of the general comments of Section 3.10, made for forward kinematics,also hold for the problem of inverse kinematics. For the inverse-kinematic case, atable-lookup Atan2 routine is often used to attain higher speeds.Structure of the computation of multiple solutions is also important. It isgenerally fairly efficient to generate all of them in parallel, rather than pursuing oneafter another serially. Of course, in some applications, when all solutions are notrequired, substantial time is saved by computing only one.When a geometric approach is used to develop an inverse-kinematic solution,it is sometimes possible to calculate multiple solutions by simple operations on thevarious angles solved for in obtaining the first solution. That is, the first solution
128Chapter 4Inverse manipulator kinematicsismoderately expensive computationally, but the other solutions are found veryquickly by summing and differencing angles, subtracting jr, and so on.
BIBLIOGRAPHY[1] B. Roth,J. Rastegar, and V. Scheinman, "On theDesign of Computer ControlledManipulators," On the Theory and Practice of Robots and Manipulators, Vol. 1, FirstCISM-IFToMM Symposium, September 1973, pp. 93—113.[2] B. Roth, "Performance Evaluation of Manipulators from a Kinematic Viewpoint," Per-formance Evaluation of Manipulators, National Bureau of Standards, special publication,1975.[3] D. Pieper and B. Roth, "The Kinematics of Manipulators Under Computer Control,"Proceedings of the Second International Congress on Theory of Machines and Mechanisms,Vol. 2, Zakopane, Poland, 1969, pp. 159—169.[4] D. Pieper, "The Kinematics of Manipulators Under Computer Control," UnpublishedPh.D. Thesis, Stanford University, 1968.[5] R.P. Paul, B. Shimano, and G. Mayer, "Kinematic Control Equations for Simple Manip-ulators," IEEE Transactions on Systems, Man, and Cybernetics, Vol. SMC-11, No. 6,1981.[6] L. Tsai and A. Morgan, "Solving the Kinematics of the Most General Six- and Five-degree-of-freedom Manipulators by Continuation Methods," Paper 84-DET-20, ASMEMechanisms Conference, Boston, October 7—10, 1984.[7] C.S.G. Lee and M. Ziegler, "Geometric Approach in Solving Inverse Kinematics ofPUMA Robots," IEEE Transactions on Aerospace and Electronic Systems, Vol. AES-20,No. 6, November 1984.[8] W. Beyer, CRC Standard Mathematical Tables, 25th edition, CRC Press, Inc., BocaRaton, FL, 1980.[9] R. Burington, Handbook of Mathematical Tables and Formulas, 5th edition, McGraw-Hill, New York, 1973.[10] J. Hollerbach, "A Survey of Kinematic Calibration," in The Robotics Review, 0. Khatib,J. Craig, and T. Lozano-Perez, Editors, MIT Press, Cambridge, MA, 1989.[II] Y. Nakamura and H. Hanafusa, "Inverse Kinematic Solutions with Singularity Robust-ness for Robot Manipulator Control," ASME Journal of Dynamic Systems, Measurement,and Control, Vol. 108, 1986.[12] D. Baker and C. Wampler, "On the Inverse Kinematics of Redundant Manipulators,"International Journal of Robotics Research, Vol. 7, No. 2, 1988.[13] L.W. Tsai, Robot Analysis: The Mechanics of Serial and Parallel Manipulators, Wiley,New York, 1999.
EXERCISES4.1 [15] Sketch the fingertip workspace of the three-link manipulator of Chapter 3,Exercise 3.3 for the case=15.0,12 =10.0,and 13 =3.0.4.2 [26] Derive the inverse kinematics of the three-link manipulator of Chapter 3,Exercise 3.3.4.3 [12] Sketch the fingertip workspace of the 3-DOF manipulator of Chapter 3,Example 3.4.
Exercises1294.4 [24] Derivethe inverse kinematics of the 3-DOF manipulator of Chapter 3,Example 3.4.4.5 [38] Write a Pascal (or C) subroutine that computes all possible solutions for thePUMA 560 manipulator that lie within the following joint limits:—170.0<170.0,—225.0<45.0,—250.0 <63<75.0,—135.0 <64<135.0,—100.0 <95 <100.0,—180.0 <°6<180.0.Use the equations derived in Section 4.7 with these numerical values (in inches):a2 =17.0,
£13= 0.8,d3 =4.9,d4=17.0.4.6[15]Describe a simple algorithm for choosing the nearest solution from a set ofpossible solutions.4.7 [10] Make a list of factors that might affect the repeatability of a manipulator.Make a second list of additional factors that affect the accuracy of a manipulator.4.8[12]Given a desired position and orientation of the hand of a three-link planarrotary-jointed manipulator, there are two possible solutions. If we add one morerotational joint (in such a way that the arm is still planar), how many solutionsare there?4.9[26]Figure 4.13 shows a two-link planar arm with rotary joints. For this arm, thesecond link is half as long as the first—that is, ii = 212.The joint range limits in
FIGURE 4.13:Two-link planar manipulator.L1
130Chapter 4Inverse manipulator kinematicsdegrees are0<180,—90<180.Sketchthe approximate reachable workspace (an area) of the tip of link 2.4.10[23]Give an expression for the subspace of the manipulator of Chapter 3,Example 3.4.4.11[24]A 2-DOF positioning table is used to orient parts for arc-welding. Theforward kinematics that locate the bed of the table (link 2) with respect to thebase (link 0) arerc1c2—c1s2 s112s1 +OT_IS2C2002—s1s2c1 12c1 + h1LO001Givenany unit direction fixed in the frame of the bed (link 2), give theinverse-kinematic solution for 02 such that this vector is aligned with 02 (i.e.,upward). Are there multiple solutions? Is there a singular condition for which a unique solution cannot be obtained?4.12[22]In Fig. 4.14, two 3R mechanisms are pictured. In both cases, the three axesintersect at a point (and, over all configurations, this point remains fixed in space).The mechanism in Fig. 4.14(a) has link twists (as) of magnitude 90 degrees. Themechanism in Fig. 4.14(b) has one twist of in magnitude and the other of 180—in magnitude.The mechanism in Fig. 4.14(a) can be seen to be in correspondence with Z—Y—ZEuler angles, and therefore we know that it suffices to orient link 3 (with arrowin figure) arbitrarily with respect to the link 0. Because 0 is not equal to 90degrees, it turns out that the other mechanism cannot orient link 3 arbitrarily.
FIGURE 4.14: Two 3R mechanisms (Exercise 4.12).(a) (b)
zo,1Exercises131
FIGURE 4.15: A 4Rmanipulator shown in the position e = [0,900,—90°, 01T (Exer-cise 4.16).
Describe the set of orientations that are unattainable with the second mechanism.Note that we assume that all joints can turn 360 degrees (i.e. no limits) and weassume that the links may pass through each other if need be (i.e., workspace notlimited by self-coffisions).4.13[13]Name two reasons for which closed-form analytic kinematic solutions arepreferred over iterative solutions.4.14[14]There exist 6-DOF robots for which the kinematics are NOT closed-formsolvable. Does there exist any 3-DOF robot for which the (position) kinematicsare NOT closed-form solvable?4.15 [38] Write a subroutine that solves quartic equations in closed form. (See [8, 9].)4.16[25]A 4R manipulator is shown schematically in Fig. 4.15. The nonzero linkparameters are a1 =1,a2 =45°,d3 =and a3 =and the mechanism ispictured in the configuration corresponding to e = [0,90°,—90°, 0]T. Each jointhas ±180° as limits. Find all values of 83 such that=[1.1,1.5,4.17[25]A 4R manipulator is shown schematically in Fig. 4.16. The nonzero linkparameters are a1 =—90°,d2 =1,a2 =45°,d3 =1,and a3 =1,and themechanism is pictured in the configuration corresponding to 0 = [0,0, 90°, 0]T.Each joint has ±180° as limits. Find all values of 83 such that=[0.0,1.0, 1414]T4.18[15]Consider the RRP manipulator shown in Fig. 3.37. How many solutions dothe (position) kinematic equations possess?4.19 [15] Consider the RRR manipulator shown in Fig. 3.38. How many solutions dothe (position) kinematic equations possess?4.20 [15] Consider the R PP manipulator shown in Fig. 3.39. How many solutions dothe (position) kinematic equations possess?I I
I I
1
I I
I I
xo,1y-)Ax4
132Chapter 4Inverse manipulator kinematics
FIGURE 4.16: A 4R manipulator shown in the position 0 =[0,0,900,0]T (Exer-cise 4.17).
4.21[15] Consider the PRR manipulator shown in Fig. 3.40.How many solutions dothe (position) kinematic equations possess?4.22 [15] Consider the PPP manipulator shown in Fig. 3.41. How many solutions dothe (position) kinematic equations possess?4.23 [38] The following kinematic equations arise in a certain problem:sine —asin9+b,=ccos9+d,
Givena, b, c, d, and i/i,showthat, in the general case, there are four solutions for6. Give a special condition under which there are just two solutions for 9.4.24 [20] Given the description of link frame {i} in terms of link frame {i —1),find thefour Denavit—Hartenberg parameters as functions of the elements of Y'T.PROGRAMMINGEXERCISE (PART 4)1.Write a subroutine to calculate the inverse kinematics for the three-link manipu-lator of Section 4.4. The routine should pass arguments in the formProcedureINVKIN(VAR wreib: frame; VAR current, near, far: vec3;VAR sol: boolean);where"wreib," an input, is the wrist frame specified relative to the base frame;"current," an input, is the current position of the robot (given as a vector of jointangles); "near" is the nearest solution; "far" is the second solution; and "sol" isa flag that indicates whether solutions were found. (sol = FALSEif no solutionswere found). The link lengths (meters) are
11 =17=0.5.zo,1L/
yo,1x4
MATLAB Exercise 4133Thejoint ranges of motion are—170°170°.Test your routine by calling it back-to-back with KIN to demonstrate that they areindeed inverses of one another.2. A tool is attached to link 3 of the manipulator. This tool is described by thetool frame relative to the wrist frame. Also, a user has described his work area, thestation frame relative to the base of the robot, as T. Write the subroutineProcedureSOLVE(VAR -brels: frame; VAR current, near, far: vec3;VARsol: boolean);
where "trels" is the{T} framespecified relative to the {S}frame. Other parametersareexactly as in theINVKIN subroutine. The defmitions of {T} and {S} should begloballydefined variables or constants. SOLVE should use calls to TMULT, TIN VERT,and INVKIN.3. Write amain program that accepts a goal frame specified in terms of x, y,andThisgoal specification is (T} relative to {S}, which is the way the user wants tospecify goals.The robot is using the same tool in the same working area as in ProgrammingExercise (Part 2), so {T} and {S} are defined as= [x y9]=[0.1 0.2 30.0],= [x y8] =[—0.1 0.3 0.0].Calculate the joint angles for each of the following three goal frames:[x1 Yi=[0.0 0.0 —90.0],Er7 Y2 02] = [0.6 —0.3 45.0],[x3 Y3 03] = [—0.4 0.3 120.0],[x404]= [0.8 1.4 30.0].Assume that the robot wifi start with all angles equal to 0.0 and move to thesethree goals in sequence. The program should find the nearest solution with respectto the previous goal point. You should call SOLVE and WHERE back-to-back to makesure they are truly inverse functions.
MATLAB EXERCISE4Thisexercise focuses on the inverse-pose kinematics solution for the planar 3-DOF,3R robot. (See Figures 3.6 and 3.7; the DH parameters are given in Figure 3.8.) Thefollowingfixed-length parameters are given: L1 = 4, L2 = 3, and L3= 2(m).
a) Analytically derive, byhand, the inverse-pose solution for this robot: GivenT, calculateall possible multiple solutions for8-,83 }.(Threemethods arepresented in the text—choose one of these.) Hint: Tosimplify the equations, firstcalculatefromand L3.b)Develop a MATLAB program to solve this planar 3R robot inverse-pose kine-matics problem completely (i.e., to give all multiple solutions). Test your program,usingthe following input cases:
134Chapter 4Inverse manipulator kinematics1009'0100H—0 0 1 000010.5—0.866 0 7.5373o0.8660.60 3.9266001000010 1 0 —3o——1002I1I)HT_00100001rO.8660.50 —3.1245oI—0.5 0.866 09.16740010Lo001Forall cases, employ a circular check to validate your results: Plug each resultingset of joint angles (for each of the multiple solutions) back into the forward-pose kinematics MATLAB program to demonstrate that you get the originallycommandedc) Check all results by means of the Corke MATLAB Robotics Toolbox. Try functionikineQ.
CHAPTER5Jacobians: velocitiesand static forces
5.1INTRODUCTION5.2NOTATION FOR TIME-VARYING POSITION AND ORIENTATION5.3LINEAR AND ROTATIONAL VELOCITY OF RIGID BODIES5.4MORE ON ANGULAR VELOCITY5.5MOTION OF THE LINKS OF A ROBOT5.6VELOCITY "PROPAGATION" FROM LINK TO LINK5.7JACOBIANS5.8SINGULARITIES5.9STATIC FORCES IN MANIPULATORS5.10 JACOBIANS IN THE FORCE DOMAIN5.11 CARTESIAN TRANSFORMATION OF VELOCITIES AND STATIC FORCES
5.1INTRODUCTIONInthis chapter, we expand our consideration of robot manipulators beyond static-positioning problems. We examine the notions of linear and angular velocity of arigid body and use these concepts to analyze the motion of a manipulator. We alsowill consider forces acting on a rigid body, and then use these ideas to study theapplication of static forces with manipulators.It turns out that the study of both velocities and static forces leads to a matrixentity called the Jacobian1 of the manipulator, which will be introduced in thischapter.The field of kinematics of mechanisms is not treated in great depth here.For the most part, the presentation is restricted to only those ideas which arefundamental to the particular problem of robotics. The interested reader is urged tostudy further from any of several texts on mechanics [1—3].5.2NOTATION FOR TIME-VARYING POSITION AND ORIENTATIONBeforeinvestigating the description of the motion of a rigid body, we briefly discusssome basics: the differentiation of vectors, the representation of angular velocity,and notation.
1Mathematicians callitthe "Jacobian matrix," but roboticists usually shorten it to simply "Jacobian."
135 
136Chapter 5Jacobians: velocities and static forcesDifferentiation of position vectorsAs a basis forour consideration of velocities (and, in Chapter 6, accelerations), weneed the following notation for the derivative of a vector:
BV—dBQ_ 51 At-÷OL\.tThevelocity of a position vector can be thought of as the linear velocity of thepoint in space represented by the position vector. From (5.1), we see that we are calculating the derivative of Q relativeto frame {B}. For example, if Q isnotchanging in time relative to {B}, then the velocity calculated is zero—even if thereis some other frame in which Q isvarying. Thus, it is important to indicate the framein which the vector is differentiated.As with any vector, a velocity vector can be described in terms of any frame,and this frame of reference is noted with a leading superscript. Hence, the velocityvector calculated by (5.1), when expressed in terms of frame {A}, would be writtenA(BV)_AdBQ (5.2)
Sowe see that, in the general case, a velocity vector is associated with a point inspace, but the numerical values describing the velocity of that point depend on twoframes: one with respect to which the differentiation was done, and one in which theresulting velocity vector is expressed.In (5.1), the calculated velocity is written in terms of the frame of differentia-tion, so the result could be indicated with a leading B superscript, but, for simplicity,when both superscripts are the same, we needn't indicate the outer one; that is, we writeB(BV)BV (5.3)Finally,we can always remove the outer, leading superscript by explicitly includ-ing the rotation matrix that accomplishes the change in reference frame (seeSection 2.10); that is, we writeA(BV)ARBV (5.4)We will usually write expressions in the form of the right-hand side of (5.4) so thatthe symbols representing velocities wifi always mean the velocity in the frame ofdifferentiation and wifi not have outer, leading superscripts.Rather than considering a general point's velocity relative to an arbitraryframe, we wifi very often consider the velocity of the origin of a frame relativeto some understood universe reference frame. For this special case, we define ashorthand notation,UTTwhere the point in question is the origin of frame {C} and the reference frame is(U). For example, we can use the notation to refer to the velocity of the originof frame {C}; then AUC is the velocity of the origin of frame {C} expressed in termsof frame {AJ (though differentiation was done relative to fU}).
Section 5.2Notation for time-varying position and orientation 137
FIGURE 5.1:Example of some frames in linear motion.
EXAMPLE5.1Figure5.1 shows a fixed universe frame, {U}, a frame attached to a train traveling at100 mph, {T}, and a frame attached to a car traveling at 30 mph, {C}. Both vehiclesare heading in the X direction of {U}. The rotation matrices, andare known and constant.UdWhat isUp?
UdUDU1,rCORG =VCORG=UC=
÷C,Uu'vYllaLlsC(UVTORG) =Cv=gRUT=gR(lOOk)=gR—'
+CiT11\7vvuatlsC,T1,\_CDTTT— UD—1U"CORGc1tT
Theangular velocityvectorWe now introduce an angular velocity vector, using the symbol Whereas linearvelocity describes an attribute of a point, angular velocity describes an attribute ofa body. We always attach a frame to the bodies we consider, so we can also think ofangular velocity as describing rotational motion of a frame.In Fig. 5.2, AcB describes the rotation of frame (B} relative to {A}. Physically,at any instant, the direction of A indicates the instantaneous axis of rotation of{B} relative to {A}, and the magnitude of Ac2B indicates the speed of rotation. Again,like any vector, an angular velocity vector may be expressed in any coordinatesystem, and so another leading superscript may be added; for example, C(Ac2B) isthe angular velocity of frame {B} relative to {A} expressed in terms of frame {C}.CI
xU
138Chapter 5Jacobians: velocities and static forces
FIGURE5.2: Frame {B}isrotating with angular velocity AQB relativeto frame [A).
Again,we introduce a simplified notation for an important special case. Thisis simply the case in which there is an understood reference frame, so that it neednot be mentioned in the notation:wc=US2c. (5.6)Here,is the angular velocity of frame (C) relativeto some understood referenceframe, (U).Forexample,isthe angular velocity of frame (C) expressedin termsof (A)(thoughthe angular velocity is with respect to (U)).
5.3LINEAR AND ROTATIONAL VELOCITY OF RIGID BODIESIn this section, we investigate the description of motion of a rigid body, at leastas far as velocity is concerned. These ideas extend the notions of translations andorientations described in Chapter 2 to the time-varying case. In Chapter 6, we willfurther extend our study to considerations of acceleration.As in Chapter 2, we attach a coordinate system to any body that we wish todescribe. Then, motion of rigid bodies can be equivalently studied as the motion offrames relative to one another.Linear velocityConsider a frame (B)attachedto a rigid body. We wish to describe the motion ofBrelative to frame (A),asin Fig. 5.3. We may consider {A} tobe fixed.Frame (B}is located relative to (A),asdescribed by a position vector, Aanda rotation matrix,Forthe moment, we wifi assume that the orientation,isnot changing with time—that is, the motion of point Q relative to (A}isdue toApBORGorB Q changing in time.Solving for the linear velocity of point Q in terms of (A) isquite simple. Justexpress both components of the velocity in terms of (A), andsum them:
A_AABVQ_ VBORG+BR VQ.Equation(5.7) is for only that case in which relative orientation of (B) and(A}remainsconstant.(BJ(A)
Section 5.3Linear and rotational velocity of rigid bodies 139
FIGURE 5.3:Frame {B} is translating with velocity A VBORG relative to frame {A}.
RotationalvelocityNow let us consider two frames with coincident origins and with zero linear relative velocity; their origins will remain coincident for all time. One or both could beattached to rigid bodies, but, for clarity, the rigid bodies are not shown in Fig. 5.4.The orientation of frame {B} with respect to frame {A} is changing in time.As indicated in Fig. 5.4, rotational velocity of {B} relative to {A} is described by a vector called AQB. We also have indicated a vector B that locates a point fixed in {B}. Now we consider the all-important question: How does a vector change withtime as viewed from {A} when it is fixed in {B} and the systems are rotating? Let us consider that the vector Q isconstant as viewed from frame {B}; that is,BVQ =0. (5.8)Even though it is constant relative to {B}, it is clear that point Qwifihave a velocity as seen from {A} that is due to the rotational velocity A To solve for the velocity of point Q,wewill use an intuitive approach. Figure 5.5 shows two instants of timeas vector Qrotatesaround Ac2This is what an observer in {A} would observe.
FIGURE 5.4: Vector Bfixedin frame {B}, is rotating with respect to frame {A} withangular velocity A c2B.[A)(B)
140Chapter 5Jacobians: velocities and static forces
(t +
By examining Fig. 5.5, we can figure out both the direction and the magnitudeof the change in the vector as viewed from {A}. First, it is clear that the differentialchange in AQ must be perpendicular to both Ac2B and Second, we see fromFig. 5.5 that the magnitude of the differential change isIAQI = (5.9)These conditions on magnitude and direction immediately suggest the vector cross-product. Indeed, our conclusions about direction and magnitude are satisfied by thecomputational fonnAVQXAQ. (5.10)In the general case, the vector Q couldalso be changing with respect to frame {B},so, adding this component, we haveAv =A(BV)+xAQ (5.11)Using a rotation matrix to remove the dual-superscript, and noting that the descrip-tion of Aat any instant isQ,weend withAVSimultaneous linear and rotational velocity(5.12)
We can very simply expand (5.12) to the case where origins are not coincident byadding on the linear velocity of the origin to (5.12) to derive the general formula forvelocity of a vector fixed in frame {B} as seen from frame {A}:A1, _A1,VQ— VBORG +VQ +FIGURE 5.5:Thevelocityof a point due to an angular velocity.
Section 5.4More on angular velocity 141Equation(5.13) is the final result for the derivative of a vector in a moving frame as seen from a stationary frame.5.4MOREON ANGULAR VELOCITYInthis section, we take a deeper look at angular velocity and, in particular, atthe derivation of (5.10). Whereas the previous section took a geometric approachtoward showing the validity of (5.10), here we take a mathematical approach. Thissection may be skipped by the first-time reader.Aproperty of the derivative of an orthonormal matrixWecan derive an interesting relationship between the derivative of an orthonormalmatrix and a certain skew-symmetric matrix as follows. For any ii x ii orthonormalmatrix, R, we haveRRT= (5.14)whereis the n x n identity matrix. Our interest, by the way, is in the case where n =3and R is a proper orthonormal matrix, or rotation matrix. Differentiating(5.14) yieldsRRT+RRT= (5.15)whereis the n x n zero matrix. Eq. (5.15) may also be writtenRRT+ (RRT)T =0,r (5.16)DefiningS =RRr, (5.17)we have, from (5.16), that(5.18)So, we see that S is a skew-symmetric matrix. Hence, a property relating thederivative of orthonormal matrices with skew-symmetric matrices exists and can be stated asS =RR'. (5.19)Velocityof a point due to rotating reference frameConsidera fixed vectorB P unchangingwith respect to frame (B). Its description inanother frame {A} is given asAPARBP (5.20)If frame {B} is rotating (i.e., the derivative is nonzero), then A P will be changingeven thoughB P isconstant; that is,ApARBp (5.21)or, using our notation for velocity,
(5.22)
142Chapter 5Jacobians: velocities and static forcesNow,rewrite (5.22) by substituting for B p, to obtainA17 _ARAR_lApPB BMaking use of our result (5.19) for orthonormal matrices, we haveAVPASAP (5.24)where we have adorned S with sub- and superscripts to indicate that it is the skew-symmetric matrix associated with the particular rotation matrix Because of itsappearance in (5.24), and for other reasons to be seen shortly, the skew-symmetricmatrix we have introduced is called the angular-velocity matrix.Skew-symmetricmatrices and the vector cross-productIfwe assign the elements in a skew-symmetric matrix S asroS=0 ,(5.25)0]anddefine the 3 x 1 column vector
1
I (5.26)Lthenit is easily verified that(5.27)where P is any vector, and x is the vector cross-product.The 3 x 1 vectorwhich corresponds to the 3 x 3 angular-velocity matrix, iscalled the angular-velocity vector and was already introduced in Section 5.2.Hence, our relation (5.24) can be written=XAp, (5.28)where we have shown the notation for indicating that it is the angular-velocityvector specifying the motion of frame {B} with respect to frame {A}.Gainingphysical insight concerning the angular-velocity vectorHavingconcluded that there exists some vector such that (5.28) is true, we nowwish to gain some insight as to its physical meaning. Derive by direct differentiationof a rotation matrix; that is,=R(t +R(t)(5.29)iXtNow, write R(t +as the composition of two matrices, namely,R(t + At) =RK(A9)R(t), (5.30)
1L
R=0R(t).0
00
raez,YIzI= IHSection 5.4More on angular velocity 143where, over the intervala small rotation of M has occurred about axis Using (5.30), write (5.29) as
that is,
Now, from small angle substitutions in (2.80), we have
So, (5.32) may be written00AGAG
0At(5.31)
(5.32)
(5.33)
R(t).(5.34)
Finally, dividing the matrix through by At and then taking the limit, we have
(5.35)
Hence, we see that
(5.36)where1=11=9K. (5.37)The physical meaning of the angular-velocity vector is that, at any instant, thechange in orientation of a rotating frame can be viewed as a rotation about someaxis K. This instantaneous axis ofrotation, taken as a unit vector and then scaled bythe speed of rotation about that axis (0), yields the angular-velocity vector.Otherrepresentations of angular velocityOtherrepresentations of angular velocity are possible; for example, imagine thatthe angular velocity of a rotating body is available as rates of the set of Z—Y—Z Euler angles:
(5.38)
144Chapter 5Jacobians: velocities and static forcesGiventhis style of description, or any other using one of the 24 angle sets, we wouldlike to derive the equivalent angular-velocity vector.We have seen that[0RRT=0 (5.39)0]Fromthis matrix equation, one can extract three independent equations, namely,=+ '32'22 +c2y =+ 112132 + 113133, (5.40)='21'11++From(5.40) and a symbolic description of R in terms of an angle set, one can derivethe expressions that relate the angle-set velocities to the equivalent angular-velocityvector. The resulting expressions can be cast in matrix form—for example, forZ—Y—Z Euler angles,= (5.41)That is, E (.)isa Jacobian relating an angle-set velocity vector to the angular-velocityvector and is a function of the instantaneous values of the angle set. The form ofE() depends on the particular angle set it is developed for; hence, a subscript isadded to indicate which.
EXAMPLE5.2Constructthe E matrix that relates Z—Y—Z Euler angles to the angular-velocityvector; that is, findin (5.41).Using (2.72) and (5.40) and doing the required symbolic differentiations yields[0 —sa=0CYsas/3.(5.42) [10]
5.5MOTION OF THE LINKS OF A ROBOTInconsidering the motions of robot links, we wifi always use link frame {0} as ourreference frame. Hence,is the linear velocity of the origin of link frame {i andis the angular velocity of link frame {i }.Atany instant, each link of a robot in motion has some linear and angularvelocity. Figure 5.6 indicates these vectors for link i. In this case, it is indicated thatthey are written in frame {i }.
5.6VELOCITY "PROPAGATION" FROM LINK TO LINKWenow consider the problem of calculating the linear and angular velocities of thelinks of a robot. A manipulator is a chain of bodies, each one capable of motion
AidsSection 5.6Velocity "propagation" from link to link 145
FIGURE 5.6: The velocity of link i isgiven by vectorsand w1,whichmay be writtenin any frame, even frame {i }.
relative to its neighbors. Because of this structure, we can compute the velocity ofeach link in order, starting from the base. The velocity of link i +1 will be that of link i,pluswhatever new velocity components were added by joint i +1.2As indicated in Fig. 5.6,letus now think of each link of the mechanism as arigid body with linear and angular velocity vectors describing its motion. Further,we wifi express these velocities with respect to the link frame itself rather than withrespect to the base coordinate system. Figure 5.7 showslinks iandi+1, along withtheir velocity vectors defined in the link frames.Rotational velocities can be added when both cv vectors are written withrespect to the same frame. Therefore, the angular velocity of link I +1 is the same
+1+ 1
FIGURE 5.7: Velocity vectors of neighboring links.2Remember that linear velocity is associated with a point, but angular velocity is associated with abody. Hence, the term "velocity of a link" here means the linear velocity of the origin of the link frameand the rotational velocity of the link.Link i
xi
+
I',.i+1+ i
146Chapter 5Jacobians: velocities and static forcesas thatof linkiplusa new component caused by rotational velocity at joint i + 1.This can be written in terms of frame {i} as= 'Wi+ (5.43)Notethatrol= 1+1•oL(544)LWe have made use of the rotation matrix relating frames {i} and{i+1} in order torepresent the added rotational component due to motion at the joint in frame {i }.The rotation matrix rotates the axis of rotation of joint i +1 into its description inframe {iso that the two components of angular velocity can be added.By premultiplying both sides of (5.43) by wecan find the description ofthe angular velocity of link i+1 with respect to frame {i+11:i+1_i+lDii+1 Wi+1 —iltWi —1-•i+1i+1•Thelinear velocity of the origin of frame {i +1} is the same as that of the originof frame {i} plus a new component caused by rotational velocity of link i. Thisisexactly the situation described by (5.13), withone term vanishing because isconstant in frame {i}.Therefore,we have= lvi+ 'w1 x (5.46)Premultiplyingboth sides bywecompute=+x (5.47)Equations(5.45) and (5.47) are perhaps the most important results of this chapter.The corresponding relationships for the case that joint i +1 is prismatic are= I+1R'co1,=+'w1 x+i+1Z+i.(5.48)Applyingthese equations successively from link to link, we can compute NWN andNUNtherotational and linear velocities of the last link. Note that the resultingvelocities are expressed in terms of frame {N}. Thisturns out to be useful, as we willsee later. If the velocities are desired in terms of the base coordinate system, theycan be rotated into base coordinates by multiplication with
EXAMPLE5.3A two-link manipulator with rotational joints is shown in Fig. 5.8. Calculatethevelocity of the tip of the arm as a function of joint rates. Give the answer in twoforms—in terms of frame {3} and also in terms of frame {O}.Frame {3} has been attached at the end of the manipulator, as shown in Fig. 5.9,and we wish to find the velocity of the origin of this frame expressed in frame {3}.As a second part of the problem, we will express these velocities in frame {O} as
Section 5.6Velocity "propagation" from link to link 147
FIGURE 5.8:Atwo-linkmanipulator.
x3
07//
FIGURE 5.9:Frameassignmentsfor the two-link manipulator.well. Wewifistart by attachingframesto the links aswehave done before(shown in Fig. 5.9).We will use (5.45) and (5.47) to compute the velocity of the origin of eachframe, starting from the base frame {0}, which has zero velocity. Because (5.45) and(5.47) will make use of the link transformations, we compute them:Cl —Si 0 00T—s1c1 001—00100001
C2
20
1001201003—00100001
148Chapter 5Jacobians: velocities and static forcesNotethat these correspond to the manipulator of Example 3.3 with joint 3 perma-nently ftxed at zero degrees. The final transformation between frames {2} and {3}need not be cast as a standard link transformation (though it might be helpful to doso). Then, using (5.45) and (5.47) sequentially from link to link, we calculatefbi0, (5.50)Lfbi0, (5.51)LU]rol=.0, (5.52)L01r0•rl1s7O11 =—S2 C2 0=11c291,(5.53)Lb 01]L0]L°]= (5.54)r.1=11c901+ 19(9k + 97) .(5.55)L0]Equation(5.55) is the answer. Also, the rotational velocity of frame {3} is found in(5.54).To ffild these velocities with respect to the nonmoving base frame, we rotatethem with the rotation matrix which is[c12—S12 0130R ==L(5.56)
This rotation yields[—lisiOi —12s19(91+02)1=11c101+ 12c12(91 + (5.57)L]
Itis important to point out the two distinct uses for (5.45) and (5.47). First,they can be used as a means of deriving analytical expressions, as in Example 5.3above. Here, we manipulate the symbolic equations until we arrive at a form suchas (5.55), which wifi be evaluated with a computer in some application. Second,they can be used directly to compute (5.45) and (5.47) as they are written. Theycan easily be written as a subroutine, which is then applied iteratively to computelink velocities. As such, they could be used for any manipulator, without the needof deriving the equations for a particular manipulator. However, the computation
Section 5.7Jacobians149thenyields a numeric result with the structure of the equations hidden. We are often interested in the structure of an analytic result such as (5.55). Also, if we bother to do the work (that is, (5.50) through (5.57)), we generally will find that there arefewer computations left for the computer to perform in the final application.5.7JACOBIANSTheJacobian is a multidimensional form of the derivative. Suppose, for example,that we have six functions, each of which is a function of six independent variables:=f1(xj,x2, x3, x4, x5, x6),
Y2=f2(x1,x2,x3,x4,x5,x6),
(5.58)Y6 =f6(x1, x2, x3, x4, x5, x6).Wecould also use vector notation to write these equations:Y =F(X). (5.59)Now, if we wish to calculate the differentials of y1 as a function of differentials of x1,we simply use the chain rule to calculate, and we getaf1af1af1—8x1 + —8x2 + ... +—8x6, ax18x28x68f2af2=—SX1 ++ ... + —8x6,Bx6
(5.60)8f6Bf6af6 8Y6 =+—8x2 + ... +—8x6,8x6whichagain might be written more simply in vector notation:8Y =SX. (5.61) axThe 6 x 6 matrix of partial derivatives in (5.61) is what we call the Jacobian, J. Notethat, if the functions f1 (X) through f6 (X) are nonlinear, then the partial derivativesare a function of theso, we can use the notation8Y =J(X)SX. (5.62)By dividing both sides by the differential time element, we can think of the Jacobianas mapping velocities in X to those in Y:(5.63)At any particular instant, X has a certain value, and J(X) is a linear transforma- tion. At each new time instant, x has changed, and therefore, so has the lineartransformation. Jacobians are time-varying linear transformations.
150Chapter 5Jacobians: velocities and static forcesInthe field of robotics, we generally use Jacobians that relate joint velocitiesto Cartesian velocities of the tip of the arm—for example,(5.64)where eisthe vector ofjoint angles of the manipulator and v is a vector of Cartesianvelocities. In (5.64), we have added a leading superscript to our Jacobian notation toindicate in which frame the resulting Cartesian velocity is expressed. Sometimes thissuperscript is omitted when the frame is obvious or when it is unimportant to thedevelopment. Note that, for any given configuration of the manipulator, joint ratesare related to velocity of the tip in a linear fashion, yet this is only an instantaneousrelationship—in the next instant, the Jacobian has changed slightly. For the generalcase of a six-jointed robot, the Jacobian is 6 x 6, e is6 x 1, andis 6 x 1. This 6 x 1Cartesian velocity vector is the 3 x 1 linear velocity vector and the 3 x 1 rotationalvelocity vector stacked together:
(5.65)Jacobians of any dimension (including nonsquare) can be defined. The numberof rows equals the number of degrees of freedom in the Cartesian space beingconsidered. The number of columns in a Jacobian is equal to the number of jointsof the manipulator. In dealing with a planar arm, for example, there is no reasonfor the Jacobian to have more than three rows, although, for redundant planarmanipulators, there could be arbitrarily many columns (one for each joint).In the case of a two-link arm, we can write a 2 x 2 Jacobian that relatesjoint rates to end-effector velocity. From the result of Example 5.3, we can easilydetermine the Jacobian of our two-link arm. The Jacobian written in frame {3} isseen (from (5.55)) to be3J(e)=11s2 (5.66)22and the Jacobian written in frame (0) is (from (5.57))0J(O)=[—l1s1—12s1212s12 1.(5.67)L/1c1 + 12c1212c12jNotethat, in both cases, we have chosen to write a square matrix that relates jointrates to end-effector velocity. We could also consider a 3 x 2 Jacobian that wouldinclude the angular velocity of the end-effector.Considering (5.58) through (5.62), which define the Jacobian, we see that theJacobian might also be found by directly differentiating the kinematic equationsof the mechanism. This is straightforward for linear velocity, but there is no 3 x 1orientation vector whose derivative is w. Hence, we have introduced a method toderive the Jacobian by using successive application of (5.45) and (5.47). There areseveral other methods that can be used (see, for example, [4]), one of which wifi beintroduced shortly in Section 5.8. One reason for deriving Jacobians via the methodpresented is that it helps prepare us for material in Chapter 6, in which we wifi findthat similar techniques apply to calculating the dynamic equations of motion of amanipulator.
Section 5.8Singularities151Changinga Jacobian's frame of referenceGivena Jacobian written in frame {B}, that is,[v]=By=BJ(e)è (5.68)we might be interested in giving an expression for the Jacobian in another frame,{A}. First, note that a 6 x 1 Cartesian velocity vector given in {B} is described relativeto {A) by the transformation
(5.69)
Hence, we can write
1rAR01U=B (5.70)Lcv]IoARLBNow it is clear that changing the frame of reference of a Jacobian is accom-plished by means of the following relationship:rAR0 1AJ(0)=B
I (5.71)
5.8SINGULARITIESGiven that we have a linear transformation relating joint velocity to Cartesianvelocity, a reasonable question to ask is: Is this matrix invertible? That is, is itnonsingular? If the matrix is nonsingular, then we can invert it to calculate jointrates from given Cartesian velocities:é= (5.72)This is an important relationship. For example, say that we wish the hand of the robot to move with a certain velocity vector in Cartesian space. Using (5.72), wecould calculate the necessary joint rates at each instant along the path. The realquestion of invertibility is: Is the Jacobian invertible for all values of 0? If not,where is it not invertible?Most manipulators have values of 0 where the Jacobian becomes singular.Such locations are called singularities of the mechanism or singularities for short. Allmanipulators have singularities at the boundary of their workspace, and most haveloci of singularities inside their workspace. An in-depth study of the classification ofsingularities is beyond the scope of this book—for more information, see [5]. Forour purposes, and without giving rigorous definitions, we wifi class singularities intotwo categories:1. Workspace-boundary singularities occur when the manipulator isfully stretched out or folded back on itself in such a way that the end-effectoris at or very near the boundary of the workspace.
152Chapter 5Jacobians: velocities and static forces2. Workspace-interior singularities occur away from the workspace boundary;they generally are caused by a lining up of two or more joint axes.When a manipulator is in a singular configuration, it has lost one or moredegrees of freedom (as viewed from Cartesian space). This means that there is somedirection (or subspace) in Cartesian space along which it is impossible to move the
hand of the robot, no matter what joint rates are selected. It is obvious that thishappens at the workspace boundary of robots.
EXAMPLE 5.4Where are the singularities of the simple two-link arm of Example 5.3? What is thephysical explanation of the singularities? Are they workspace-boundary singularities
or workspace-interior singularities?To find the singular points of a mechanism, we must examine the determinantof its Jacobian. Where the determinant is equal to zero, the Jacobian has lost fullrank and is singular:
=1112s2 = 0.(5.73) DET [J(O)] _ [11s201llc2 + 12Clearly, a singularity of the mechanism exists when 02 is 0 or 180 degrees. Physically,when 02 = 0, the arm is stretched straight out. In this configuration, motion of theend-effector is possible along only one Cartesian direction (the one perpendicularto the arm). Therefore, the mechanism has lost one degree of freedom. Likewise,when 02 = 180, the arm is folded completely back on itself, and motion of the handagain is possible only in one Cartesian direction instead of two. We will class thesesingularities as workspace-boundary singularities, because they exist at the edge ofthe manipulator's workspace. Note that the Jacobian written with respect to frame(0), or any other frame, would have yielded the same result.
The danger in applying (5.72) in a robot control system is that, at a singularpoint, the inverse Jacobian blows up! This results in joint rates approaching infinityas the singularity is approached.
EXAMPLE 5.5Consider the two-link robot from Example 5.3 as it is moving its end-effector alongthe X axis at 1.0 m/s, as in Fig. 5.10. Show that joint rates are reasonable when farfrom a singularity, but that, as a singularity is approached at 02 = 0, joint rates tendto infinity.We start by calculating the inverse of the Jacobian written in (0):
1Ic!s O J-1(O)= 1112s2_11c1 112c12 -11s1i12s12(5.74)Section 5.9Static forces in manipulators 153
FiGURE 5.10:Atwo-link manipulatormoving its tip at a constant linear velocity.
Then, using Eq. (5.74) for a velocity of 1 mIs in the X direction, wecancalculate joint rates as a function of manipulator configuration:= (5.75) 11s2
L—'-'2 ——t1S7Clearly,as the arm stretches out toward =0,both joint rates go to infinity.
EXAMPLE5.6Forthe PUMA560manipulator, give two examples of singularities that can occur.There is singularity when 93 is near —90.0 degrees. Calculation of the exactvalue of 93 is left as an exercise. (See Exercise 5.14.) In this situation, links 2 and3 are "stretched out," just like the singular location of the two-link manipulator inExample 5.3. This is classed as a workspace-boundary singularity.Whenever 95 =0.0degrees, the manipulator is in a singular configuration. Inthis configuration, joint axes 4 and 6 line up—both of their actions would resultin the same end-effector motion, so it is as if a degree of freedom has been lost.Because this can occur interior to the workspace envelope, we wifi class it as a workspace-interior singularity.
5.9STATIC FORCES INMANIPULATORSThe chainlike nature of a manipulator leads us quite naturally to consider how forcesand moments "propagate" from one link to the next. Typically, the robot is pushingon something in the environment with the chain's free end (the end-effector) or isperhaps supporting a load at the hand. We wish to solve for the joint torques thatmust be acting to keep the system in static equilibrium.In considering static forces in a manipulator, we first lock all the joints so thatthe manipulator becomes a structure. We then consider each link in this structureand write a force-moment balance relationship in terms of the link frames. Finally,Yo
Y3
154Chapter 5Jacobians: velocities and static forceswe compute what static torque must be acting about the joint axis in order for themanipulator to be in static equilibrium. In this way, we solve for the set of jointtorques needed to support a static load acting at the end-effector.In this section, we will not be considering the force on the links due to gravity(that will be left until chapter 6). The static forces and torques we are consideringat the joints are those caused by a static force or torque (or both) acting on the lastlink-for example, as when the manipulator has its end-effector in contact with theenvironment.We define special symbols for the force and torque exerted by a neighbor link:fi = force exerted on link i by link i - 1,ni = torque exerted on link i by link i - 1.We will use our usual convention for assigning frames to links. Figure 5.11shows the static forces and moments (excluding the gravity force) acting on link i.Summing the forces and setting them equal to zero, we havei fi- i fi+1 =0. (5.76)Summing torques about the origin of frame {i }, we havemni-'ni+l -'Pi+l X 'fi+l = 0. (5.77)If we start with a description of the force and moment applied by the hand, wecan calculate the force and moment applied by each link, working from the last link
down to the base (link 0). To do this, we formulate the force-moment expressions(5.76) and (5.77) such that they specify iterations from higher numbered links tolower numbered links. The result can be written asI fi = `fi+i, (5.78)`ni = `ni+l + ` Pi+i X `fi+i (5.79)In order to write these equations in terms of only forces and moments definedwithin their own link frames, we transform with the rotation matrix describing frame
FIGURE 5.11: Static force-moment balance for a single link.Section 5.9Static forces in manipulators 155
FIGURE 5.12: A two-link manipulator applying a force at its tip.
{i + 1}relativeto frame {i}. This leads to our most important result for static force"propagation" from linktolink:'fi= (5.80)=+x(5.81)Finally, this important question arises: What torques are needed at the joints in orderto balance the reaction forces and moments acting on the links? All componentsof the force and moment vectors are resisted by the structure of the mechanismitself, except for the torque about the joint axis. Therefore, to find thejoint torquerequired to maintain the static equilibrium, the dot product of the joint-axis vectorwith the moment vector acting on the link is computed:= (5.82)Inthe case that joint i is prismatic, we compute the joint actuator force asr_ifTi2 (5.83)Note that we are using the symbol t even for a linear joint force.As a matter of convention, we generally define the positive direction of jointtorque as the direction which would tend to move the joint in the direction ofincreasing joint angle.Equations (5.80) through (5.83) give us a means to compute the joint torquesneeded to apply any force or moment with the end-effector of a manipulator in the static case.
EXAMPLE5.7Thetwo-link manipulator of Example 5.3 is applying a force vector 3F with itsend-effector. (Consider this force to be acting at the origin of {3}.) Find the requiredjoint torques as a function of configuration and of the applied force. (See Fig. 5.12.)Y3
3r
156Chapter 5Jacobians: velocities and static forcesWeapply Eqs. (5.80) through (5.82), starting from the last link and goingtowardthe base of the robot:2f_[f]
0(5.84)
=r0 (5.85)0c2 —s2 0c20=+,(5.86)00100rolr01=+i1k1x 1f1 =0.(5.87)JTherefore,we have=+ (12 + (5.88)= (5.89)This relationship can be written as a matrix operator:=12+11C2] (5.90)
It is not a coincidence that this matrix is the transpose of the Jacobian that we foundin (5.66)!
5.10JACOBIANS IN THE FORCE DOMAINWehave found joint torques that wifi exactly balance forces at the hand in the staticsituation. When forces act on a mechanism, work (in the technical sense) is doneif the mechanism moves through a displacement. Work is defined as a force actingthrough a distance and is a scalar with units of energy. The principle of virtual workallows us to make certain statements about the static case by allowing the amount ofthis displacement to go to an infinitesimal. Work has the units of energy, so it mustbe the same measured in any set of generalized coordinates. Specifically, we canequate the work done in Cartesian terms with the work done in joint-space terms.In the multidimensional case, work is the dot product of a vector force or torqueand a vector displacement. Thus, we have=-r (5.91)where .F is a 6 x 1 Cartesian force-moment vector acting at the end-effector, isa 6 x 1 infinitesimal Cartesian displacement of the end-effector, r is a 6 x 1 vector
Section 5.11Cartesian transformation of velocities and static forces 157of torquesat the joints, and 80 is a 6 x 1 vector of infinitesimal joint displacements.Expression (5.91) can also be written as= (5.92)The definition of the Jacobian is=J80, (5.93)so we may write =rTS0 (5.94)which must hold for all 80; hence, we haveFTJ_rT (5.95)Transposing both sides yields this result:= (5.96)Equation (5.96) verifies in general what we saw in the particular case of the two-linkmanipulator in Example 5.6: The Jacobian transpose maps Cartesian forces actingat the hand into equivalent joint torques. When the Jacobian is written with respectto frame {O}, then force vectors written in {O} can be transformed, as is made clear by the following notation: =OjT (5.97)When the Jacobian loses full rank, there are certain directions in which the end-effector caimot exert static forces even if desired. That is, in (5.97), if the Jacobianis singular, .7 could be increased or decreased in certain directions (those definingthe null-space of the Jacobian [6]) without effect on the value calculated for r. Thisalso means that, near singular configurations, mechanical advantage tends towardinfinity, such that, with small joint torques, large forces could be generated at theend-effector.3 Thus, singularities manifest themselves in the force domain as well as in the position domain.Note that (5.97) is a very interesting relationship, in that it allows us to convert a Cartesian quantity into a joint-space quantity without calculating any inversekinematic functions. We wifi make use of this when we consider the problem of control in later chapters.5.11CARTESIAN TRANSFORMATION OF VELOCITIES AND STATIC FORCESWemight wish to think in terms of 6 x 1 representations of general velocity of a body:(5.98)Likewise, we could consider 6 x 1 representations of general force vectors, such as(5.99)
3Consider a two-linkplanarmanipulator nearly outstretched with the end-effector in contact with areaction surface. In this configuration, arbitrarlly large forces could be exerted by "small" joint torques.
158Chapter 5Jacobians: velocities and static forceswhereF is a 3 x 1 force vector and N is a 3 x 1 moment vector. It is then naturaltothinkof 6 x 6 transformations that map these quantities from one frame toanother. This is exactly what we have already done in considering the propagationof velocities and forces from link to link. Here, we write (5.45) and (5.47) in matrix-operator form to transform general velocity vectors in frame {A} to their descriptionin frame {B}.The two frames involved here are rigidly connected, so appearing in(5.45), is set to zero in deriving the relationshiprB1rBRBRAPlrA1VB=AABORGXI,(5.100)LBOJBJ[0JLAWAJwhere the cross product is understood to be the matrix operator[0Px=0 .(5.101)0]Now,(5.100) relates velocities in one frame to those in another, so the 6 x 6 operatorwifi be called a velocity transformation; we will use the symbol In this case, it isa velocity transformation that maps velocities in {A} into velocities in {B}, so we usethe following notation to express (5.100) compactly:By= (5.102)We can invert (5.100) in order to compute the description of velocity in terms of{A}, given the quantities in {B}:1rARApAR1rB1VA=BBORGB,(5.103) [AW]L0orAV_ATBV (5.104)Note that these mappings of velocities from frame to frame depend on T (or itsinverse) and so must be interpreted as instantaneous results, unless the relationshipbetween the two frames is static. Similarly, from (5.80) and (5.81), we write the6 x 6 matrix that transforms general force vectors written in terms of {B} into theirdescription in frame {A}, namely,EAF 1rAR0 1EBF1[AN]LAPBO:G xILBNB]'(5.105)
which may be written compactly as= (5.106)where Tf is used to denote a force-moment transformation.
Bibliography159zw
FIGURE5.13:Frames of interest with a force sensor.Velocity and force transformations are similar to Jacobians in that they relatevelocities and forces in different coordinate systems. As with Jacobians, we haveAp _A TBLf_BTU,as can be verified by examining (5.105) and (5.103).
EXAMPLE5.8Figure5.13 shows an end-effector holding a tool. Located at the point where theend-effector attaches to the manipulator is a force-sensing wrist. This is a device that can measure the forces and torques applied to it.Consider the output of this sensor to be a 6 x 1 vector, S1 composed of threeforces and three torques expressed in the sensor frame, {S}. Our real interest is in knowing the forces and torques applied at the tip of the tool, Find the 66transformation that transforms the force-moment vector from {S} to the tool frame,{T}. The transform relating {T} to {S}, is known. (Note that {S} here is thesensor frame, not the station frame.)This is simply an application of (5.106). First,from T, we calculate the inverse,which is composed ofand TPSORG. Then we apply (5.106) to obtain_T
STLs
BIBLIOGRAPHY[1]K. Hunt, Kinematic Geometry of Mechanisms,Oxford University Press, New York,1978.[2] K.R. Symon, Mechanics, 3rd edition, Addison-Wesley, Reading, MA, 1971.Wrist(T}
Tool
Sensor frame
160Chapter 5Jacobians: velocities and static forces[3]I. Shames, Engineering Mechanics, 2nd edition, Prentice-Hall, Englewood Cliffs, NJ,1967.[4] D. OrinandW. Schrader,"EfficientJacobianDeterminationforRobotManipulators," in Robotics Research: The First International Symposium, M. Bradyand R.P. Paul, Editors, MIT Press, Cambridge, MA, 1984.[5] B. Gorla and M. Renaud, Robots Manipulateurs, Cepadues-Editions, Toulouse, 1984.[6] B. Noble, Applied Linear Algebra, Prentice-Hall, Englewood Cliffs, NJ, 1969.[7] J.K. Salisbury and J. Craig, "Articulated Hands: Kinematic and Force Control Issues,"International Journal of Robotics Research, Vol. 1, No. 1, Spring 1982.[8] C. Wampler, "WristSingularities:Theoryand Practice," inTheRobotics Review 2,0. Khatib, J. Craig, and T. Lozano-Perez,Editors,IvilTPress, Cambridge, MA, 1992.
[9]D.E.Whitney, "Resolved Motion Rate Control of Manipulators and Human Prosthe-ses," IEEE Transactions on Man-Machine Systems, 1969.
EXERCISES5.1[101 Repeat Example 5.3,butusing theJacobian written in frame {0}. Are theresults the same as those of Example 5.3?5.2 [25] Find the Jacobian of the manipulator with three degrees of freedom fromExercise 3 of Chapter 3. Write it in terms of a frame {4} located at the tip of thehand and having the same orientation as frame {3}.5.3 [35] Find the Jacobian of the manipulator with three degrees of freedom fromExercise 3 of Chapter 3. Write it in terms of a frame {4} located at the tip of thehand and having the same orientation as frame {3}. Derive the Jacobian in threedifferent ways: velocity propagation from base to tip, static force propagationfrom tip to base, and by direct differentiation of the kinematic equations.5.4 [8] Prove that singularities in the force domain exist at the same configurations assingularities in the position domain.5.5 [39] Calculate the Jacobian of the PUMA 560 in frame {6}.5.6 [47] Is it true that any mechanism with three revolute joints and nonzero linklengths must have a locus of singular points interior to its workspace?5.7 [7] Sketch a figure of a mechanism with three degrees of freedom whose linearvelocity Jacobian is the 3 x 3 identity matrix over all configurations of themanipulator. Describe the kinematics in a sentence or two.5.8 [18] General mechanisms sometimes have certain configurations, called "isotropicpoints," where the columns of the Jacobian become orthogonal and of equalmagnitude [7]. For the two-link manipulator of Example 5.3, find out if anyisotropic points exist. Hint: Is there a requirement on 11 and 12?5.9 [50] Find the conditions necessary for isotropic points to exist in a generalmanipulator with six degrees of freedom. (See Exercise 5.8.)5.10[7]For the two-link manipulator of Example 5.2, give the transformation thatwould map joint torques into a 2 x 1 force vector, 3F, at the hand.5.11 [14] Given0.866 —0.500 0.000 10.0A0.5000.866 0.0000.0BT =0.0000.000 1.0005.00001
Exercises161ifthe velocity vector at the origin of {A} is0.02.0A ——3.01.4141.4140.0find the 6 x 1 velocity vector with reference point the origin of {B}.5.12[15]For the three-link manipulator of Exercise 3.3, give a set of joint angles forwhich the manipulator is at a workspace-boundary singularity and another set ofangles for which the manipulator is at a workspace-interior singularity.5.13[9]A certain two-link manipulator has the following Jacobian:°J(O) =[—11s1—12s12212[ l1c1+ 12c1212c12Ignoring gravity, what are the joint torques required in order that the manipulatorwill apply a static force vector 0F = lOX0?5.14[18]If the link parameter 03ofthe PUMA 560 were zero, a workspace-boundarysingularity would occur when 03 = —90.0°.Give an expression for the value of 03where the singularity occurs, and show that, if 03 were zero, the result would be03 =—90.0°.Hint: In this configuration, a straight line passes through joint axes2 and 3 and the point where axes 4, 5, and 6 intersect.5.15 [24] Give the 3 x 3 Jacobian that calculates linear velocity of the tool tip fromthe three joint rates for the manipulator of Example 3.4 in Chapter 3. Give theJacobian in frame {0}.5.16[20]A 3R manipulator has kinematics that correspond exactly to the set ofZ—Y--Z Euler angles (i.e., the forward kinematics are given by (2.72) with a = 01,=and y =03).Give the Jacobian relating joint velocities to the angularvelocity of the final link.5.17 [31] Imagine that, for a general 6-DOF robot, we have available andfor all i—that is, we know the values for the unit Z vectors of each link frame interms of the base frame and we know the locations of the origins of all link framesin terms of the base frame. Let us also say that we are interested in the velocity ofthe tool point (fixed relative to link n) and that we know also. Now, for arevolute joint, the velocity of the tool tip due to the velocity of joint i is given by=0Z1x—°Piorg)(5.110)and the angular velocity of link ii dueto the velocity of this joint is given by=0Z. (5.111)The total linear and angular velocity of the tool is given by the sum of theand 0w respectively. Give equations analogous to (5.110) and (5.111) for the caseof joint i prismatic, and write the 6 x 6 Jacobian matrix of an arbitrary 6-DOFmanipulator in terms of the Z, and5.18 [18] The kinematics of a 3R robot are given byc1c23 —c1s23S111c1 + l2c1c20T —S1C23—s1s23 —C1 11s1 + 12s1c2—s23c23012s20001
162Chapter5Jacobians: velocities and static forcesFind°J(e), which, when multiplied by the joint velocity vector, givesthe linearvelocity of the origin of frame {3} relative to frame {0}.5.19[15]The position of the origin of link 2 for an RP manipulator is given by
a1c1 —d9s1a1s1+d2c10Give the 2 x 2 Jacobian that relates the two joint rates to the linear velocity ofthe origin of frame {2]. Give a value of 0 where the device is at a singularity.5.20 [20] Explain what might be meant by the statement: "An n-DOF manipulator at asingularity can be treated as a redundant manipulator in a space of dimensionality
12— 1.''PROGRAMMING EXERCISE (PART 5)1.Two frames, {A} and {B}, are not moving relative to one another—that is, T isconstant. In the planar case, we define the velocity of frame {A} asAXAAv_
AWrite a routine that, given and AvA, computes BVB. Hint: This is the planaranalog of (5.100). Use a procedure heading something like (or equivalent C):ProcedureVeltrans (VAR brela: frame; VAR vrela, vrelb: vec3);where"vrela" is the velocity relative to frame {A}, or AVA, and "vrelb" is theoutputof the routine (the velocity relative to frame (B)), or B2. Determine the 3 x 3 Jacobian of the three-link planar manipulator (from Exam-ple 3.3). In order to derive the Jacobian, you should use velocity-propagationanalysis (as in Example 5.2) or static-force analysis (as in Example 5.6). Hand inyour work showing how you derived the Jacobian.Write a routine to compute the Jacobian in frame {3}—that is, 3J(0)—as afunction of the joint angles. Note that frame (3) is the standard link frame withorigin on the axis of joint 3. Use a procedure heading something like (or equivalentC):ProcedureJacobian (VAR theta: vec3; Var Jac:mat33);The manipulatordata are 12 =120.5 meters.
3.A tool frame and a station frame are defined as follows by the user for a certaintask (units are meters and degrees):=[xy0] =[0.10.2 30.0],=[xyO]=[0.00.00.0].At a certain instant, the tool tip is at the position=[xy0] =[0.6—0.3 45.0].
MATLAB Exercise 5163At the same instant, the joint rates (in deg/sec) are measured to bee =83] =[20.010.012.0].Calculate the linear and angular velocity of the tool tip relative to its own frame,that is, TVT. If there is more than one possible answer, calculate all possibleanswers.
MATLAB EXERCISE 5This exercise focuses on the Jacobian matrix and determinant, simulated resolved-ratecontrol, and inverse statics for the planar 3-DOF, 3R robot. (See Figures 3.6 and 3.7; theDH parameters are given in Figure 3.8.)The resolved-rate control method [9] is based on the manipulator velocity equationkX =kjewhere kj is the Jacobian matrix, e isthe vector of relative joint rates, kX isthe vector of commanded Cartesian velocities (both translational and rotational), and kis the frame of expression for the Jacobian matrix and Cartesian velocities. This figureshows a block diagram for simulating the resolved-rate control algorithm:
As is seen in the figure, the resolved-rate algorithm calculates the requiredcommanded joint ratesto provide the commanded Cartesian velocities Xc; thisdiagram must be calculated at every simulated time step. The Jacobian matrix changeswith configurationFor simulation purposes, assume that the commandedjoint anglesare always identical to the actual joint angles achieved, 0A (a result rarely true in thereal world). For the planar 3-DOF, 3R robot assigned, the velocity equations kX = kJ®for k =0are
I1—L1s1—L2s12—L3s193—L2s12 —L3s123—L3s123O=0L1c1 + L2c17 + L3c123L2c12 + L3c123L3c123IZJ 1 1193where s123 =sin(91+ 02 + 03), c123 =cos(01+ 09 + 03), and so on. Note that 0X givesthe Cartesian velocities of the origin of the hand frame (at the center of the grippers inFigure 3.6) with respect to the origin of the base frame {0}, expressed in {0} coordinates.Now, most industrial robots caimot command directly,so we must first integratethese commanded relative joint rates to commanded joint angles which can becommanded to the robot at every time step. In practice, the simplest possible integrationscheme works well, assuming a small control time step 0new = 0oId+InyourMATLAB resolved-rate simulation, assume that the commanded can be achievedperfectly by the virtual robot. (Chapters 6 and 9 present dynamics and control materialfor which we do not have to make this simplifying assumption.) Be sure to update theResolved-Rate-Algorithm Block Diagram
164Chapter 5Jacobians: velocities and static forcesJacobianmatrix with the new configuration °new before completing the resolved-ratecalculations for the next time step.Develop a MATLABprogramto calculate the Jacobian matrix and to simulateresolved-rate control for the planar 3R robot. Given the robot lengths L1 = 4,=3, and L3 =2(in);theinitial joint angles 0 = 93}T={10°200 300}Tandtheconstant commanded Cartesian rates = {i={0.2—0.3 _0•21T (mis,mis, rad/s), simulate for exactly 5 sec, using time steps of exactly dt = 0.1sec. In the same program loop, calculate the inverse-statics problem—that is, calculate thejoint torques T ={r1r2 r3}T (Nm), given the constant commanded Cartesian wrench°{W}{ff,1z}T={12 31T (N, N, Nm). Also, in the same loop, animate the robotto the screen during each time step, so that you can watch the simulated motion to verifythat it is correct.a) For the specific numbers assigned, present five plots (each set on a separate graph,please):1. the three active joint rates=O2 03}T vs. time;2. the three active joint angles 0 = {0i02031Tvs. time;3. the three Cartesian components of X ={xy(rad is fine forsothat it will fit) vs. time;4. the Jacobian matrix determinant IJI vs.time—comment on nearness tosingularities during the simulated resolved-rate motion;5. the three active joint torques T =r3}Tvs. time.Carefully label (by hand is fine!) each component on each plot; also, label the axeswith names and units.b) Check your Jacobian matrix results for the initial and final joint-angle sets bymeans of the Corke MATLAB Robotics Toolbox. Try function jacobOQ. Caution:The toolbox Jacobian functions are for motion of {3} with respect to {0}, not for {H}with respect to {0} as in the problem assignment. The preceding function gives theJacobian result in {0} coordinates; jacobn() would give results in {3} coordinates.
CHAPTER6Manipulator dynamics
6.1INTRODUCTION6.2ACCELERATION OF A RIGID BODY6.3MASS DISTRIBUTION6.4NEWTON'S EQUATION, EULER'S EQUATION6.5ITERATIVE NEWTON—EULER DYNAMIC FORMULATION6.6ITERATIVE VS. CLOSED FORM6.7AN EXAMPLE OF CLOSED-FORM DYNAMIC EQUATIONS6.8THE STRUCTURE OF A MANIPULATOR'S DYNAMIC EQUATIONS6.9LAGRANGIAN FORMULATION OF MANIPULATOR DYNAMICS6.10 FORMULATING MANIPULATOR DYNAMICS IN CARTESIAN SPACE6.11 INCLUSION OF NONRIGID BODY EFFECTS6.12 DYNAMIC SIMULATION6.13 COMPUTATIONAL CONSIDERATIONS
6.1INTRODUCTIONOurstudy of manipulators so far has focused on kinematic considerations only.We have studied static positions, static forces, and velocities; but we have neverconsidered the forces required to cause motion. In this chapter, we consider theequations of motion for a manipulator—the way in which motion of the manipulatorarises from torques applied by the actuators or from external forces applied to themanipulator.Dynamics of mechanisms is a field in which many books have been written.Indeed, one can spend years studying the field. Obviously, we cannot cover thematerial in the completeness it deserves. However, certain formulations of thedynamics problem seem particularly well suited to application to manipulators. Inparticular, methods which make use of the serial-chain nature of manipulators arenatural candidates for our study.There are two problems related to the dynamics of a manipulator that we wishto solve. In the first problem, we are given a trajectory point, e, andë,andwewish to find the required vector of joint torques, r. This formulation of dynamicsis useful for the problem of controlling the manipulator (Chapter 10). The secondproblem is to calculate how the mechanism wifi move under application of a set ofjoint torques. That is, given a torque vector, r, calculate the resulting motion of themanipulator, g, é,and0.Thisis useful for simulating the manipulator.
165 
166Chapter 6Manipulator dynamics6.2ACCELERATION OF A RIGID BODYWenow extend our analysis of rigid-body motion to the case of accelerations. Atany instant, the linear and angular velocity vectors have derivatives that are calledthe linear and angular accelerations, respectively. That is,
BBBV =_BV=lim (6.1) dtAt-+oandurn)(6.2) dtAs with velocities, when the reference frame of the differentiation is understood tobe some universal reference frame, {U}, we wifi use the notationU.VA — VAORG .3andWAQA. (6.4)LinearaccelerationWestart by restating (5.12), an important result from Chapter 5, which describesthe velocity of a vector Bas seen from frame {A} when the origins are coincident:AV=BVQ+ AQB xBQ•(6.5)The left-hand side of this equation describes how A is changing in time. So, becauseorigins are coincident, we could rewrite (6.5) as
(6.6)This form of the equation wifi be useful when deriving the corresponding accelerationequation.By differentiating (6.5), we can derive expressions for the acceleration of Bas viewed from {A} when the origins of {A} and {B} coincide:
(6.7)Now we apply (6.6) twice-—once to the first term, and once to the last term. Theright-hand side of equation (6.7) becomes
(68) +Combining two terms, we get(6.9)
Section 6.3Mass distribution167Finally,to generalize to the case in which the origins are not coincident, we add oneterm which gives the linear acceleration of the origin of {B}, resulting in the finalgeneral formula:(6.10)+AQx(AQxBQ)A particular case that is worth pointing out is when B is constant, orBy ==0. (6.11)In this case, (6.10) simplifies to+Q X (AQB.B Q)+Ac2B (6.12)We wifi use this result in calculating the linear acceleration of the links of amanipulator with rotational joints. When a prismatic joint is present, the moregeneral form of (6.10) wifi be used.AngularaccelerationConsiderthe case in which {B} is rotating relative to {A} with AQB and {C} is rotatingrelative to {B} with BTo calculatewe sum the vectors in frame {AI:AQ _AQARBQ 613 CB+BCBy differentiating, we obtaind1A—+Now, applying (6.6) to the last term of (6.14), we getXBRQc.(6.15)We wifi use this result to calculate the angular acceleration of the links of amanipulator.6.3MASS DISTRIBUTIONInsystems with a single degree of freedom, we often talk about the mass of a rigidbody. In the case of rotational motion about a single axis, the notion of the momentof inertia is a familiar one. For a rigid body that is free to move in three dimensions,there are infinitely many possible rotation axes. In the case of rotation about anarbitrary axis, we need a complete way of characterizing the mass distribution of arigid body. Here, we introduce the inertia tensor, which, for our purposes, can bethought of as a generalization of the scalar moment of inertia of an object.We shall now define a set of quantities that give information about thedistribution of mass of a rigid body relative to a reference frame. Figure 6.1 showsa rigid body with an attached frame. Inertia tensors can be defined relative to anyframe, but we wifi always consider the case of an inertia tensor defined for a frame
168Chapter 6Manipulator dynamics
FIGURE 6.1:Theinertiatensor of an object describes the object's mass distribution.Here,thevector A P locates the differential volume element, dv.attached to the rigid body. Where itis important, we will indicate, with a leadingsuperscript, the frame ofreference of agiven inertia tensor.The inertia tensorrelative to frame{A}is expressed in the matrix form as the 3 x 3 matrixr'Xx—'xz 1A1= ,(6.16)LJwhere the scalar elements are given by=+z2)pdv,=+z2)pdv,
=+ y2)pdv, (6.17)=
=
=yzpdv,in which the rigid body is composed of differential volume elements, dv, containingmaterial of density p. Each volume element is located with a vector, A p = {xyzlTas shown in Fig. 6.1.The elementsIfl,, andarecalled themass moments of inertia. Notethat, ineach case,weare integratingthe mass elements, pdv, times the squares ofthe perpendiculardistancesfrom the correspondingaxis.The elementswithmixedindicesare called the massproducts of inertia.This setofsixindependentquantitiesAx
Section 6.3Mass distribution169will,for a given body, depend on the position and orientation of the frame in whichthey are defined. If we are free to choose the orientation of the reference frame, it ispossible to cause the products of inertia to be zero. The axes of the reference framewhen so aligned are called the principal axes and the corresponding mass momentsare the principal moments of inertia.
EXAMPLE6.1Findthe inertia tensor for the rectangular body of uniform density p with respect tothe coordinate system shown in Fig. 6.2.First, we computeUsing volume element dv =dxdy dz, we get=jhfw(2+ z2)p dxdydz
=ff(Y2+ z2)wpdy dzçhJ0+z21)wpdz
in(12+ h2),3(6.18)
where in is the total mass of the body. Permuting the terms, we can get andby inspection:
and2+h2)
FIGURE 6.2:A bodyofuniform density.Y(6.19)
(6.20) =+ co2).
fA}
Ii
170Chapter 6Manipulator dynamicsWenextcompute
=f f—ypdydz (6.21)
cuw212—4---pdzin=-4-wl.Permuting the terms, we get= (6.22)and= (6.23)Hence,the inertia tensor for this object is
A1=¶(w2 + .(6.24)
Asnoted, the inertia tensor is afunction of the location and orientation ofthe reference frame. A well-known result, the parallel-axis theorem, isone wayof computing how the inertia tensor changes under translations ofthe referencecoordinate system. The parallel-axis theorem relates the inertia tensor in a framewith origin at the center of mass to the inertia tensor with respect to anotherreference frame. Where {C} islocated at the center of mass of the body, and {A} isan arbitrarily translated frame, the theorem can be stated [1] asA1=++A1 _C1— p625 xy —xywhere=locatesthe center of mass relative to {A}. Theremainingmoments and products of inertia are computed from permutations of x,y, andz in(6.25).Thetheorem may be stated in vector—matrix form asA1=C1+ in[P— (6.26)where13 is the 3 x 3 identity matrix.
EXAMPLE6.2Findthe inertia tensor for the same solid body described for Example 6.1 when it isdescribed in a coordinate system with origin at the body's center of mass.
Section 6.4Newton's equation, Euler's equation 171Wecanapplythe parallel-axis theorem, (6.25), whererxclyc 1LZcJL12Next,we fmd=Cj=0. (6.27)The other elements are found by symmetry. The resulting inertia tensor written inthe frame at the center of mass is00Cj=0+h2)0 .(6.28)00The result is diagonal, so frame {C} must represent the principal axes of this body.
Some additional facts about inertia tensors are as follows:1. If two axes of the reference frame form a plane of symmetry for the massdistribution of the body, the products of inertia having as an index thecoordinate that is normal to the plane of symmetry wifi be zero.2. Moments of inertia must always be positive. Products of inertia may haveeither sign.3. The sum of the three moments of inertia is invariant under orientation changesin the reference frame.4. The eigenvalues of an inertia tensor are the principal moments for the body.The associated eigenvectors are the principal axes.Most manipulators have links whose geometry and composition are somewhatcomplex, so that the application of (6.17) is difficult in practice. A pragmatic optionis actually to measure rather than to calculate the moment of inertia of each link byusing a measuring device (e.g., an inertia pendulum).6.4NEWTON'S EQUATION,EULER'S EQUATIONWewifi consider each link of a manipulator as a rigid body. If we know thelocation of the center of mass and the inertia tensor of the link, then its massdistribution is completely characterized. In order to move the links, we mustaccelerate and decelerate them. The forces required for such motion are a functionof the acceleration desired and of the mass distribution of the links. Newton'sequation, along with its rotational analog, Euler's equation, describes how forces,inertias, and accelerations relate.
172Chapter 6Manipulator dynamics
FIGURE 6.3: A force Factingat the center of mass of a body causes the body toaccelerate at Uc.
Newton's equationFigure 6.3 shows a rigid body whose center of mass is accelerating with accelerationIn such a situation, the force, F, actingat the center of mass and causing thisacceleration is given by Newton's equation
where misthe total mass of the body.Euler's equationF= (6.29)
Figure 6.4 shows a rigid body rotating with angular velocity cv and with angularacceleration th.Insuch a situation, the moment N, whichmust be acting on the bodyto cause this motion, is given by Euler's equationN =CIó)+xCIa) (6.30)where Cj is the inertia tensor of the body written in a frame, {C}, whoseorigin islocated at the center of mass.
FIGURE 6.4: A moment N isacting on a body, and the body is rotating with velocitycv and accelerating at th.(1)
Section 6.5Iterative Newton—Euler dynamic formulation 1736.5ITERATIVE NEWTON-EULER DYNAMIC FORMULATIONWenow consider the problem of computing the torques that correspond to agiven trajectory of a manipulator. We assume we know the position, velocity, andacceleration of the joints, (0, 0, 0). With this knowledge, and with knowledge ofthe kinematics and the mass-distribution information of the robot, we can calculatethe joint torques required to cause this motion. The algorithm presented is basedupon the method published by Luh, Walker, and Paul in [2].Outwarditerations to compute velocities and accelerationsInorder to compute inertial forces acting on the links, it is necessary to computethe rotational velocity and linear and rotational acceleration of the center of massof each link of the manipulator at any given instant. These computations wifi bedone in an iterative way, starting with link 1 and moving successively, link by link,outward to link n.The "propagation" of rotational velocity from link to link was discussed inChapter 5 and is given (for joint i + 1 rotational) byi+1—i+lRi+12wi+1_1 i+1•From (6.15), we obtain the equation for transforming angular acceleration from onelink to the next:i+lth=i+lR'th1 +X+(6.32)When joint i + 1 is prismatic, this simplifies to=1+lR1w1. (6.33)The linear acceleration of each link-frame origin is obtained by the application of(6.12):=x+x ('co1 x+(6.34)For prismatic joint i + 1, (6.34) becomes (from (6.10))=x+x (1w1 x+xd1+121+12635
Ii+1i+1i+1We also will need the linear acceleration of the center of mass of each link, whichalso can be found by applying (6.12):='th1x+x (1w1 ++(6.36)Here, we imagine a frame, {C1 }, attached to each link, having its origin located atthe center of mass of the link and having the same orientation as the link frame,{i}. Equation (6.36) doesn't involve joint motion at all and so is valid for joint i + 1,regardless of whether it is revolute or prismatic.Note that the application of the equations to link 1 is especially simple, becauseow0 =°th0=0.
174Chapter 6Manipulator dynamicsThe force and torque acting on a linkHavingcomputed the linear and angular accelerations of the mass center of eachlink, we can apply the Newton—Euler equations (Section 6.4) to compute the inertialforce and torque acting at the center of mass of each link. Thus we have
N1=ClIth.x (6.37)where} has its origin at the center of mass of the link and has the same orientationas the link frame, {i}.Inwarditerations to compute forces and torquesHavingcomputed the forces and torques acting on each link, we now need tocalculate the joint torques that will result in these net forces and torques beingapplied to each link.We can do this by writing a force-balance and moment-balance equation basedon a free-body diagram of a typical link. (See Fig. 6.5.) Each link has forces andtorques exerted on it by its neighbors and in addition experiences an inertial forceand torque. In Chapter 5, we defined special symbols for the force and torqueexerted by a neighbor link, which we repeat here:=forceexerted on link i by link i 1,=torqueexerted on link i by link i — 1.By summing the forces acting on link i, we arrive at the force-balancerelationship:638 1— Jji+1Ji+1•Bysumming torques about the center of mass and setting them equal to zero,we arrive at the torque-balance equation:'N1 =—+ ('Pc.) Xtf—('p1+'—'Pc)X(6.39)
FIGU RE 6.5: The force balance, including inertial forces, for a single manipulator link.li + 11+ 1
Section 6.5Iterative Newton—Euler dynamic formulation 175Usingthe result from the force-balance relation (6.38) and adding a fewrotation matrices, we can write (6.39) as
=——x—x(6.40)
Finally, we can rearrange the force and torque equations so that they appear asiterative relationships from higher numbered neighbor to lower numbered neighbor:
I,C_1 641 ii —i+1Ji+1 Ij,=++x+x(6.42)
Theseequations are evaluated link by link, starting from link ii and workinginward toward the base of the robot. These inward force iterations are analogousto the static force iterations introduced in Chapter 5, except that inertial forces andtorques are now considered at each link.As in the static case, the required joint torques are found by taking the Zcomponent of the torque applied by one link on its neighbor:
= (6.43)
For joint i prismatic, we use
=ifT (6.44)
where we have used the symbol r for a linear actuator force.Note that, for a robot moving in free space, N+lfN+l and N+lliN+l are setequal to zero, and so the first application of the equations for link n is very simple.If the robot is in contact with the environment, the forces and torques due tothis contact can be included in the force balance by having nonzero N+1 fN+1 andN+1
Theiterative Newton—Euler dynamics algorithmThecomplete algorithm for computing joint torques from the motion of the jointsis composed of two parts. First, link velocities and accelerations are iterativelycomputed from link 1 out to link n and the Newton—Euler equations are appliedto each link. Second, forces and torques of interaction and joint actuator torquesare computed recursively from link n back to link 1. The equations are summarizednext for the case of all joints rotational:
176Chapter 6Manipulator dynamicsOutwarditerations: i: 0 —÷5i+1_i+lDi i£3im &i+11+1'i+lth='thy+x+(6.46)=!+1R(ithX+x ('cot x 'p1+1) + (6.47)_i+1•i+1—Xc1÷1
X(i+1Wj+lxi+lp)+(6.48)i+lp= (6.49)=i+lth+x (6.50)Inwarditerations: i: 6 —÷1=+ 'Fe, (6.51)= 'N1+1+1k+x 'F1x (6.52)='2,. (6.53)Inclusion of gravity forces in the dynamics algorithmTheeffect of gravity loading on the links can be included quite simpiy by setting=G,where G has the magnitude of the gravity vector but points in the oppositedirection. This is equivalent to saying that the base of the robot is acceleratingupward with 1 g acceleration. This fictitious upward acceleration causes exactly thesame effect on the links as gravity would. So, with no extra computational expense,the gravity effect is calculated.6.6ITERATIVE VS. CLOSED FORMEquations(6.46) through (6.53) give a computational scheme whereby, given thejoint positions, velocities, and accelerations, we can compute the required jointtorques. As with our development of equations to compute the Jacobian inChapter 5, these relations can be used in two ways: as a numerical computationalalgorithm, or as an algorithm used analytically to develop symbolic equations.Use of the equations as a numerical computational algorithm is attractivebecause the equations apply to any robot. Once the inertia tensors, link masses, Pc,vectors, andmatrices are specified for a particular manipulator, the equationscan be applied directly to compute the joint torques corresponding to any motion.However, we often are interested in obtaining better insight into the structureof the equations. For example, what is the form of the gravity terms? How doesthe magnitude of the gravity effects compare with the magnitude of the inertialeffects? To investigate these and other questions, it is often useful to write closed-form dynamic equations. These equations can be derived by applying the recursive
Section 6.7An example of closed-form dynamic equations 177Newton—Eulerequations symbolically to e, and e.Thisis analogous to what wedid in Chapter 5 to derive the symbolic form of the Jacobian.6.7AN EXAMPLE OF CLOSED-FORM DYNAMIC EQUATIONSHerewe compute the closed-form dynamic equations for the two-link planarmanipulator shown in Fig. 6.6. For simplicity, we assume that the mass distributionis extremely simple: All mass exists as a point mass at the distal end of each link.These masses are in1 and in2.First, we determine the values of the various quantities that wifi appear in therecursive Newton—Euler equations. The vectors that locate the center of mass foreach link are
1Pc1
PC2= 12X2.Because of the point-mass assumption, the inertia tensor written at the center ofmass for each link is the zero matrix:C111=C212=Thereare no forces acting on the end-effector, so we have
fl3= 0.Thebase of the robot is not rotating; hence, we have
COO= 0,th0 =0.
T7
FIGURE 6.6:Two-linkplanarmanipulator with point masses at distal ends of links.
178Chapter 6Manipulator dynamicsTo includegravity forces, we wifi use=The rotation between successive link frames is given byr=CH10.0[ 0.00.01.00.0i+lR=—S10.0L0.00.01.0Wenow apply equations (6.46) through (6.53).Theoutward iterations for link 1 are as follows:ro0[é1ro0Lr01 roiL0 01][0jL°[q•1r11r
r—,n111Ô12 +1F1=+ in1gc1L0rol0. (6.54)L0JTheoutward iterations for link 2 are as follows:
.01 +ro0+
Section 6.7An example of closed-form dynamic equations 179
Ec201E+ gs1 1119152 —+ gs12=L+gc1I =001]L0j0ro•.1Vc =12(91+92)+ IU°JL1191s2—+ gs12+1101c2++ gc12, (6.55)0
ni21191s2—+ in2gs12 —m212(01+2F2=,n71191c2++ fl12gc12 + 111212(01 +0EU2N_I 0[0Theinward iterations for link 2 are as follows:
2_2f2_F2,[ 0 1=I 0 (6.56)[rn91112c291++ in212gc12 + ,n212(01 +JTheinward iterations for link 1 are as follows:[c2—s2 0 1,n211s291—+ rn2gs12 —in219(91+if1=S2C20rn211c201++ m2gc12 + in212(91+LU01] 0r++,n11191+ in1gc1L0r 01/1=1 0[in21112c2ö1 ++ 'n2l2gc12 + ,n212(01 +r+10L+ in1l1gc1
+[—in21 11 2s2(91 + 02)2 + in211gs2s12 (6.57)+rn21112c2(01 ++ in211gc2c17
180Chapter 6Manipulator dynamicsExtractingthe 2componentsof the 1n1, we find the joint torques:=++ ,n21112c2(291 + d2)+(in1 +——2,n21112s20102 + in212gc12 + (in1 + in2)11gc1,=++ rn212gc17 + in212(91 + (6.58)Equations (6.58) give expressions for the torque at the actuators as a functionofjoint position, velocity, and acceleration. Note that these rather complex functionsarose from one of the simplest manipulators imaginable. Obviously, the closed-formequations for a manipulator with six degrees of freedom wifi be quite complex.6.8THE STRUCTURE OF A MANIPULATOR'S DYNAMIC EQUATIONSItis often convenient to express the dynamic equations of a manipulator in a singleequation that hides some of the details, but shows some of the structure of theequations.Thestate-space equationWhenthe Newton—Euler equations are evaluated symbolically for any manipulator,they yield a dynamic equation that can be written in the form=M(O)O+ v(e, e)+G(e),(6.59)where M(O) is then x n mass matrix of the manipulator, V(O, 0) is ann x 1 vectorof centrifugal and Coriolis terms, and is an iix1 vector of gravity terms. Weuse the term state-space equation because the term 0), appearing in (6.59),has both position and velocity dependence [3].Each element of M(0) and G(0) is a complex function that depends on 0, theposition of all the joints of the manipulator. Each element of V(e, 0) is a complexfunction of both 0 and 0.We may separate the various types of terms appearing in the dynamic equationsand form the mass matrix of the manipulator, the centrifugal and Coriolis vector,and the gravity vector.
EXAMPLE6.3GiveM(0), V(0, è),andG(0) for the manipulator of Section 6.7.Equation (6.59) defines the manipulator mass matrix, M(0); it is composed ofall those terms which multiply and is a function of 0. Therefore, we haveM(0) =+ 21112,n2c2 ++ m2) 12,n2 + 1112in2c2 1.(6.60)[+ 1112,n2c7 ]Anymanipulator mass matrix is symmetric and positive definite, and is, therefore,always invertible.The velocity term, V (0, 0), contains all those terms that have any dependenceon joint velocity. Thus, we obtainV(0, 0) =[mn2hul2s22,1.(6.61)[in21112s291]
Section 6.8The structure of a manipulator's dynamic equations 181Atermlikeis caused by a centrifugal force, and is recognized as suchbecause it depends onthesquare of a joint velocity. A term such asis caused by a Coriolis force and wifi always contain the product of two differentjoint velocities.The gravity term, G(e), contains all those terms in which the gravitationalconstant, g, appears. Therefore, we have=[in217gc12+ (in1 + in2)11gc1 1.(6.62)Lin212gc12JNotethat the gravity term depends only on e andnot on its derivatives.
Theconfiguration-space equationBywriting the velocity-dependent term, V(O, ina different form, we can writethe dynamic equations as=M(e)e+ B(O)[éé] + c(e)[e2]+G(O),(6.63)where B(O) is a matrix of dimensions n x n(n — 1)/2of Coriolis coefficients, [OO]isan n(n —1)/2x 1 vector of joint velocity products given by
—C(O) is ann x iimatrixof centrifugal coefficients, and isan n x 1 vector givenby[92 9292 ]T (6.65)We wifi call (6.63) the configuration-space equation, because the matrices arefunctions only of manipulator position [3].In this form of the dynamic equations, the complexity of the computation isseen to be in the form of computing various parameters which are a function of onlythe manipulator position, 0. This is important in applications (such as computercontrol of a manipulator) in which the dynamic equations must be updated asthe manipulator moves. (Equation (6.63) gives a form in which parameters are afunction of joint position only and can be updated at a rate related to how fast themanipulator is changing configuration.) We will consider this form again with regardto the problem of manipulator control in Chapter 10.EXAMPLE 6.4Give B(0) and C(0) (from (6.63)) for the manipulator of Section 6.7.For this simple two-link manipulator, we have{ee]=
=(6.66)

